{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/light/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/light/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/light/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/light/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Antlr4-基础.md","hash":"8c87b9589c3f8256b8a25c0033608f5984e9bd6b","modified":1622732368820},{"_id":"source/_posts/C-模式匹配.md","hash":"9b8218d02d83433ed02b89f74f303dc40b7cd900","modified":1638367972992},{"_id":"source/_posts/Editor-测试markdown.md","hash":"7b4268cb0ae984e4a7907296061cb48fd7e1080e","modified":1638368521021},{"_id":"source/_posts/QR-CODE.md","hash":"c0969ee115cf83a1c731cbd9e11954ffbd5f4d9c","modified":1622648631708},{"_id":"source/_posts/Ubuntu-20-04-上安装-Apache-Maven.md","hash":"0bdaed2041deac40e8e60d60731192961f41b92b","modified":1622648563973},{"_id":"source/_posts/Ubuntu-20-04-上安装-Jdk.md","hash":"7b610131c101239f1a3b865b530b116b52135670","modified":1622648539522},{"_id":"source/_posts/ejs-基础.md","hash":"7582bf1202fe3e210c0368b781a4bd322e76d4bd","modified":1622904574140},{"_id":"source/_posts/hello-world.md","hash":"415238e4b1ff4b9c7dc64ee6baa98a186b993e55","modified":1622648655421},{"_id":"source/_posts/hexo-themes-下提交不到github.md","hash":"679dc96bd48abf70f861d4806e5d61650c20662e","modified":1623064678461},{"_id":"source/_posts/hexo-添加目录.md","hash":"d2fe46164f691b509fd639d9799e7a3a55623aec","modified":1622901746417},{"_id":"source/_posts/javascript-学习.md","hash":"798ecdbcc9355c0325cb1946d66b9f96cf6b8164","modified":1622904510191},{"_id":"source/_posts/rust-基础.md","hash":"a64af2e6d5506be35ba7f996e43510269e8e89a3","modified":1622647860719},{"_id":"source/_posts/scala-基础.md","hash":"22f7d4c237fc0a70c36ed574a8a80ede908d6bd4","modified":1622648276429},{"_id":"source/_posts/Antlr4-基础/1.png","hash":"745fe31a674d5b183ce99e7c8eb9fa683c69aeb9","modified":1622732356092},{"_id":"source/_posts/QR-CODE/20210514-1.png","hash":"cc8de42ebe2acc20e8955a2c3a66f38f4ba5cc6f","modified":1621046049312},{"_id":"source/_posts/QR-CODE/20210514-2.png","hash":"103774c3be68daccf8bd871def428f6b2ca3e90a","modified":1621046067075},{"_id":"themes/light/source/css/_base/utils.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1622473592269},{"_id":"themes/light/_config.yml","hash":"e83729f4763f6ef34db683d559b984759709f2b9","modified":1622733186953},{"_id":"themes/light/languages/de.yml","hash":"1ebe2d4f1b48c84e004c933bec65731fb54c9998","modified":1622473592059},{"_id":"themes/light/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1622473592063},{"_id":"themes/light/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1622473592055},{"_id":"themes/light/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1622473592063},{"_id":"themes/light/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1622473592072},{"_id":"themes/light/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1622473592064},{"_id":"themes/light/languages/en.yml","hash":"feb1dd022dc8897d65baa5b927de2a3d4178d798","modified":1622473592068},{"_id":"themes/light/languages/es.yml","hash":"727707b95580bbe9773edef4c84a9735fd537742","modified":1622473592076},{"_id":"themes/light/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1622473592080},{"_id":"themes/light/languages/lt.yml","hash":"f84b72c94b2b6beb84df9e36e88037e74d3e3c7b","modified":1622473592092},{"_id":"themes/light/languages/lt-LT.yml","hash":"0b51f65a5e5059eee74c219f3dd8ec501a28c891","modified":1622473592089},{"_id":"themes/light/languages/ja.yml","hash":"3b43fc314265c1260a41d1600598cd2f0ab9d087","modified":1622473592085},{"_id":"themes/light/languages/no.yml","hash":"d9a1b34d590f94ab5c03809754e62bc4cf0e8d0f","modified":1622473592096},{"_id":"themes/light/languages/pl-PL.yml","hash":"8a7089a3e060b5d159de3ca519f190231c6ccf53","modified":1622473592099},{"_id":"themes/light/languages/pl.yml","hash":"19313b4c80c50196c364afe932dad3a975782817","modified":1622473592103},{"_id":"themes/light/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1622473592107},{"_id":"themes/light/languages/ru.yml","hash":"37161bb9b6cc2dae1f53837185be32e7a0b8abfa","modified":1622473592111},{"_id":"themes/light/languages/zh-CN.yml","hash":"751f1a2bbfb6736c71e846493ae0fb7ef7dc778d","modified":1622473592115},{"_id":"themes/light/languages/zh-TW.yml","hash":"b2474b775a8fa0fa3e9e3c58ddb11b20cf65dbc5","modified":1622473592118},{"_id":"themes/light/layout/index.ejs","hash":"c7cf84c84c26f1adfc249bc9a7605206fa245f73","modified":1622473592219},{"_id":"themes/light/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1622473592215},{"_id":"themes/light/layout/layout.ejs","hash":"dd4b0fce0c49cd6282527b89583ecceaf3ce6ab3","modified":1622902263860},{"_id":"themes/light/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1622473592211},{"_id":"themes/light/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1622473592229},{"_id":"themes/light/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1622473592229},{"_id":"themes/light/layout/_partial/after_footer.ejs","hash":"edee9e48ffb4934ddd21ad5520ad30b641b8e765","modified":1622473592125},{"_id":"themes/light/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1622473592232},{"_id":"themes/light/layout/_partial/archive.ejs","hash":"f42fc09052f70e21b1103faf681733694d923419","modified":1622473592129},{"_id":"themes/light/layout/_partial/article.ejs","hash":"0dc313bca098737a14e73171ef8dda4cc02a663a","modified":1622473592134},{"_id":"themes/light/layout/_partial/facebook_comment.ejs","hash":"49ee54e84fe2b70bd9540e2eeba5a85f744941b0","modified":1622473592143},{"_id":"themes/light/layout/_partial/footer.ejs","hash":"092bea0a0cdb4ab976723bbce3771bc35a96fdc6","modified":1622473592147},{"_id":"themes/light/layout/_partial/comment.ejs","hash":"56786339f66a1fb56d29070633b27bd34ae3f9c3","modified":1622473592138},{"_id":"themes/light/layout/_partial/head.ejs","hash":"c767f7b1d451274a6d5cf5e266d50e6e60abec9e","modified":1622898580956},{"_id":"themes/light/layout/_partial/google_analytics.ejs","hash":"f73d8de209cb3fddc3aa33d6a4ac56caa18a79af","modified":1622473592150},{"_id":"themes/light/layout/_partial/pagination.ejs","hash":"7f403bf4306c5cd2e81dae87e7009074bd13085c","modified":1622888379490},{"_id":"themes/light/layout/_partial/header.ejs","hash":"e1cc303f4e942e4b263fe6b103eaa4c1a473f5d2","modified":1622473592157},{"_id":"themes/light/layout/_partial/sidebar.ejs","hash":"016441ca9534769d8e151cffe4027686e9c86f18","modified":1622473592186},{"_id":"themes/light/layout/_widget/recent_posts.ejs","hash":"ae6056d6e9423cd8ebd7c4ae5aafd576638e4992","modified":1622473592194},{"_id":"themes/light/layout/_widget/search.ejs","hash":"7d102ee25a9bf0e9c7a621c5cdb4ceedaddad177","modified":1622473592198},{"_id":"themes/light/layout/_widget/category.ejs","hash":"a5a21f584477103fc872a3e6ab8aaea1406b7d3b","modified":1622473592190},{"_id":"themes/light/layout/_widget/tag.ejs","hash":"9f212961ebe21c442d47dbe5bbaa7a60d26195c6","modified":1622473592201},{"_id":"themes/light/source/css/style.styl","hash":"8e8458e78717c49c4ff278b741258d77301f6be4","modified":1622473592335},{"_id":"themes/light/layout/_widget/tagcloud.ejs","hash":"139e91b1e6abcc1e3883bcc03a9a1a7f1d891d7a","modified":1622473592207},{"_id":"themes/light/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1622473592339},{"_id":"themes/light/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1622473592344},{"_id":"themes/light/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1622473592359},{"_id":"themes/light/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1622473592348},{"_id":"themes/light/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1622473592352},{"_id":"themes/light/source/js/gallery.js","hash":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1622473592384},{"_id":"themes/light/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1622473592363},{"_id":"themes/light/source/fancybox/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1622473592375},{"_id":"themes/light/source/fancybox/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1622473592380},{"_id":"themes/light/layout/_partial/post/category.ejs","hash":"3f5e13bf0f7161feb8cc1a5ca12e4df20594d1aa","modified":1622473592166},{"_id":"themes/light/source/js/jquery.imagesloaded.min.js","hash":"28ef4346743a60c896a9ae492a544c0854904350","modified":1622473592394},{"_id":"themes/light/layout/_partial/post/gallery.ejs","hash":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1622473592170},{"_id":"themes/light/layout/_partial/post/share.ejs","hash":"b4d48ed6a28ed90182704beb3041e8c6b36a04ac","modified":1622473592174},{"_id":"themes/light/layout/_partial/post/tag.ejs","hash":"5f55c1a802f65357d3398f64a07917beb2454498","modified":1622473592179},{"_id":"themes/light/layout/_partial/post/title.ejs","hash":"a95cb0f6190b503b28ca69e8a2d4ea52f6ef6ffe","modified":1622473592182},{"_id":"themes/light/source/css/_base/layout.styl","hash":"b26cd4768466f637b620029b314dd50a06c98b8c","modified":1622473592265},{"_id":"themes/light/source/css/_base/variable.styl","hash":"832fecbb623c8fba9419d6a93586126d44b43cc6","modified":1622473592272},{"_id":"themes/light/source/css/_partial/archive.styl","hash":"b6fa84ea80bfbdb3a93f64c06a8c652e4242128e","modified":1622473592277},{"_id":"themes/light/source/css/_partial/article.styl","hash":"0598a40f8693bdb03c739669cfc6b72fe20c628a","modified":1622473592281},{"_id":"themes/light/source/css/_partial/comment.styl","hash":"6fa67d96903ac3b1674e6c8d4c801e16115808e0","modified":1622473592286},{"_id":"themes/light/source/css/_partial/header.styl","hash":"ad67bf40a0cafb1e5514b058c853c517e602fe44","modified":1622473592293},{"_id":"themes/light/source/css/_partial/footer.styl","hash":"821d50a9d45afec0274e1e64c2b37a71f3611c01","modified":1622473592290},{"_id":"themes/light/source/css/_partial/index.styl","hash":"eb0f1536a57cca57d9a280191fbb63185c266ee8","modified":1622473592297},{"_id":"themes/light/source/css/_partial/sidebar.styl","hash":"213a16c3206d045ca01b0abf8891e96421d61fb9","modified":1622473592301},{"_id":"themes/light/source/css/font/fontawesome-webfont.eot","hash":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1622473592312},{"_id":"themes/light/source/css/_partial/syntax.styl","hash":"d4fd5c33c9ea9d657641e8252a00e7d0b1db6120","modified":1622473592305},{"_id":"themes/light/source/css/font/fontawesome-webfont.woff","hash":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1622473592330},{"_id":"themes/light/source/js/jquery-3.4.1.min.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1622473592389},{"_id":"themes/light/source/css/font/fontawesome-webfont.svg","hash":"ff51bbb11dfe58345f41cead2c425d6e8be28176","modified":1622473592317},{"_id":"themes/light/source/css/font/fontawesome-webfont.ttf","hash":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1622473592324}],"Category":[{"name":"OTHER","_id":"ckwnmevwy00024ku2ejr84o5x"},{"name":"C#","_id":"ckwnmevx200074ku25am13l53"},{"name":"Markdown","_id":"ckwnmevx4000c4ku22ekfajfv"},{"name":"Java","_id":"ckwnmevx7000k4ku2gmvl03j7"},{"name":"JavaScript","_id":"ckwnmevx8000n4ku2gu6vf21l"},{"name":"hexo","_id":"ckwnmevxa000w4ku28jkbfjsj"},{"name":"Rust","_id":"ckwnmevxi001m4ku203wpe4f1"},{"name":"Scala","_id":"ckwnmevxp001r4ku2gzai0d53"}],"Data":[],"Page":[],"Post":[{"title":"Antlr4 基础","date":"2021-06-02T15:35:24.000Z","_content":"\n## Install  ANTLR v4 on unix\n+ Install Java (version 1.7 or higher)\nDownload\n    $ cd /usr/local/lib\n    $ curl -O https://www.antlr.org/download/antlr-4.9-complete.jar\nOr just download in browser from website: https://www.antlr.org/download.html and put it somewhere rational like /usr/local/lib.\n\n+ Add antlr-4.9-complete.jar to your CLASSPATH:\n    $ export CLASSPATH=\".:/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH\"\nIt's also a good idea to put this in your .bash_profile or whatever your startup script is.\n\n+ Create aliases for the ANTLR Tool, and TestRig.\n    $ alias antlr4='java -Xmx500M -cp \"/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH\" org.antlr.v4.Tool'\n    $ alias grun='java -Xmx500M -cp \"/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH\" org.antlr.v4.gui.TestRig'\n\n## Book source code\nThe book has lots and lots of examples that should be useful too. You can download them here for free:\n\nhttp://pragprog.com/titles/tpantlr2/source_code\n\nAlso, there is a large collection of grammars for v4 at github:\n\nhttps://github.com/antlr/grammars-v4/\n\n\n# 百科\nhttps://baike.baidu.com/item/antlr/9368750\n\nantlr是指可以根据输入自动生成语法树并可视化的显示出来的开源语法分析器。\n\n提供了一个通过语法描述来自动构造自定义语言的识别器（recognizer），编译器（parser）和解释器（translator）的框架\n\n词法分析器又称为Scanner，Lexical analyser和Tokenizer。程序设计语言通常由关键字和严格定义的语法结构组成。编译的最终目的是将程序设计语言的高层指令翻译成物理机器或虚拟机可以执行的指令。词法分析器的工作是分析量化那些本来毫无意义的字符流，将他们翻译成离散的字符组（也就是一个一个的Token），包括关键字，标识符，符号（symbols）和操作符供语法分析器使用。\n\n\n编译器又称为Syntactical analyser。在分析字符流的时候，Lexer不关心所生成的单个Token的语法意义及其与上下文之间的关系，而这就是Parser的工作。语法分析器将收到的Tokens组织起来，并转换成为目标语言语法定义所允许的序列。\n无论是Lexer还是Parser都是一种识别器，Lexer是字符序列识别器而Parser是Token序列识别器。他们在本质上是类似的东西，而只是在分工上有所不同而已。如图1所示：\n\n\n\n\n![1](1.png)\n图1 字符输入流、tokens和AST之间的关系\n\n树分析器可以用于对语法分析生成的抽象语法树进行遍历，并能执行一些相关的操作。\n\nANTLR将上述结合起来，它允许我们定义识别字符流的词法规则和用于解释Token流的语法分析规则。然后，ANTLR将根据用户提供的语法文件自动生成相应的词法/语法分析器。用户可以利用他们将输入的文本进行编译，并转换成其他形式（如AST—Abstract Syntax Tree，抽象的语法树）。\n\n# ANTRL 语法\n## `grammar`\n声明语法头，类似于java类的定义\n\n    grammar  SPL;\n\n## `options`\n选项，如语言选项，输出选项，回溯选项，记忆选项等等\n\n    options { output=AST;  language=Java; }\n    options { tokenVocab=MySqlLexer; }\n","source":"_posts/Antlr4-基础.md","raw":"---\ntitle: Antlr4 基础\ndate: 2021-06-02 23:35:24\ntags:\n- Antlr4\n- Java\ncategories:\n- OTHER\n---\n\n## Install  ANTLR v4 on unix\n+ Install Java (version 1.7 or higher)\nDownload\n    $ cd /usr/local/lib\n    $ curl -O https://www.antlr.org/download/antlr-4.9-complete.jar\nOr just download in browser from website: https://www.antlr.org/download.html and put it somewhere rational like /usr/local/lib.\n\n+ Add antlr-4.9-complete.jar to your CLASSPATH:\n    $ export CLASSPATH=\".:/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH\"\nIt's also a good idea to put this in your .bash_profile or whatever your startup script is.\n\n+ Create aliases for the ANTLR Tool, and TestRig.\n    $ alias antlr4='java -Xmx500M -cp \"/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH\" org.antlr.v4.Tool'\n    $ alias grun='java -Xmx500M -cp \"/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH\" org.antlr.v4.gui.TestRig'\n\n## Book source code\nThe book has lots and lots of examples that should be useful too. You can download them here for free:\n\nhttp://pragprog.com/titles/tpantlr2/source_code\n\nAlso, there is a large collection of grammars for v4 at github:\n\nhttps://github.com/antlr/grammars-v4/\n\n\n# 百科\nhttps://baike.baidu.com/item/antlr/9368750\n\nantlr是指可以根据输入自动生成语法树并可视化的显示出来的开源语法分析器。\n\n提供了一个通过语法描述来自动构造自定义语言的识别器（recognizer），编译器（parser）和解释器（translator）的框架\n\n词法分析器又称为Scanner，Lexical analyser和Tokenizer。程序设计语言通常由关键字和严格定义的语法结构组成。编译的最终目的是将程序设计语言的高层指令翻译成物理机器或虚拟机可以执行的指令。词法分析器的工作是分析量化那些本来毫无意义的字符流，将他们翻译成离散的字符组（也就是一个一个的Token），包括关键字，标识符，符号（symbols）和操作符供语法分析器使用。\n\n\n编译器又称为Syntactical analyser。在分析字符流的时候，Lexer不关心所生成的单个Token的语法意义及其与上下文之间的关系，而这就是Parser的工作。语法分析器将收到的Tokens组织起来，并转换成为目标语言语法定义所允许的序列。\n无论是Lexer还是Parser都是一种识别器，Lexer是字符序列识别器而Parser是Token序列识别器。他们在本质上是类似的东西，而只是在分工上有所不同而已。如图1所示：\n\n\n\n\n![1](1.png)\n图1 字符输入流、tokens和AST之间的关系\n\n树分析器可以用于对语法分析生成的抽象语法树进行遍历，并能执行一些相关的操作。\n\nANTLR将上述结合起来，它允许我们定义识别字符流的词法规则和用于解释Token流的语法分析规则。然后，ANTLR将根据用户提供的语法文件自动生成相应的词法/语法分析器。用户可以利用他们将输入的文本进行编译，并转换成其他形式（如AST—Abstract Syntax Tree，抽象的语法树）。\n\n# ANTRL 语法\n## `grammar`\n声明语法头，类似于java类的定义\n\n    grammar  SPL;\n\n## `options`\n选项，如语言选项，输出选项，回溯选项，记忆选项等等\n\n    options { output=AST;  language=Java; }\n    options { tokenVocab=MySqlLexer; }\n","slug":"Antlr4-基础","published":1,"updated":"2021-06-03T14:59:28.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevwt00004ku217p06y5g","content":"<h2 id=\"Install-ANTLR-v4-on-unix\"><a href=\"#Install-ANTLR-v4-on-unix\" class=\"headerlink\" title=\"Install  ANTLR v4 on unix\"></a>Install  ANTLR v4 on unix</h2><ul>\n<li><p>Install Java (version 1.7 or higher)<br>Download<br>  $ cd /usr/local/lib<br>  $ curl -O <a href=\"https://www.antlr.org/download/antlr-4.9-complete.jar\">https://www.antlr.org/download/antlr-4.9-complete.jar</a><br>Or just download in browser from website: <a href=\"https://www.antlr.org/download.html\">https://www.antlr.org/download.html</a> and put it somewhere rational like /usr/local/lib.</p>\n</li>\n<li><p>Add antlr-4.9-complete.jar to your CLASSPATH:<br>  $ export CLASSPATH=”.:/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH”<br>It’s also a good idea to put this in your .bash_profile or whatever your startup script is.</p>\n</li>\n<li><p>Create aliases for the ANTLR Tool, and TestRig.<br>  $ alias antlr4=’java -Xmx500M -cp “/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH” org.antlr.v4.Tool’<br>  $ alias grun=’java -Xmx500M -cp “/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH” org.antlr.v4.gui.TestRig’</p>\n</li>\n</ul>\n<h2 id=\"Book-source-code\"><a href=\"#Book-source-code\" class=\"headerlink\" title=\"Book source code\"></a>Book source code</h2><p>The book has lots and lots of examples that should be useful too. You can download them here for free:</p>\n<p><a href=\"http://pragprog.com/titles/tpantlr2/source_code\">http://pragprog.com/titles/tpantlr2/source_code</a></p>\n<p>Also, there is a large collection of grammars for v4 at github:</p>\n<p><a href=\"https://github.com/antlr/grammars-v4/\">https://github.com/antlr/grammars-v4/</a></p>\n<h1 id=\"百科\"><a href=\"#百科\" class=\"headerlink\" title=\"百科\"></a>百科</h1><p><a href=\"https://baike.baidu.com/item/antlr/9368750\">https://baike.baidu.com/item/antlr/9368750</a></p>\n<p>antlr是指可以根据输入自动生成语法树并可视化的显示出来的开源语法分析器。</p>\n<p>提供了一个通过语法描述来自动构造自定义语言的识别器（recognizer），编译器（parser）和解释器（translator）的框架</p>\n<p>词法分析器又称为Scanner，Lexical analyser和Tokenizer。程序设计语言通常由关键字和严格定义的语法结构组成。编译的最终目的是将程序设计语言的高层指令翻译成物理机器或虚拟机可以执行的指令。词法分析器的工作是分析量化那些本来毫无意义的字符流，将他们翻译成离散的字符组（也就是一个一个的Token），包括关键字，标识符，符号（symbols）和操作符供语法分析器使用。</p>\n<p>编译器又称为Syntactical analyser。在分析字符流的时候，Lexer不关心所生成的单个Token的语法意义及其与上下文之间的关系，而这就是Parser的工作。语法分析器将收到的Tokens组织起来，并转换成为目标语言语法定义所允许的序列。<br>无论是Lexer还是Parser都是一种识别器，Lexer是字符序列识别器而Parser是Token序列识别器。他们在本质上是类似的东西，而只是在分工上有所不同而已。如图1所示：</p>\n<p><img src=\"/2021/06/02/Antlr4-%E5%9F%BA%E7%A1%80/1.png\" alt=\"1\"><br>图1 字符输入流、tokens和AST之间的关系</p>\n<p>树分析器可以用于对语法分析生成的抽象语法树进行遍历，并能执行一些相关的操作。</p>\n<p>ANTLR将上述结合起来，它允许我们定义识别字符流的词法规则和用于解释Token流的语法分析规则。然后，ANTLR将根据用户提供的语法文件自动生成相应的词法/语法分析器。用户可以利用他们将输入的文本进行编译，并转换成其他形式（如AST—Abstract Syntax Tree，抽象的语法树）。</p>\n<h1 id=\"ANTRL-语法\"><a href=\"#ANTRL-语法\" class=\"headerlink\" title=\"ANTRL 语法\"></a>ANTRL 语法</h1><h2 id=\"grammar\"><a href=\"#grammar\" class=\"headerlink\" title=\"grammar\"></a><code>grammar</code></h2><p>声明语法头，类似于java类的定义</p>\n<pre><code>grammar  SPL;\n</code></pre>\n<h2 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options\"></a><code>options</code></h2><p>选项，如语言选项，输出选项，回溯选项，记忆选项等等</p>\n<pre><code>options &#123; output=AST;  language=Java; &#125;\noptions &#123; tokenVocab=MySqlLexer; &#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Install-ANTLR-v4-on-unix\"><a href=\"#Install-ANTLR-v4-on-unix\" class=\"headerlink\" title=\"Install  ANTLR v4 on unix\"></a>Install  ANTLR v4 on unix</h2><ul>\n<li><p>Install Java (version 1.7 or higher)<br>Download<br>  $ cd /usr/local/lib<br>  $ curl -O <a href=\"https://www.antlr.org/download/antlr-4.9-complete.jar\">https://www.antlr.org/download/antlr-4.9-complete.jar</a><br>Or just download in browser from website: <a href=\"https://www.antlr.org/download.html\">https://www.antlr.org/download.html</a> and put it somewhere rational like /usr/local/lib.</p>\n</li>\n<li><p>Add antlr-4.9-complete.jar to your CLASSPATH:<br>  $ export CLASSPATH=”.:/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH”<br>It’s also a good idea to put this in your .bash_profile or whatever your startup script is.</p>\n</li>\n<li><p>Create aliases for the ANTLR Tool, and TestRig.<br>  $ alias antlr4=’java -Xmx500M -cp “/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH” org.antlr.v4.Tool’<br>  $ alias grun=’java -Xmx500M -cp “/usr/local/lib/antlr-4.9-complete.jar:$CLASSPATH” org.antlr.v4.gui.TestRig’</p>\n</li>\n</ul>\n<h2 id=\"Book-source-code\"><a href=\"#Book-source-code\" class=\"headerlink\" title=\"Book source code\"></a>Book source code</h2><p>The book has lots and lots of examples that should be useful too. You can download them here for free:</p>\n<p><a href=\"http://pragprog.com/titles/tpantlr2/source_code\">http://pragprog.com/titles/tpantlr2/source_code</a></p>\n<p>Also, there is a large collection of grammars for v4 at github:</p>\n<p><a href=\"https://github.com/antlr/grammars-v4/\">https://github.com/antlr/grammars-v4/</a></p>\n<h1 id=\"百科\"><a href=\"#百科\" class=\"headerlink\" title=\"百科\"></a>百科</h1><p><a href=\"https://baike.baidu.com/item/antlr/9368750\">https://baike.baidu.com/item/antlr/9368750</a></p>\n<p>antlr是指可以根据输入自动生成语法树并可视化的显示出来的开源语法分析器。</p>\n<p>提供了一个通过语法描述来自动构造自定义语言的识别器（recognizer），编译器（parser）和解释器（translator）的框架</p>\n<p>词法分析器又称为Scanner，Lexical analyser和Tokenizer。程序设计语言通常由关键字和严格定义的语法结构组成。编译的最终目的是将程序设计语言的高层指令翻译成物理机器或虚拟机可以执行的指令。词法分析器的工作是分析量化那些本来毫无意义的字符流，将他们翻译成离散的字符组（也就是一个一个的Token），包括关键字，标识符，符号（symbols）和操作符供语法分析器使用。</p>\n<p>编译器又称为Syntactical analyser。在分析字符流的时候，Lexer不关心所生成的单个Token的语法意义及其与上下文之间的关系，而这就是Parser的工作。语法分析器将收到的Tokens组织起来，并转换成为目标语言语法定义所允许的序列。<br>无论是Lexer还是Parser都是一种识别器，Lexer是字符序列识别器而Parser是Token序列识别器。他们在本质上是类似的东西，而只是在分工上有所不同而已。如图1所示：</p>\n<p><img src=\"/2021/06/02/Antlr4-%E5%9F%BA%E7%A1%80/1.png\" alt=\"1\"><br>图1 字符输入流、tokens和AST之间的关系</p>\n<p>树分析器可以用于对语法分析生成的抽象语法树进行遍历，并能执行一些相关的操作。</p>\n<p>ANTLR将上述结合起来，它允许我们定义识别字符流的词法规则和用于解释Token流的语法分析规则。然后，ANTLR将根据用户提供的语法文件自动生成相应的词法/语法分析器。用户可以利用他们将输入的文本进行编译，并转换成其他形式（如AST—Abstract Syntax Tree，抽象的语法树）。</p>\n<h1 id=\"ANTRL-语法\"><a href=\"#ANTRL-语法\" class=\"headerlink\" title=\"ANTRL 语法\"></a>ANTRL 语法</h1><h2 id=\"grammar\"><a href=\"#grammar\" class=\"headerlink\" title=\"grammar\"></a><code>grammar</code></h2><p>声明语法头，类似于java类的定义</p>\n<pre><code>grammar  SPL;\n</code></pre>\n<h2 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options\"></a><code>options</code></h2><p>选项，如语言选项，输出选项，回溯选项，记忆选项等等</p>\n<pre><code>options &#123; output=AST;  language=Java; &#125;\noptions &#123; tokenVocab=MySqlLexer; &#125;\n</code></pre>\n"},{"title":"C# 模式匹配","date":"2021-05-25T15:29:03.000Z","_content":"[TOCM]\n\n[TOC]\n<https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/patterns>\n\nC# 在 C# 7.0 中引入了模式匹配。 自此之后，每个主要 C# 版本都扩展了模式匹配功能。 以下 C# 表达式和语句支持模式匹配：\n\n- `is`表达式\n- `switch` 语句\n- `switch` 表达式（在 C# 8.0 中引入）\n\n在这些构造中，可将输入表达式与以下任一模式进行匹配：\n\n- [声明模式](#声明和类型模式)：用于检查表达式的运行时类型，如果匹配成功，则将表达式结果分配给声明的变量。 在 C# 7.0 中引入。\n- [类型模式](#类型模式)：用于检查表达式的运行时类型。 在 C# 9.0 中引入。\n- [常量模式](#常量模式)：用于测试表达式结果是否等于指定常量。 在 C# 7.0 中引入。\n- [关系模式](#关系模式)：用于将表达式结果与指定常量进行比较。 在 C# 9.0 中引入。\n- [逻辑模式](#逻辑模式)：用于测试表达式是否与模式的逻辑组合匹配。 在 C# 9.0 中引入。\n- [属性模式](#属性模式)：用于测试表达式的属性或字段是否与嵌套模式匹配。 在 C# 8.0 中引入。\n- [位置模式](#位置模式)：用于解构表达式结果并测试结果值是否与嵌套模式匹配。 在 C# 8.0 中引入。\n- [var 模式](#var模式)：用于匹配任何表达式并将其结果分配给声明的变量。 在 C# 7.0 中引入。\n- [弃元模式](#弃元模式)：用于匹配任何表达式。 在 C# 8.0 中引入。\n\n_逻辑、属性和位置模式都是递归模式。 也就是说，它们可包含嵌套模式。_\n\n有关如何使用这些模式来生成数据驱动算法的示例，请参阅教程：使用模式匹配来生成类型驱动的算法和数据驱动的算法。\n\n## 声明和类型模式\n\n1. IS\n\n```csharp\nint? xNullable = 7;\nint y = 23;\nobject yBoxed = y;\nif (xNullable is int a && yBoxed is int b)\n{\n    Console.WriteLine(a + b);  // output: 30\n}\n```\n\n1. SWITCH\n\n```csharp\npublic static decimal CalculateToll(this Vehicle vehicle) => vehicle switch\n{\n    Car => 2.00m,\n    Truck => 7.50m,\n    null => throw new ArgumentNullException(nameof(vehicle)),\n    _ => throw new ArgumentException(\"Unknown type of a vehicle\", nameof(vehicle)),\n};\n```\n\n## 常量模式\n\n在常量模式中，可使用任何常量表达式，例如：\n\n- integer 或 floating-point 数值文本\n- char 或 string 文本\n- 布尔值 true 或 false\n- enum 值\n- 声明常量字段或本地的名称\n- null\n\n```csharp\npublic static decimal GetGroupTicketPrice(int visitorCount) => visitorCount switch\n{\n    1 => 12.0m,\n    2 => 20.0m,\n    3 => 27.0m,\n    4 => 32.0m,\n    0 => 0.0m,\n    _ => throw new ArgumentException($\"Not supported number of visitors: {visitorCount}\", nameof(visitorCount)),\n};\n\ninput is not null\n```\n\n## 关系模式\n\n在关系模式中，可使用关系运算符 <、>、<= 或 >= 中的任何一个。 关系模式的右侧部分必须是常数表达式。 常数表达式可以是 integer、floating-point、char 或 enum 类型。\n\n要检查表达式结果是否在某个范围内，请将其与合取 and 模式匹配，\n\n```csharp\nConsole.WriteLine(GetCalendarSeason(new DateTime(2021, 3, 14)));  // output: spring\nConsole.WriteLine(GetCalendarSeason(new DateTime(2021, 7, 19)));  // output: summer\nConsole.WriteLine(GetCalendarSeason(new DateTime(2021, 2, 17)));  // output: winter\n\nstatic string GetCalendarSeason(DateTime date) => date.Month switch\n{\n    >= 3 and < 6 => \"spring\",\n    >= 6 and < 9 => \"summer\",\n    >= 9 and < 12 => \"autumn\",\n    12 or (>= 1 and < 3) => \"winter\",\n    _ => throw new ArgumentOutOfRangeException(nameof(date), $\"Date with unexpected month: {date.Month}.\"),\n};\n```\n\n## 逻辑模式\n\n从 C# 9.0 开始，可使用 `not`、`and` 和 `or` 模式连结符来创建以下逻辑模式：\n\nand 模式连结符的优先级高于 or。 要显式指定优先级，请使用括号，如以下示例所示：\n\n```csharp\nstatic bool IsLetter(char c) => c is (>= 'a' and <= 'z') or (>= 'A' and <= 'Z');\n```\n\n## 属性模式\n\n```csharp\nstatic bool IsConferenceDay(DateTime date) => date is { Year: 2020, Month: 5, Day: 19 or 20 or 21 };\n\nConsole.WriteLine(TakeFive(\"Hello, world!\"));  // output: Hello\nConsole.WriteLine(TakeFive(\"Hi!\"));  // output: Hi!\nConsole.WriteLine(TakeFive(new[] { '1', '2', '3', '4', '5', '6', '7' }));  // output: 12345\nConsole.WriteLine(TakeFive(new[] { 'a', 'b', 'c' }));  // output: abc\n\nstatic string TakeFive(object input) => input switch\n{\n    string { Length: >= 5 } s => s.Substring(0, 5),\n    string s => s,\n\n    ICollection<char> { Count: >= 5 } symbols => new string(symbols.Take(5).ToArray()),\n    ICollection<char> symbols => new string(symbols.ToArray()),\n\n    null => throw new ArgumentNullException(nameof(input)),\n    _ => throw new ArgumentException(\"Not supported input type.\"),\n};\n```\n\n属性模式是一种递归模式。 也就是说，可以将任何模式用作`嵌套`模式。 使用属性模式将部分数据与嵌套模式进行匹配，如以下示例所示：\n\n```csharp\npublic record Point(int X, int Y);\npublic record Segment(Point Start, Point End);\n\nstatic bool IsAnyEndAtOrigin(Segment segment) =>\n    segment is { Start: { X: 0, Y: 0 } } or { End: { X: 0, Y: 0 } };\n```\n\n## 位置模式\n\n位置模式来解构表达式结果并将结果值与相应的嵌套模式匹配\n\n```csharp\n\nvar numbers = new List<int> { 1, 2, 3 };\nif (SumAndCount(numbers) is (Sum: var sum, Count: > 0))\n{\n    Console.WriteLine($\"Sum of [{string.Join(\" \", numbers)}] is {sum}\");  // output: Sum of [1 2 3] is 6\n}\n\nstatic (double Sum, int Count) SumAndCount(IEnumerable<int> numbers)\n{\n    int sum = 0;\n    int count = 0;\n    foreach (int number in numbers)\n    {\n        sum += number;\n        count++;\n    }\n    return (sum, count);\n}\n\n```\n\n## var 模式\n\n```csharp\nstatic bool IsAcceptable(int id, int absLimit) =>\n    SimulateDataFetch(id) is var results\n    && results.Min() >= -absLimit\n    && results.Max() <= absLimit;\n\nstatic int[] SimulateDataFetch(int id)\n{\n    var rand = new Random();\n    return Enumerable\n               .Range(start: 0, count: 5)\n               .Select(s => rand.Next(minValue: -10, maxValue: 11))\n               .ToArray();\n}\n```\n\n## 弃元模式\n\n从 C# 8.0 开始，可使用弃元模式 `_` 来匹配任何表达式，包括 null，如以下示例所示\n\n```csharp\nConsole.WriteLine(GetDiscountInPercent(DayOfWeek.Friday));  // output: 5.0\nConsole.WriteLine(GetDiscountInPercent(null));  // output: 0.0\nConsole.WriteLine(GetDiscountInPercent((DayOfWeek)10));  // output: 0.0\n\nstatic decimal GetDiscountInPercent(DayOfWeek? dayOfWeek) => dayOfWeek switch\n{\n    DayOfWeek.Monday => 0.5m,\n    DayOfWeek.Tuesday => 12.5m,\n    DayOfWeek.Wednesday => 7.5m,\n    DayOfWeek.Thursday => 12.5m,\n    DayOfWeek.Friday => 5.0m,\n    DayOfWeek.Saturday => 2.5m,\n    DayOfWeek.Sunday => 2.0m,\n    _ => 0.0m,\n};\n```\n\n## 带括号模式\n\n从 C# 9.0 开始，可在任何模式两边加上括号。 通常，这样做是为了强调或更改逻辑模式中的优先级，如以下示例所示：\n\n```csharp\nif (input is not (float or double))\n{\n    return;\n}\n```\n","source":"_posts/C-模式匹配.md","raw":"---\ntitle: C# 模式匹配\ndate: 2021-05-25 23:29:03\ntags: \n- C#\n- 模式匹配\ncategories: \n- C#\n---\n[TOCM]\n\n[TOC]\n<https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/patterns>\n\nC# 在 C# 7.0 中引入了模式匹配。 自此之后，每个主要 C# 版本都扩展了模式匹配功能。 以下 C# 表达式和语句支持模式匹配：\n\n- `is`表达式\n- `switch` 语句\n- `switch` 表达式（在 C# 8.0 中引入）\n\n在这些构造中，可将输入表达式与以下任一模式进行匹配：\n\n- [声明模式](#声明和类型模式)：用于检查表达式的运行时类型，如果匹配成功，则将表达式结果分配给声明的变量。 在 C# 7.0 中引入。\n- [类型模式](#类型模式)：用于检查表达式的运行时类型。 在 C# 9.0 中引入。\n- [常量模式](#常量模式)：用于测试表达式结果是否等于指定常量。 在 C# 7.0 中引入。\n- [关系模式](#关系模式)：用于将表达式结果与指定常量进行比较。 在 C# 9.0 中引入。\n- [逻辑模式](#逻辑模式)：用于测试表达式是否与模式的逻辑组合匹配。 在 C# 9.0 中引入。\n- [属性模式](#属性模式)：用于测试表达式的属性或字段是否与嵌套模式匹配。 在 C# 8.0 中引入。\n- [位置模式](#位置模式)：用于解构表达式结果并测试结果值是否与嵌套模式匹配。 在 C# 8.0 中引入。\n- [var 模式](#var模式)：用于匹配任何表达式并将其结果分配给声明的变量。 在 C# 7.0 中引入。\n- [弃元模式](#弃元模式)：用于匹配任何表达式。 在 C# 8.0 中引入。\n\n_逻辑、属性和位置模式都是递归模式。 也就是说，它们可包含嵌套模式。_\n\n有关如何使用这些模式来生成数据驱动算法的示例，请参阅教程：使用模式匹配来生成类型驱动的算法和数据驱动的算法。\n\n## 声明和类型模式\n\n1. IS\n\n```csharp\nint? xNullable = 7;\nint y = 23;\nobject yBoxed = y;\nif (xNullable is int a && yBoxed is int b)\n{\n    Console.WriteLine(a + b);  // output: 30\n}\n```\n\n1. SWITCH\n\n```csharp\npublic static decimal CalculateToll(this Vehicle vehicle) => vehicle switch\n{\n    Car => 2.00m,\n    Truck => 7.50m,\n    null => throw new ArgumentNullException(nameof(vehicle)),\n    _ => throw new ArgumentException(\"Unknown type of a vehicle\", nameof(vehicle)),\n};\n```\n\n## 常量模式\n\n在常量模式中，可使用任何常量表达式，例如：\n\n- integer 或 floating-point 数值文本\n- char 或 string 文本\n- 布尔值 true 或 false\n- enum 值\n- 声明常量字段或本地的名称\n- null\n\n```csharp\npublic static decimal GetGroupTicketPrice(int visitorCount) => visitorCount switch\n{\n    1 => 12.0m,\n    2 => 20.0m,\n    3 => 27.0m,\n    4 => 32.0m,\n    0 => 0.0m,\n    _ => throw new ArgumentException($\"Not supported number of visitors: {visitorCount}\", nameof(visitorCount)),\n};\n\ninput is not null\n```\n\n## 关系模式\n\n在关系模式中，可使用关系运算符 <、>、<= 或 >= 中的任何一个。 关系模式的右侧部分必须是常数表达式。 常数表达式可以是 integer、floating-point、char 或 enum 类型。\n\n要检查表达式结果是否在某个范围内，请将其与合取 and 模式匹配，\n\n```csharp\nConsole.WriteLine(GetCalendarSeason(new DateTime(2021, 3, 14)));  // output: spring\nConsole.WriteLine(GetCalendarSeason(new DateTime(2021, 7, 19)));  // output: summer\nConsole.WriteLine(GetCalendarSeason(new DateTime(2021, 2, 17)));  // output: winter\n\nstatic string GetCalendarSeason(DateTime date) => date.Month switch\n{\n    >= 3 and < 6 => \"spring\",\n    >= 6 and < 9 => \"summer\",\n    >= 9 and < 12 => \"autumn\",\n    12 or (>= 1 and < 3) => \"winter\",\n    _ => throw new ArgumentOutOfRangeException(nameof(date), $\"Date with unexpected month: {date.Month}.\"),\n};\n```\n\n## 逻辑模式\n\n从 C# 9.0 开始，可使用 `not`、`and` 和 `or` 模式连结符来创建以下逻辑模式：\n\nand 模式连结符的优先级高于 or。 要显式指定优先级，请使用括号，如以下示例所示：\n\n```csharp\nstatic bool IsLetter(char c) => c is (>= 'a' and <= 'z') or (>= 'A' and <= 'Z');\n```\n\n## 属性模式\n\n```csharp\nstatic bool IsConferenceDay(DateTime date) => date is { Year: 2020, Month: 5, Day: 19 or 20 or 21 };\n\nConsole.WriteLine(TakeFive(\"Hello, world!\"));  // output: Hello\nConsole.WriteLine(TakeFive(\"Hi!\"));  // output: Hi!\nConsole.WriteLine(TakeFive(new[] { '1', '2', '3', '4', '5', '6', '7' }));  // output: 12345\nConsole.WriteLine(TakeFive(new[] { 'a', 'b', 'c' }));  // output: abc\n\nstatic string TakeFive(object input) => input switch\n{\n    string { Length: >= 5 } s => s.Substring(0, 5),\n    string s => s,\n\n    ICollection<char> { Count: >= 5 } symbols => new string(symbols.Take(5).ToArray()),\n    ICollection<char> symbols => new string(symbols.ToArray()),\n\n    null => throw new ArgumentNullException(nameof(input)),\n    _ => throw new ArgumentException(\"Not supported input type.\"),\n};\n```\n\n属性模式是一种递归模式。 也就是说，可以将任何模式用作`嵌套`模式。 使用属性模式将部分数据与嵌套模式进行匹配，如以下示例所示：\n\n```csharp\npublic record Point(int X, int Y);\npublic record Segment(Point Start, Point End);\n\nstatic bool IsAnyEndAtOrigin(Segment segment) =>\n    segment is { Start: { X: 0, Y: 0 } } or { End: { X: 0, Y: 0 } };\n```\n\n## 位置模式\n\n位置模式来解构表达式结果并将结果值与相应的嵌套模式匹配\n\n```csharp\n\nvar numbers = new List<int> { 1, 2, 3 };\nif (SumAndCount(numbers) is (Sum: var sum, Count: > 0))\n{\n    Console.WriteLine($\"Sum of [{string.Join(\" \", numbers)}] is {sum}\");  // output: Sum of [1 2 3] is 6\n}\n\nstatic (double Sum, int Count) SumAndCount(IEnumerable<int> numbers)\n{\n    int sum = 0;\n    int count = 0;\n    foreach (int number in numbers)\n    {\n        sum += number;\n        count++;\n    }\n    return (sum, count);\n}\n\n```\n\n## var 模式\n\n```csharp\nstatic bool IsAcceptable(int id, int absLimit) =>\n    SimulateDataFetch(id) is var results\n    && results.Min() >= -absLimit\n    && results.Max() <= absLimit;\n\nstatic int[] SimulateDataFetch(int id)\n{\n    var rand = new Random();\n    return Enumerable\n               .Range(start: 0, count: 5)\n               .Select(s => rand.Next(minValue: -10, maxValue: 11))\n               .ToArray();\n}\n```\n\n## 弃元模式\n\n从 C# 8.0 开始，可使用弃元模式 `_` 来匹配任何表达式，包括 null，如以下示例所示\n\n```csharp\nConsole.WriteLine(GetDiscountInPercent(DayOfWeek.Friday));  // output: 5.0\nConsole.WriteLine(GetDiscountInPercent(null));  // output: 0.0\nConsole.WriteLine(GetDiscountInPercent((DayOfWeek)10));  // output: 0.0\n\nstatic decimal GetDiscountInPercent(DayOfWeek? dayOfWeek) => dayOfWeek switch\n{\n    DayOfWeek.Monday => 0.5m,\n    DayOfWeek.Tuesday => 12.5m,\n    DayOfWeek.Wednesday => 7.5m,\n    DayOfWeek.Thursday => 12.5m,\n    DayOfWeek.Friday => 5.0m,\n    DayOfWeek.Saturday => 2.5m,\n    DayOfWeek.Sunday => 2.0m,\n    _ => 0.0m,\n};\n```\n\n## 带括号模式\n\n从 C# 9.0 开始，可在任何模式两边加上括号。 通常，这样做是为了强调或更改逻辑模式中的优先级，如以下示例所示：\n\n```csharp\nif (input is not (float or double))\n{\n    return;\n}\n```\n","slug":"C-模式匹配","published":1,"updated":"2021-12-01T14:12:52.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevwx00014ku2bxpv6wdl","content":"<p>[TOCM]</p>\n<p>[TOC]<br><a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/patterns\">https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/patterns</a></p>\n<p>C# 在 C# 7.0 中引入了模式匹配。 自此之后，每个主要 C# 版本都扩展了模式匹配功能。 以下 C# 表达式和语句支持模式匹配：</p>\n<ul>\n<li><code>is</code>表达式</li>\n<li><code>switch</code> 语句</li>\n<li><code>switch</code> 表达式（在 C# 8.0 中引入）</li>\n</ul>\n<p>在这些构造中，可将输入表达式与以下任一模式进行匹配：</p>\n<ul>\n<li><a href=\"#%E5%A3%B0%E6%98%8E%E5%92%8C%E7%B1%BB%E5%9E%8B%E6%A8%A1%E5%BC%8F\">声明模式</a>：用于检查表达式的运行时类型，如果匹配成功，则将表达式结果分配给声明的变量。 在 C# 7.0 中引入。</li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E6%A8%A1%E5%BC%8F\">类型模式</a>：用于检查表达式的运行时类型。 在 C# 9.0 中引入。</li>\n<li><a href=\"#%E5%B8%B8%E9%87%8F%E6%A8%A1%E5%BC%8F\">常量模式</a>：用于测试表达式结果是否等于指定常量。 在 C# 7.0 中引入。</li>\n<li><a href=\"#%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F\">关系模式</a>：用于将表达式结果与指定常量进行比较。 在 C# 9.0 中引入。</li>\n<li><a href=\"#%E9%80%BB%E8%BE%91%E6%A8%A1%E5%BC%8F\">逻辑模式</a>：用于测试表达式是否与模式的逻辑组合匹配。 在 C# 9.0 中引入。</li>\n<li><a href=\"#%E5%B1%9E%E6%80%A7%E6%A8%A1%E5%BC%8F\">属性模式</a>：用于测试表达式的属性或字段是否与嵌套模式匹配。 在 C# 8.0 中引入。</li>\n<li><a href=\"#%E4%BD%8D%E7%BD%AE%E6%A8%A1%E5%BC%8F\">位置模式</a>：用于解构表达式结果并测试结果值是否与嵌套模式匹配。 在 C# 8.0 中引入。</li>\n<li><a href=\"#var%E6%A8%A1%E5%BC%8F\">var 模式</a>：用于匹配任何表达式并将其结果分配给声明的变量。 在 C# 7.0 中引入。</li>\n<li><a href=\"#%E5%BC%83%E5%85%83%E6%A8%A1%E5%BC%8F\">弃元模式</a>：用于匹配任何表达式。 在 C# 8.0 中引入。</li>\n</ul>\n<p><em>逻辑、属性和位置模式都是递归模式。 也就是说，它们可包含嵌套模式。</em></p>\n<p>有关如何使用这些模式来生成数据驱动算法的示例，请参阅教程：使用模式匹配来生成类型驱动的算法和数据驱动的算法。</p>\n<h2 id=\"声明和类型模式\"><a href=\"#声明和类型模式\" class=\"headerlink\" title=\"声明和类型模式\"></a>声明和类型模式</h2><ol>\n<li>IS</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>? xNullable = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> y = <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"built_in\">object</span> yBoxed = y;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (xNullable <span class=\"keyword\">is</span> <span class=\"built_in\">int</span> a &amp;&amp; yBoxed <span class=\"keyword\">is</span> <span class=\"built_in\">int</span> b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(a + b);  <span class=\"comment\">// output: 30</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>SWITCH</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">decimal</span> <span class=\"title\">CalculateToll</span>(<span class=\"params\"><span class=\"keyword\">this</span> Vehicle vehicle</span>)</span> =&gt; vehicle <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Car =&gt; <span class=\"number\">2.00</span>m,</span><br><span class=\"line\">    Truck =&gt; <span class=\"number\">7.50</span>m,</span><br><span class=\"line\">    <span class=\"literal\">null</span> =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(vehicle)),</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">&quot;Unknown type of a vehicle&quot;</span>, <span class=\"keyword\">nameof</span>(vehicle)),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常量模式\"><a href=\"#常量模式\" class=\"headerlink\" title=\"常量模式\"></a>常量模式</h2><p>在常量模式中，可使用任何常量表达式，例如：</p>\n<ul>\n<li>integer 或 floating-point 数值文本</li>\n<li>char 或 string 文本</li>\n<li>布尔值 true 或 false</li>\n<li>enum 值</li>\n<li>声明常量字段或本地的名称</li>\n<li>null</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">decimal</span> <span class=\"title\">GetGroupTicketPrice</span>(<span class=\"params\"><span class=\"built_in\">int</span> visitorCount</span>)</span> =&gt; visitorCount <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"number\">1</span> =&gt; <span class=\"number\">12.0</span>m,</span><br><span class=\"line\">    <span class=\"number\">2</span> =&gt; <span class=\"number\">20.0</span>m,</span><br><span class=\"line\">    <span class=\"number\">3</span> =&gt; <span class=\"number\">27.0</span>m,</span><br><span class=\"line\">    <span class=\"number\">4</span> =&gt; <span class=\"number\">32.0</span>m,</span><br><span class=\"line\">    <span class=\"number\">0</span> =&gt; <span class=\"number\">0.0</span>m,</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">$&quot;Not supported number of visitors: <span class=\"subst\">&#123;visitorCount&#125;</span>&quot;</span>, <span class=\"keyword\">nameof</span>(visitorCount)),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">input <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关系模式\"><a href=\"#关系模式\" class=\"headerlink\" title=\"关系模式\"></a>关系模式</h2><p>在关系模式中，可使用关系运算符 &lt;、&gt;、&lt;= 或 &gt;= 中的任何一个。 关系模式的右侧部分必须是常数表达式。 常数表达式可以是 integer、floating-point、char 或 enum 类型。</p>\n<p>要检查表达式结果是否在某个范围内，请将其与合取 and 模式匹配，</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Console.WriteLine(GetCalendarSeason(<span class=\"keyword\">new</span> DateTime(<span class=\"number\">2021</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>)));  <span class=\"comment\">// output: spring</span></span><br><span class=\"line\">Console.WriteLine(GetCalendarSeason(<span class=\"keyword\">new</span> DateTime(<span class=\"number\">2021</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>)));  <span class=\"comment\">// output: summer</span></span><br><span class=\"line\">Console.WriteLine(GetCalendarSeason(<span class=\"keyword\">new</span> DateTime(<span class=\"number\">2021</span>, <span class=\"number\">2</span>, <span class=\"number\">17</span>)));  <span class=\"comment\">// output: winter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetCalendarSeason</span>(<span class=\"params\">DateTime date</span>)</span> =&gt; date.Month <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &gt;= <span class=\"number\">3</span> <span class=\"keyword\">and</span> &lt; <span class=\"number\">6</span> =&gt; <span class=\"string\">&quot;spring&quot;</span>,</span><br><span class=\"line\">    &gt;= <span class=\"number\">6</span> <span class=\"keyword\">and</span> &lt; <span class=\"number\">9</span> =&gt; <span class=\"string\">&quot;summer&quot;</span>,</span><br><span class=\"line\">    &gt;= <span class=\"number\">9</span> <span class=\"keyword\">and</span> &lt; <span class=\"number\">12</span> =&gt; <span class=\"string\">&quot;autumn&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">12</span> <span class=\"keyword\">or</span> (&gt;= <span class=\"number\">1</span> <span class=\"keyword\">and</span> &lt; <span class=\"number\">3</span>) =&gt; <span class=\"string\">&quot;winter&quot;</span>,</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(date), <span class=\"string\">$&quot;Date with unexpected month: <span class=\"subst\">&#123;date.Month&#125;</span>.&quot;</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"逻辑模式\"><a href=\"#逻辑模式\" class=\"headerlink\" title=\"逻辑模式\"></a>逻辑模式</h2><p>从 C# 9.0 开始，可使用 <code>not</code>、<code>and</code> 和 <code>or</code> 模式连结符来创建以下逻辑模式：</p>\n<p>and 模式连结符的优先级高于 or。 要显式指定优先级，请使用括号，如以下示例所示：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsLetter</span>(<span class=\"params\"><span class=\"built_in\">char</span> c</span>)</span> =&gt; <span class=\"function\">c <span class=\"title\">is</span> (<span class=\"params\">&gt;= <span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">and</span> &lt;= <span class=\"string\">&#x27;z&#x27;</span></span>) <span class=\"title\">or</span> (<span class=\"params\">&gt;= <span class=\"string\">&#x27;A&#x27;</span> <span class=\"keyword\">and</span> &lt;= <span class=\"string\">&#x27;Z&#x27;</span></span>)</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性模式\"><a href=\"#属性模式\" class=\"headerlink\" title=\"属性模式\"></a>属性模式</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsConferenceDay</span>(<span class=\"params\">DateTime date</span>)</span> =&gt; date <span class=\"keyword\">is</span> &#123; Year: <span class=\"number\">2020</span>, Month: <span class=\"number\">5</span>, Day: <span class=\"number\">19</span> <span class=\"keyword\">or</span> <span class=\"number\">20</span> <span class=\"keyword\">or</span> <span class=\"number\">21</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(TakeFive(<span class=\"string\">&quot;Hello, world!&quot;</span>));  <span class=\"comment\">// output: Hello</span></span><br><span class=\"line\">Console.WriteLine(TakeFive(<span class=\"string\">&quot;Hi!&quot;</span>));  <span class=\"comment\">// output: Hi!</span></span><br><span class=\"line\">Console.WriteLine(TakeFive(<span class=\"keyword\">new</span>[] &#123; <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;7&#x27;</span> &#125;));  <span class=\"comment\">// output: 12345</span></span><br><span class=\"line\">Console.WriteLine(TakeFive(<span class=\"keyword\">new</span>[] &#123; <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span> &#125;));  <span class=\"comment\">// output: abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">TakeFive</span>(<span class=\"params\"><span class=\"built_in\">object</span> input</span>)</span> =&gt; input <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> &#123; Length: &gt;= <span class=\"number\">5</span> &#125; s =&gt; s.Substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s =&gt; s,</span><br><span class=\"line\"></span><br><span class=\"line\">    ICollection&lt;<span class=\"built_in\">char</span>&gt; &#123; Count: &gt;= <span class=\"number\">5</span> &#125; symbols =&gt; <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(symbols.Take(<span class=\"number\">5</span>).ToArray()),</span><br><span class=\"line\">    ICollection&lt;<span class=\"built_in\">char</span>&gt; symbols =&gt; <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(symbols.ToArray()),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"literal\">null</span> =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(input)),</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">&quot;Not supported input type.&quot;</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>属性模式是一种递归模式。 也就是说，可以将任何模式用作<code>嵌套</code>模式。 使用属性模式将部分数据与嵌套模式进行匹配，如以下示例所示：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title\">Point</span>(<span class=\"params\"><span class=\"built_in\">int</span> X, <span class=\"built_in\">int</span> Y</span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title\">Segment</span>(<span class=\"params\">Point Start, Point End</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsAnyEndAtOrigin</span>(<span class=\"params\">Segment segment</span>)</span> =&gt;</span><br><span class=\"line\">    segment <span class=\"keyword\">is</span> &#123; Start: &#123; X: <span class=\"number\">0</span>, Y: <span class=\"number\">0</span> &#125; &#125; <span class=\"keyword\">or</span> &#123; End: &#123; X: <span class=\"number\">0</span>, Y: <span class=\"number\">0</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"位置模式\"><a href=\"#位置模式\" class=\"headerlink\" title=\"位置模式\"></a>位置模式</h2><p>位置模式来解构表达式结果并将结果值与相应的嵌套模式匹配</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt; &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (SumAndCount(numbers) <span class=\"keyword\">is</span> (Sum: <span class=\"keyword\">var</span> sum, Count: &gt; <span class=\"number\">0</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Sum of [<span class=\"subst\">&#123;<span class=\"built_in\">string</span>.Join(<span class=\"string\">&quot; &quot;</span>, numbers)&#125;</span>] is <span class=\"subst\">&#123;sum&#125;</span>&quot;</span>);  <span class=\"comment\">// output: Sum of [1 2 3] is 6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> (<span class=\"built_in\">double</span> Sum, <span class=\"built_in\">int</span> Count) SumAndCount(IEnumerable&lt;<span class=\"built_in\">int</span>&gt; numbers)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"built_in\">int</span> number <span class=\"keyword\">in</span> numbers)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += number;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (sum, count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"var-模式\"><a href=\"#var-模式\" class=\"headerlink\" title=\"var 模式\"></a>var 模式</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsAcceptable</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, <span class=\"built_in\">int</span> absLimit</span>)</span> =&gt;</span><br><span class=\"line\">    SimulateDataFetch(id) <span class=\"keyword\">is</span> <span class=\"keyword\">var</span> results</span><br><span class=\"line\">    &amp;&amp; results.Min() &gt;= -absLimit</span><br><span class=\"line\">    &amp;&amp; results.Max() &lt;= absLimit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span>[] <span class=\"title\">SimulateDataFetch</span>(<span class=\"params\"><span class=\"built_in\">int</span> id</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rand = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Enumerable</span><br><span class=\"line\">               .Range(start: <span class=\"number\">0</span>, count: <span class=\"number\">5</span>)</span><br><span class=\"line\">               .Select(s =&gt; rand.Next(minValue: <span class=\"number\">-10</span>, maxValue: <span class=\"number\">11</span>))</span><br><span class=\"line\">               .ToArray();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"弃元模式\"><a href=\"#弃元模式\" class=\"headerlink\" title=\"弃元模式\"></a>弃元模式</h2><p>从 C# 8.0 开始，可使用弃元模式 <code>_</code> 来匹配任何表达式，包括 null，如以下示例所示</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Console.WriteLine(GetDiscountInPercent(DayOfWeek.Friday));  <span class=\"comment\">// output: 5.0</span></span><br><span class=\"line\">Console.WriteLine(GetDiscountInPercent(<span class=\"literal\">null</span>));  <span class=\"comment\">// output: 0.0</span></span><br><span class=\"line\">Console.WriteLine(GetDiscountInPercent((DayOfWeek)<span class=\"number\">10</span>));  <span class=\"comment\">// output: 0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">decimal</span> <span class=\"title\">GetDiscountInPercent</span>(<span class=\"params\">DayOfWeek? dayOfWeek</span>)</span> =&gt; dayOfWeek <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DayOfWeek.Monday =&gt; <span class=\"number\">0.5</span>m,</span><br><span class=\"line\">    DayOfWeek.Tuesday =&gt; <span class=\"number\">12.5</span>m,</span><br><span class=\"line\">    DayOfWeek.Wednesday =&gt; <span class=\"number\">7.5</span>m,</span><br><span class=\"line\">    DayOfWeek.Thursday =&gt; <span class=\"number\">12.5</span>m,</span><br><span class=\"line\">    DayOfWeek.Friday =&gt; <span class=\"number\">5.0</span>m,</span><br><span class=\"line\">    DayOfWeek.Saturday =&gt; <span class=\"number\">2.5</span>m,</span><br><span class=\"line\">    DayOfWeek.Sunday =&gt; <span class=\"number\">2.0</span>m,</span><br><span class=\"line\">    _ =&gt; <span class=\"number\">0.0</span>m,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"带括号模式\"><a href=\"#带括号模式\" class=\"headerlink\" title=\"带括号模式\"></a>带括号模式</h2><p>从 C# 9.0 开始，可在任何模式两边加上括号。 通常，这样做是为了强调或更改逻辑模式中的优先级，如以下示例所示：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"function\">input <span class=\"keyword\">is</span> <span class=\"title\">not</span> (<span class=\"params\"><span class=\"built_in\">float</span> <span class=\"keyword\">or</span> <span class=\"built_in\">double</span></span>))</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOCM]</p>\n<p>[TOC]<br><a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/patterns\">https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/patterns</a></p>\n<p>C# 在 C# 7.0 中引入了模式匹配。 自此之后，每个主要 C# 版本都扩展了模式匹配功能。 以下 C# 表达式和语句支持模式匹配：</p>\n<ul>\n<li><code>is</code>表达式</li>\n<li><code>switch</code> 语句</li>\n<li><code>switch</code> 表达式（在 C# 8.0 中引入）</li>\n</ul>\n<p>在这些构造中，可将输入表达式与以下任一模式进行匹配：</p>\n<ul>\n<li><a href=\"#%E5%A3%B0%E6%98%8E%E5%92%8C%E7%B1%BB%E5%9E%8B%E6%A8%A1%E5%BC%8F\">声明模式</a>：用于检查表达式的运行时类型，如果匹配成功，则将表达式结果分配给声明的变量。 在 C# 7.0 中引入。</li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E6%A8%A1%E5%BC%8F\">类型模式</a>：用于检查表达式的运行时类型。 在 C# 9.0 中引入。</li>\n<li><a href=\"#%E5%B8%B8%E9%87%8F%E6%A8%A1%E5%BC%8F\">常量模式</a>：用于测试表达式结果是否等于指定常量。 在 C# 7.0 中引入。</li>\n<li><a href=\"#%E5%85%B3%E7%B3%BB%E6%A8%A1%E5%BC%8F\">关系模式</a>：用于将表达式结果与指定常量进行比较。 在 C# 9.0 中引入。</li>\n<li><a href=\"#%E9%80%BB%E8%BE%91%E6%A8%A1%E5%BC%8F\">逻辑模式</a>：用于测试表达式是否与模式的逻辑组合匹配。 在 C# 9.0 中引入。</li>\n<li><a href=\"#%E5%B1%9E%E6%80%A7%E6%A8%A1%E5%BC%8F\">属性模式</a>：用于测试表达式的属性或字段是否与嵌套模式匹配。 在 C# 8.0 中引入。</li>\n<li><a href=\"#%E4%BD%8D%E7%BD%AE%E6%A8%A1%E5%BC%8F\">位置模式</a>：用于解构表达式结果并测试结果值是否与嵌套模式匹配。 在 C# 8.0 中引入。</li>\n<li><a href=\"#var%E6%A8%A1%E5%BC%8F\">var 模式</a>：用于匹配任何表达式并将其结果分配给声明的变量。 在 C# 7.0 中引入。</li>\n<li><a href=\"#%E5%BC%83%E5%85%83%E6%A8%A1%E5%BC%8F\">弃元模式</a>：用于匹配任何表达式。 在 C# 8.0 中引入。</li>\n</ul>\n<p><em>逻辑、属性和位置模式都是递归模式。 也就是说，它们可包含嵌套模式。</em></p>\n<p>有关如何使用这些模式来生成数据驱动算法的示例，请参阅教程：使用模式匹配来生成类型驱动的算法和数据驱动的算法。</p>\n<h2 id=\"声明和类型模式\"><a href=\"#声明和类型模式\" class=\"headerlink\" title=\"声明和类型模式\"></a>声明和类型模式</h2><ol>\n<li>IS</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span>? xNullable = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"built_in\">int</span> y = <span class=\"number\">23</span>;</span><br><span class=\"line\"><span class=\"built_in\">object</span> yBoxed = y;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (xNullable <span class=\"keyword\">is</span> <span class=\"built_in\">int</span> a &amp;&amp; yBoxed <span class=\"keyword\">is</span> <span class=\"built_in\">int</span> b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(a + b);  <span class=\"comment\">// output: 30</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>SWITCH</li>\n</ol>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">decimal</span> <span class=\"title\">CalculateToll</span>(<span class=\"params\"><span class=\"keyword\">this</span> Vehicle vehicle</span>)</span> =&gt; vehicle <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Car =&gt; <span class=\"number\">2.00</span>m,</span><br><span class=\"line\">    Truck =&gt; <span class=\"number\">7.50</span>m,</span><br><span class=\"line\">    <span class=\"literal\">null</span> =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(vehicle)),</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">&quot;Unknown type of a vehicle&quot;</span>, <span class=\"keyword\">nameof</span>(vehicle)),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常量模式\"><a href=\"#常量模式\" class=\"headerlink\" title=\"常量模式\"></a>常量模式</h2><p>在常量模式中，可使用任何常量表达式，例如：</p>\n<ul>\n<li>integer 或 floating-point 数值文本</li>\n<li>char 或 string 文本</li>\n<li>布尔值 true 或 false</li>\n<li>enum 值</li>\n<li>声明常量字段或本地的名称</li>\n<li>null</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">decimal</span> <span class=\"title\">GetGroupTicketPrice</span>(<span class=\"params\"><span class=\"built_in\">int</span> visitorCount</span>)</span> =&gt; visitorCount <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"number\">1</span> =&gt; <span class=\"number\">12.0</span>m,</span><br><span class=\"line\">    <span class=\"number\">2</span> =&gt; <span class=\"number\">20.0</span>m,</span><br><span class=\"line\">    <span class=\"number\">3</span> =&gt; <span class=\"number\">27.0</span>m,</span><br><span class=\"line\">    <span class=\"number\">4</span> =&gt; <span class=\"number\">32.0</span>m,</span><br><span class=\"line\">    <span class=\"number\">0</span> =&gt; <span class=\"number\">0.0</span>m,</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">$&quot;Not supported number of visitors: <span class=\"subst\">&#123;visitorCount&#125;</span>&quot;</span>, <span class=\"keyword\">nameof</span>(visitorCount)),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">input <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关系模式\"><a href=\"#关系模式\" class=\"headerlink\" title=\"关系模式\"></a>关系模式</h2><p>在关系模式中，可使用关系运算符 &lt;、&gt;、&lt;= 或 &gt;= 中的任何一个。 关系模式的右侧部分必须是常数表达式。 常数表达式可以是 integer、floating-point、char 或 enum 类型。</p>\n<p>要检查表达式结果是否在某个范围内，请将其与合取 and 模式匹配，</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Console.WriteLine(GetCalendarSeason(<span class=\"keyword\">new</span> DateTime(<span class=\"number\">2021</span>, <span class=\"number\">3</span>, <span class=\"number\">14</span>)));  <span class=\"comment\">// output: spring</span></span><br><span class=\"line\">Console.WriteLine(GetCalendarSeason(<span class=\"keyword\">new</span> DateTime(<span class=\"number\">2021</span>, <span class=\"number\">7</span>, <span class=\"number\">19</span>)));  <span class=\"comment\">// output: summer</span></span><br><span class=\"line\">Console.WriteLine(GetCalendarSeason(<span class=\"keyword\">new</span> DateTime(<span class=\"number\">2021</span>, <span class=\"number\">2</span>, <span class=\"number\">17</span>)));  <span class=\"comment\">// output: winter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">GetCalendarSeason</span>(<span class=\"params\">DateTime date</span>)</span> =&gt; date.Month <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &gt;= <span class=\"number\">3</span> <span class=\"keyword\">and</span> &lt; <span class=\"number\">6</span> =&gt; <span class=\"string\">&quot;spring&quot;</span>,</span><br><span class=\"line\">    &gt;= <span class=\"number\">6</span> <span class=\"keyword\">and</span> &lt; <span class=\"number\">9</span> =&gt; <span class=\"string\">&quot;summer&quot;</span>,</span><br><span class=\"line\">    &gt;= <span class=\"number\">9</span> <span class=\"keyword\">and</span> &lt; <span class=\"number\">12</span> =&gt; <span class=\"string\">&quot;autumn&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">12</span> <span class=\"keyword\">or</span> (&gt;= <span class=\"number\">1</span> <span class=\"keyword\">and</span> &lt; <span class=\"number\">3</span>) =&gt; <span class=\"string\">&quot;winter&quot;</span>,</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(date), <span class=\"string\">$&quot;Date with unexpected month: <span class=\"subst\">&#123;date.Month&#125;</span>.&quot;</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"逻辑模式\"><a href=\"#逻辑模式\" class=\"headerlink\" title=\"逻辑模式\"></a>逻辑模式</h2><p>从 C# 9.0 开始，可使用 <code>not</code>、<code>and</code> 和 <code>or</code> 模式连结符来创建以下逻辑模式：</p>\n<p>and 模式连结符的优先级高于 or。 要显式指定优先级，请使用括号，如以下示例所示：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsLetter</span>(<span class=\"params\"><span class=\"built_in\">char</span> c</span>)</span> =&gt; <span class=\"function\">c <span class=\"title\">is</span> (<span class=\"params\">&gt;= <span class=\"string\">&#x27;a&#x27;</span> <span class=\"keyword\">and</span> &lt;= <span class=\"string\">&#x27;z&#x27;</span></span>) <span class=\"title\">or</span> (<span class=\"params\">&gt;= <span class=\"string\">&#x27;A&#x27;</span> <span class=\"keyword\">and</span> &lt;= <span class=\"string\">&#x27;Z&#x27;</span></span>)</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性模式\"><a href=\"#属性模式\" class=\"headerlink\" title=\"属性模式\"></a>属性模式</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsConferenceDay</span>(<span class=\"params\">DateTime date</span>)</span> =&gt; date <span class=\"keyword\">is</span> &#123; Year: <span class=\"number\">2020</span>, Month: <span class=\"number\">5</span>, Day: <span class=\"number\">19</span> <span class=\"keyword\">or</span> <span class=\"number\">20</span> <span class=\"keyword\">or</span> <span class=\"number\">21</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(TakeFive(<span class=\"string\">&quot;Hello, world!&quot;</span>));  <span class=\"comment\">// output: Hello</span></span><br><span class=\"line\">Console.WriteLine(TakeFive(<span class=\"string\">&quot;Hi!&quot;</span>));  <span class=\"comment\">// output: Hi!</span></span><br><span class=\"line\">Console.WriteLine(TakeFive(<span class=\"keyword\">new</span>[] &#123; <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&#x27;7&#x27;</span> &#125;));  <span class=\"comment\">// output: 12345</span></span><br><span class=\"line\">Console.WriteLine(TakeFive(<span class=\"keyword\">new</span>[] &#123; <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span> &#125;));  <span class=\"comment\">// output: abc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">TakeFive</span>(<span class=\"params\"><span class=\"built_in\">object</span> input</span>)</span> =&gt; input <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> &#123; Length: &gt;= <span class=\"number\">5</span> &#125; s =&gt; s.Substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>),</span><br><span class=\"line\">    <span class=\"built_in\">string</span> s =&gt; s,</span><br><span class=\"line\"></span><br><span class=\"line\">    ICollection&lt;<span class=\"built_in\">char</span>&gt; &#123; Count: &gt;= <span class=\"number\">5</span> &#125; symbols =&gt; <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(symbols.Take(<span class=\"number\">5</span>).ToArray()),</span><br><span class=\"line\">    ICollection&lt;<span class=\"built_in\">char</span>&gt; symbols =&gt; <span class=\"keyword\">new</span> <span class=\"built_in\">string</span>(symbols.ToArray()),</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"literal\">null</span> =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(input)),</span><br><span class=\"line\">    _ =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">&quot;Not supported input type.&quot;</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>属性模式是一种递归模式。 也就是说，可以将任何模式用作<code>嵌套</code>模式。 使用属性模式将部分数据与嵌套模式进行匹配，如以下示例所示：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title\">Point</span>(<span class=\"params\"><span class=\"built_in\">int</span> X, <span class=\"built_in\">int</span> Y</span>)</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title\">Segment</span>(<span class=\"params\">Point Start, Point End</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsAnyEndAtOrigin</span>(<span class=\"params\">Segment segment</span>)</span> =&gt;</span><br><span class=\"line\">    segment <span class=\"keyword\">is</span> &#123; Start: &#123; X: <span class=\"number\">0</span>, Y: <span class=\"number\">0</span> &#125; &#125; <span class=\"keyword\">or</span> &#123; End: &#123; X: <span class=\"number\">0</span>, Y: <span class=\"number\">0</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"位置模式\"><a href=\"#位置模式\" class=\"headerlink\" title=\"位置模式\"></a>位置模式</h2><p>位置模式来解构表达式结果并将结果值与相应的嵌套模式匹配</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt; &#123; <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (SumAndCount(numbers) <span class=\"keyword\">is</span> (Sum: <span class=\"keyword\">var</span> sum, Count: &gt; <span class=\"number\">0</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$&quot;Sum of [<span class=\"subst\">&#123;<span class=\"built_in\">string</span>.Join(<span class=\"string\">&quot; &quot;</span>, numbers)&#125;</span>] is <span class=\"subst\">&#123;sum&#125;</span>&quot;</span>);  <span class=\"comment\">// output: Sum of [1 2 3] is 6</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> (<span class=\"built_in\">double</span> Sum, <span class=\"built_in\">int</span> Count) SumAndCount(IEnumerable&lt;<span class=\"built_in\">int</span>&gt; numbers)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"built_in\">int</span> number <span class=\"keyword\">in</span> numbers)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += number;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (sum, count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"var-模式\"><a href=\"#var-模式\" class=\"headerlink\" title=\"var 模式\"></a>var 模式</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"title\">IsAcceptable</span>(<span class=\"params\"><span class=\"built_in\">int</span> id, <span class=\"built_in\">int</span> absLimit</span>)</span> =&gt;</span><br><span class=\"line\">    SimulateDataFetch(id) <span class=\"keyword\">is</span> <span class=\"keyword\">var</span> results</span><br><span class=\"line\">    &amp;&amp; results.Min() &gt;= -absLimit</span><br><span class=\"line\">    &amp;&amp; results.Max() &lt;= absLimit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">int</span>[] <span class=\"title\">SimulateDataFetch</span>(<span class=\"params\"><span class=\"built_in\">int</span> id</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rand = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Enumerable</span><br><span class=\"line\">               .Range(start: <span class=\"number\">0</span>, count: <span class=\"number\">5</span>)</span><br><span class=\"line\">               .Select(s =&gt; rand.Next(minValue: <span class=\"number\">-10</span>, maxValue: <span class=\"number\">11</span>))</span><br><span class=\"line\">               .ToArray();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"弃元模式\"><a href=\"#弃元模式\" class=\"headerlink\" title=\"弃元模式\"></a>弃元模式</h2><p>从 C# 8.0 开始，可使用弃元模式 <code>_</code> 来匹配任何表达式，包括 null，如以下示例所示</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Console.WriteLine(GetDiscountInPercent(DayOfWeek.Friday));  <span class=\"comment\">// output: 5.0</span></span><br><span class=\"line\">Console.WriteLine(GetDiscountInPercent(<span class=\"literal\">null</span>));  <span class=\"comment\">// output: 0.0</span></span><br><span class=\"line\">Console.WriteLine(GetDiscountInPercent((DayOfWeek)<span class=\"number\">10</span>));  <span class=\"comment\">// output: 0.0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"built_in\">decimal</span> <span class=\"title\">GetDiscountInPercent</span>(<span class=\"params\">DayOfWeek? dayOfWeek</span>)</span> =&gt; dayOfWeek <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DayOfWeek.Monday =&gt; <span class=\"number\">0.5</span>m,</span><br><span class=\"line\">    DayOfWeek.Tuesday =&gt; <span class=\"number\">12.5</span>m,</span><br><span class=\"line\">    DayOfWeek.Wednesday =&gt; <span class=\"number\">7.5</span>m,</span><br><span class=\"line\">    DayOfWeek.Thursday =&gt; <span class=\"number\">12.5</span>m,</span><br><span class=\"line\">    DayOfWeek.Friday =&gt; <span class=\"number\">5.0</span>m,</span><br><span class=\"line\">    DayOfWeek.Saturday =&gt; <span class=\"number\">2.5</span>m,</span><br><span class=\"line\">    DayOfWeek.Sunday =&gt; <span class=\"number\">2.0</span>m,</span><br><span class=\"line\">    _ =&gt; <span class=\"number\">0.0</span>m,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"带括号模式\"><a href=\"#带括号模式\" class=\"headerlink\" title=\"带括号模式\"></a>带括号模式</h2><p>从 C# 9.0 开始，可在任何模式两边加上括号。 通常，这样做是为了强调或更改逻辑模式中的优先级，如以下示例所示：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"function\">input <span class=\"keyword\">is</span> <span class=\"title\">not</span> (<span class=\"params\"><span class=\"built_in\">float</span> <span class=\"keyword\">or</span> <span class=\"built_in\">double</span></span>))</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Editor 测试markdown","date":"2021-12-01T14:15:41.000Z","_content":"\n# Editor.md\n\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\n\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\n\n**目录 (Table of Contents)**\n\n[TOCM]\n\n[TOC]\n\n# Heading 1\n## Heading 2               \n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n\n#### 标题（用底线的形式）Heading (underline)\n\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\n### 字符效果和横线等\n                \n----\n\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\n*斜体字*      _斜体字_\n**粗体**  __粗体__\n***粗斜体*** ___粗斜体___\n\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\n\n**缩写(同HTML的abbr标签)**\n\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\n\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\n\n### 引用 Blockquotes\n\n> 引用文本 Blockquotes\n\n引用的行内混合 Blockquotes\n                    \n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\n\n### 锚点与链接 Links\n\n[普通链接](http://localhost/)\n\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\n\n直接链接：<https://github.com>\n\n[锚点链接][anchor-id] \n\n[anchor-id]: http://www.this-anchor-link.com/\n\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\n\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\n\n> @pandao\n\n### 多语言代码高亮 Codes\n\n#### 行内代码 Inline code\n\n执行命令：`npm install marked`\n\n#### 缩进风格\n\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\n\n    <?php\n        echo \"Hello world!\";\n    ?>\n    \n预格式化文本：\n\n    | First Header  | Second Header |\n    | ------------- | ------------- |\n    | Content Cell  | Content Cell  |\n    | Content Cell  | Content Cell  |\n\n#### JS代码　\n\n```javascript\nfunction test() {\n\tconsole.log(\"Hello world!\");\n}\n \n(function(){\n    var box = function() {\n        return box.fn.init();\n    };\n\n    box.prototype = box.fn = {\n        init : function(){\n            console.log('box.init()');\n\n\t\t\treturn this;\n        },\n\n\t\tadd : function(str) {\n\t\t\talert(\"add\", str);\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremove : function(str) {\n\t\t\talert(\"remove\", str);\n\n\t\t\treturn this;\n\t\t}\n    };\n    \n    box.fn.init.prototype = box.fn;\n    \n    window.box =box;\n})();\n\nvar testBox = box();\ntestBox.add(\"jQuery\").remove(\"jQuery\");\n```\n\n#### HTML 代码 HTML codes\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <mate charest=\"utf-8\" />\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\n        <title>Hello world!</title>\n        <style type=\"text/css\">\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\n            ul{list-style: none;}\n            img{border:none;vertical-align: middle;}\n        </style>\n    </head>\n    <body>\n        <h1 class=\"text-xxl\">Hello world!</h1>\n        <p class=\"text-green\">Plain text</p>\n    </body>\n</html>\n```\n\n### 图片 Images\n\nImage:\n\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\n\n> Follow your heart.\n\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\n\n> 图为：厦门白城沙滩\n\n图片加链接 (Image + Link)：\n\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\n\n> 图为：李健首张专辑《似水流年》封面\n                \n----\n\n### 列表 Lists\n\n#### 无序列表（减号）Unordered Lists (-)\n                \n- 列表一\n- 列表二\n- 列表三\n     \n#### 无序列表（星号）Unordered Lists (*)\n\n* 列表一\n* 列表二\n* 列表三\n\n#### 无序列表（加号和嵌套）Unordered Lists (+)\n                \n+ 列表一\n+ 列表二\n    + 列表二-1\n    + 列表二-2\n    + 列表二-3\n+ 列表三\n    * 列表一\n    * 列表二\n    * 列表三\n\n#### 有序列表 Ordered Lists (-)\n                \n1. 第一行\n2. 第二行\n3. 第三行\n\n#### GFM task list\n\n- [x] GFM task list 1\n- [x] GFM task list 2\n- [ ] GFM task list 3\n    - [ ] GFM task list 3-1\n    - [ ] GFM task list 3-2\n    - [ ] GFM task list 3-3\n- [ ] GFM task list 4\n    - [ ] GFM task list 4-1\n    - [ ] GFM task list 4-2\n                \n----\n                    \n### 绘制表格 Tables\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机      | $1600   |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n                    \nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell \n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n| Function name | Description                    |\n| ------------- | ------------------------------ |\n| `help()`      | Display the help window.       |\n| `destroy()`   | **Destroy your computer!**     |\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n| Item      | Value |\n| --------- | -----:|\n| Computer  | $1600 |\n| Phone     |   $12 |\n| Pipe      |    $1 |\n                \n----\n\n#### 特殊符号 HTML Entities Codes\n\n&copy; &  &uml; &trade; &iexcl; &pound;\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \n\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\n\n18&ordm;C  &quot;  &apos;\n\n[========]\n\n### Emoji表情 :smiley:\n\n> Blockquotes :star:\n\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\n\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\n- [x] [ ] :smiley: this is a complete item :smiley:;\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\n \n#### 反斜杠 Escape\n\n\\*literal asterisks\\*\n\n[========]\n            \n### 科学公式 TeX(KaTeX)\n\n$$E=mc^2$$\n\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\n\n$$x > y$$\n\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\n                    \n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\n\n多行公式：\n\n```math\n\\displaystyle\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\n\\leq\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\n```\n\n```katex\n\\displaystyle \n    \\frac{1}{\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\n        1+\\frac{e^{-6\\pi}}\n        {1+\\frac{e^{-8\\pi}}\n         {1+\\cdots} }\n        } \n    }\n```\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n\n### 分页符 Page break\n\n> Print Test: Ctrl + P\n\n[========]\n\n### 绘制流程图 Flowchart\n\n```flow\nst=>start: 用户登陆\nop=>operation: 登陆操作\ncond=>condition: 登陆成功 Yes or No?\ne=>end: 进入后台\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n[========]\n                    \n### 绘制序列图 Sequence Diagram\n                    \n```seq\nAndrew->China: Says Hello \nNote right of China: China thinks\\nabout it \nChina-->Andrew: How are you? \nAndrew->>China: I am good thanks!\n```\n\n### End","source":"_posts/Editor-测试markdown.md","raw":"---\ntitle: Editor 测试markdown\ndate: 2021-12-01 22:15:41\ntags:\n- JavaScript\ncategories:\n- Markdown\n---\n\n# Editor.md\n\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\n\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\n\n**目录 (Table of Contents)**\n\n[TOCM]\n\n[TOC]\n\n# Heading 1\n## Heading 2               \n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n\n#### 标题（用底线的形式）Heading (underline)\n\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\n### 字符效果和横线等\n                \n----\n\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\n*斜体字*      _斜体字_\n**粗体**  __粗体__\n***粗斜体*** ___粗斜体___\n\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\n\n**缩写(同HTML的abbr标签)**\n\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\n\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\n\n### 引用 Blockquotes\n\n> 引用文本 Blockquotes\n\n引用的行内混合 Blockquotes\n                    \n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\n\n### 锚点与链接 Links\n\n[普通链接](http://localhost/)\n\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\n\n直接链接：<https://github.com>\n\n[锚点链接][anchor-id] \n\n[anchor-id]: http://www.this-anchor-link.com/\n\n[mailto:test.test@gmail.com](mailto:test.test@gmail.com)\n\nGFM a-tail link @pandao  邮箱地址自动链接 test.test@gmail.com  www@vip.qq.com\n\n> @pandao\n\n### 多语言代码高亮 Codes\n\n#### 行内代码 Inline code\n\n执行命令：`npm install marked`\n\n#### 缩进风格\n\n即缩进四个空格，也做为实现类似 `<pre>` 预格式化文本 ( Preformatted Text ) 的功能。\n\n    <?php\n        echo \"Hello world!\";\n    ?>\n    \n预格式化文本：\n\n    | First Header  | Second Header |\n    | ------------- | ------------- |\n    | Content Cell  | Content Cell  |\n    | Content Cell  | Content Cell  |\n\n#### JS代码　\n\n```javascript\nfunction test() {\n\tconsole.log(\"Hello world!\");\n}\n \n(function(){\n    var box = function() {\n        return box.fn.init();\n    };\n\n    box.prototype = box.fn = {\n        init : function(){\n            console.log('box.init()');\n\n\t\t\treturn this;\n        },\n\n\t\tadd : function(str) {\n\t\t\talert(\"add\", str);\n\n\t\t\treturn this;\n\t\t},\n\n\t\tremove : function(str) {\n\t\t\talert(\"remove\", str);\n\n\t\t\treturn this;\n\t\t}\n    };\n    \n    box.fn.init.prototype = box.fn;\n    \n    window.box =box;\n})();\n\nvar testBox = box();\ntestBox.add(\"jQuery\").remove(\"jQuery\");\n```\n\n#### HTML 代码 HTML codes\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <mate charest=\"utf-8\" />\n        <meta name=\"keywords\" content=\"Editor.md, Markdown, Editor\" />\n        <title>Hello world!</title>\n        <style type=\"text/css\">\n            body{font-size:14px;color:#444;font-family: \"Microsoft Yahei\", Tahoma, \"Hiragino Sans GB\", Arial;background:#fff;}\n            ul{list-style: none;}\n            img{border:none;vertical-align: middle;}\n        </style>\n    </head>\n    <body>\n        <h1 class=\"text-xxl\">Hello world!</h1>\n        <p class=\"text-green\">Plain text</p>\n    </body>\n</html>\n```\n\n### 图片 Images\n\nImage:\n\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\n\n> Follow your heart.\n\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\n\n> 图为：厦门白城沙滩\n\n图片加链接 (Image + Link)：\n\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/images/7.jpg \"李健首张专辑《似水流年》封面\")\n\n> 图为：李健首张专辑《似水流年》封面\n                \n----\n\n### 列表 Lists\n\n#### 无序列表（减号）Unordered Lists (-)\n                \n- 列表一\n- 列表二\n- 列表三\n     \n#### 无序列表（星号）Unordered Lists (*)\n\n* 列表一\n* 列表二\n* 列表三\n\n#### 无序列表（加号和嵌套）Unordered Lists (+)\n                \n+ 列表一\n+ 列表二\n    + 列表二-1\n    + 列表二-2\n    + 列表二-3\n+ 列表三\n    * 列表一\n    * 列表二\n    * 列表三\n\n#### 有序列表 Ordered Lists (-)\n                \n1. 第一行\n2. 第二行\n3. 第三行\n\n#### GFM task list\n\n- [x] GFM task list 1\n- [x] GFM task list 2\n- [ ] GFM task list 3\n    - [ ] GFM task list 3-1\n    - [ ] GFM task list 3-2\n    - [ ] GFM task list 3-3\n- [ ] GFM task list 4\n    - [ ] GFM task list 4-1\n    - [ ] GFM task list 4-2\n                \n----\n                    \n### 绘制表格 Tables\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机      | $1600   |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n                    \nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell \n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n| Function name | Description                    |\n| ------------- | ------------------------------ |\n| `help()`      | Display the help window.       |\n| `destroy()`   | **Destroy your computer!**     |\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n| Item      | Value |\n| --------- | -----:|\n| Computer  | $1600 |\n| Phone     |   $12 |\n| Pipe      |    $1 |\n                \n----\n\n#### 特殊符号 HTML Entities Codes\n\n&copy; &  &uml; &trade; &iexcl; &pound;\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \n\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\n\n18&ordm;C  &quot;  &apos;\n\n[========]\n\n### Emoji表情 :smiley:\n\n> Blockquotes :star:\n\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\n\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\n- [x] [ ] :smiley: this is a complete item :smiley:;\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\n \n#### 反斜杠 Escape\n\n\\*literal asterisks\\*\n\n[========]\n            \n### 科学公式 TeX(KaTeX)\n\n$$E=mc^2$$\n\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\n\n$$x > y$$\n\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\n                    \n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\n\n多行公式：\n\n```math\n\\displaystyle\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\n\\leq\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\n```\n\n```katex\n\\displaystyle \n    \\frac{1}{\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\n        1+\\frac{e^{-6\\pi}}\n        {1+\\frac{e^{-8\\pi}}\n         {1+\\cdots} }\n        } \n    }\n```\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n\n### 分页符 Page break\n\n> Print Test: Ctrl + P\n\n[========]\n\n### 绘制流程图 Flowchart\n\n```flow\nst=>start: 用户登陆\nop=>operation: 登陆操作\ncond=>condition: 登陆成功 Yes or No?\ne=>end: 进入后台\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n[========]\n                    \n### 绘制序列图 Sequence Diagram\n                    \n```seq\nAndrew->China: Says Hello \nNote right of China: China thinks\\nabout it \nChina-->Andrew: How are you? \nAndrew->>China: I am good thanks!\n```\n\n### End","slug":"Editor-测试markdown","published":1,"updated":"2021-12-01T14:22:01.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevwz00044ku287qo0mq6","content":"<h1 id=\"Editor-md\"><a href=\"#Editor-md\" class=\"headerlink\" title=\"Editor.md\"></a>Editor.md</h1><p><img src=\"https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png\"></p>\n<p><img src=\"https://img.shields.io/github/stars/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/forks/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/tag/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/release/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/issues/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/bower/v/editor.md.svg\"></p>\n<p><strong>目录 (Table of Contents)</strong></p>\n<p>[TOCM]</p>\n<p>[TOC]</p>\n<h1 id=\"Heading-1\"><a href=\"#Heading-1\" class=\"headerlink\" title=\"Heading 1\"></a>Heading 1</h1><h2 id=\"Heading-2\"><a href=\"#Heading-2\" class=\"headerlink\" title=\"Heading 2\"></a>Heading 2</h2><h3 id=\"Heading-3\"><a href=\"#Heading-3\" class=\"headerlink\" title=\"Heading 3\"></a>Heading 3</h3><h4 id=\"Heading-4\"><a href=\"#Heading-4\" class=\"headerlink\" title=\"Heading 4\"></a>Heading 4</h4><h5 id=\"Heading-5\"><a href=\"#Heading-5\" class=\"headerlink\" title=\"Heading 5\"></a>Heading 5</h5><h6 id=\"Heading-6\"><a href=\"#Heading-6\" class=\"headerlink\" title=\"Heading 6\"></a>Heading 6</h6><h1 id=\"Heading-1-link-Heading-link\"><a href=\"#Heading-1-link-Heading-link\" class=\"headerlink\" title=\"Heading 1 link Heading link\"></a>Heading 1 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h1><h2 id=\"Heading-2-link-Heading-link\"><a href=\"#Heading-2-link-Heading-link\" class=\"headerlink\" title=\"Heading 2 link Heading link\"></a>Heading 2 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h2><h3 id=\"Heading-3-link-Heading-link\"><a href=\"#Heading-3-link-Heading-link\" class=\"headerlink\" title=\"Heading 3 link Heading link\"></a>Heading 3 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h3><h4 id=\"Heading-4-link-Heading-link-Heading-link-Heading-link\"><a href=\"#Heading-4-link-Heading-link-Heading-link-Heading-link\" class=\"headerlink\" title=\"Heading 4 link Heading link Heading link Heading link\"></a>Heading 4 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a> Heading link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h4><h5 id=\"Heading-5-link-Heading-link\"><a href=\"#Heading-5-link-Heading-link\" class=\"headerlink\" title=\"Heading 5 link Heading link\"></a>Heading 5 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h5><h6 id=\"Heading-6-link-Heading-link\"><a href=\"#Heading-6-link-Heading-link\" class=\"headerlink\" title=\"Heading 6 link Heading link\"></a>Heading 6 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h6><h4 id=\"标题（用底线的形式）Heading-underline\"><a href=\"#标题（用底线的形式）Heading-underline\" class=\"headerlink\" title=\"标题（用底线的形式）Heading (underline)\"></a>标题（用底线的形式）Heading (underline)</h4><h1 id=\"This-is-an-H1\"><a href=\"#This-is-an-H1\" class=\"headerlink\" title=\"This is an H1\"></a>This is an H1</h1><h2 id=\"This-is-an-H2\"><a href=\"#This-is-an-H2\" class=\"headerlink\" title=\"This is an H2\"></a>This is an H2</h2><h3 id=\"字符效果和横线等\"><a href=\"#字符效果和横线等\" class=\"headerlink\" title=\"字符效果和横线等\"></a>字符效果和横线等</h3><hr>\n<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><em><strong>粗斜体</strong></em> <em><strong>粗斜体</strong></em></p>\n<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>\n<p><strong>缩写(同HTML的abbr标签)</strong></p>\n<blockquote>\n<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>\n</blockquote>\n<p>The <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.</p>\n<h3 id=\"引用-Blockquotes\"><a href=\"#引用-Blockquotes\" class=\"headerlink\" title=\"引用 Blockquotes\"></a>引用 Blockquotes</h3><blockquote>\n<p>引用文本 Blockquotes</p>\n</blockquote>\n<p>引用的行内混合 Blockquotes</p>\n<blockquote>\n<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href=\"http://localhost/\">普通链接</a>。</p>\n</blockquote>\n<h3 id=\"锚点与链接-Links\"><a href=\"#锚点与链接-Links\" class=\"headerlink\" title=\"锚点与链接 Links\"></a>锚点与链接 Links</h3><p><a href=\"http://localhost/\">普通链接</a></p>\n<p><a href=\"http://localhost/\" title=\"普通链接带标题\">普通链接带标题</a></p>\n<p>直接链接：<a href=\"https://github.com/\">https://github.com</a></p>\n<p><a href=\"http://www.this-anchor-link.com/\">锚点链接</a> </p>\n<p><a href=\"mailto:test.test@gmail.com\">mailto:test.test@gmail.com</a></p>\n<p>GFM a-tail link @pandao  邮箱地址自动链接 <a href=\"mailto:&#x74;&#x65;&#x73;&#116;&#46;&#116;&#101;&#x73;&#116;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#x74;&#x65;&#x73;&#116;&#46;&#116;&#101;&#x73;&#116;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a>  <a href=\"mailto:&#119;&#119;&#119;&#64;&#118;&#x69;&#112;&#x2e;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;\">&#119;&#119;&#119;&#64;&#118;&#x69;&#112;&#x2e;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;</a></p>\n<blockquote>\n<p>@pandao</p>\n</blockquote>\n<h3 id=\"多语言代码高亮-Codes\"><a href=\"#多语言代码高亮-Codes\" class=\"headerlink\" title=\"多语言代码高亮 Codes\"></a>多语言代码高亮 Codes</h3><h4 id=\"行内代码-Inline-code\"><a href=\"#行内代码-Inline-code\" class=\"headerlink\" title=\"行内代码 Inline code\"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>\n<h4 id=\"缩进风格\"><a href=\"#缩进风格\" class=\"headerlink\" title=\"缩进风格\"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p>\n<pre><code>&lt;?php\n    echo &quot;Hello world!&quot;;\n?&gt;\n</code></pre>\n<p>预格式化文本：</p>\n<pre><code>| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n</code></pre>\n<h4 id=\"JS代码\"><a href=\"#JS代码\" class=\"headerlink\" title=\"JS代码\"></a>JS代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello world!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> box.fn.init();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    box.prototype = box.fn = &#123;</span><br><span class=\"line\">        <span class=\"attr\">init</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;box.init()&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"attr\">add</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">&quot;add&quot;</span>, str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"attr\">remove</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">&quot;remove&quot;</span>, str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    box.fn.init.prototype = box.fn;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">window</span>.box =box;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> testBox = box();</span><br><span class=\"line\">testBox.add(<span class=\"string\">&quot;jQuery&quot;</span>).remove(<span class=\"string\">&quot;jQuery&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HTML-代码-HTML-codes\"><a href=\"#HTML-代码-HTML-codes\" class=\"headerlink\" title=\"HTML 代码 HTML codes\"></a>HTML 代码 HTML codes</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mate</span> <span class=\"attr\">charest</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;keywords&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Editor.md, Markdown, Editor&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">body</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#444</span>;<span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;Microsoft Yahei&quot;</span>, Tahoma, <span class=\"string\">&quot;Hiragino Sans GB&quot;</span>, Arial;<span class=\"attribute\">background</span>:<span class=\"number\">#fff</span>;&#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">ul</span>&#123;<span class=\"attribute\">list-style</span>: none;&#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">img</span>&#123;<span class=\"attribute\">border</span>:none;<span class=\"attribute\">vertical-align</span>: middle;&#125;</span></span><br><span class=\"line\"><span class=\"css\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-xxl&quot;</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-green&quot;</span>&gt;</span>Plain text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片-Images\"><a href=\"#图片-Images\" class=\"headerlink\" title=\"图片 Images\"></a>图片 Images</h3><p>Image:</p>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/4.jpg\"></p>\n<blockquote>\n<p>Follow your heart.</p>\n</blockquote>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/8.jpg\"></p>\n<blockquote>\n<p>图为：厦门白城沙滩</p>\n</blockquote>\n<p>图片加链接 (Image + Link)：</p>\n<p><a href=\"https://pandao.github.io/editor.md/images/7.jpg\" title=\"李健首张专辑《似水流年》封面\"><img src=\"https://pandao.github.io/editor.md/examples/images/7.jpg\"></a></p>\n<blockquote>\n<p>图为：李健首张专辑《似水流年》封面</p>\n</blockquote>\n<hr>\n<h3 id=\"列表-Lists\"><a href=\"#列表-Lists\" class=\"headerlink\" title=\"列表 Lists\"></a>列表 Lists</h3><h4 id=\"无序列表（减号）Unordered-Lists\"><a href=\"#无序列表（减号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（减号）Unordered Lists (-)\"></a>无序列表（减号）Unordered Lists (-)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（星号）Unordered-Lists\"><a href=\"#无序列表（星号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（星号）Unordered Lists (*)\"></a>无序列表（星号）Unordered Lists (*)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（加号和嵌套）Unordered-Lists\"><a href=\"#无序列表（加号和嵌套）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（加号和嵌套）Unordered Lists (+)\"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>\n<li>列表一</li>\n<li>列表二<ul>\n<li>列表二-1</li>\n<li>列表二-2</li>\n<li>列表二-3</li>\n</ul>\n</li>\n<li>列表三<ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"有序列表-Ordered-Lists\"><a href=\"#有序列表-Ordered-Lists\" class=\"headerlink\" title=\"有序列表 Ordered Lists (-)\"></a>有序列表 Ordered Lists (-)</h4><ol>\n<li>第一行</li>\n<li>第二行</li>\n<li>第三行</li>\n</ol>\n<h4 id=\"GFM-task-list\"><a href=\"#GFM-task-list\" class=\"headerlink\" title=\"GFM task list\"></a>GFM task list</h4><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> GFM task list 1</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> GFM task list 2</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3<ul>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-1</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-2</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-3</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4<ul>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4-1</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4-2</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"绘制表格-Tables\"><a href=\"#绘制表格-Tables\" class=\"headerlink\" title=\"绘制表格 Tables\"></a>绘制表格 Tables</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>计算机</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Function name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>help()</code></td>\n<td>Display the help window.</td>\n</tr>\n<tr>\n<td><code>destroy()</code></td>\n<td><strong>Destroy your computer!</strong></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Left-Aligned</th>\n<th align=\"center\">Center Aligned</th>\n<th align=\"right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">col 3 is</td>\n<td align=\"center\">some wordy text</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td align=\"left\">col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td align=\"left\">zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th align=\"right\">Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Computer</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"特殊符号-HTML-Entities-Codes\"><a href=\"#特殊符号-HTML-Entities-Codes\" class=\"headerlink\" title=\"特殊符号 HTML Entities Codes\"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; </p>\n<p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p>\n<p>18&ordm;C  &quot;  &apos;</p>\n<p>[========]</p>\n<h3 id=\"Emoji表情-smiley\"><a href=\"#Emoji表情-smiley\" class=\"headerlink\" title=\"Emoji表情 :smiley:\"></a>Emoji表情 :smiley:</h3><blockquote>\n<p>Blockquotes :star:</p>\n</blockquote>\n<h4 id=\"GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\"><a href=\"#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\" class=\"headerlink\" title=\"GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:\"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> :smiley: @mentions, :smiley: #refs, <a href=\"\">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> [ ] :smiley: this is a complete item :smiley:;</li>\n<li><input disabled=\"\" type=\"checkbox\"> []this is an incomplete item <a href=\"#\">test link</a> :fa-star: @pandao; </li>\n<li><input disabled=\"\" type=\"checkbox\"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>\n<li><input disabled=\"\" type=\"checkbox\"> :smiley: this is an incomplete item <a href=\"#\">test link</a> :fa-star: :fa-gear:;</li>\n<li><input disabled=\"\" type=\"checkbox\"> :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href=\"#\">test link</a>;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"反斜杠-Escape\"><a href=\"#反斜杠-Escape\" class=\"headerlink\" title=\"反斜杠 Escape\"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>\n<p>[========]</p>\n<h3 id=\"科学公式-TeX-KaTeX\"><a href=\"#科学公式-TeX-KaTeX\" class=\"headerlink\" title=\"科学公式 TeX(KaTeX)\"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p>\n<p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p>\n<p>$$x &gt; y$$</p>\n<p>$$(\\sqrt{3x-1}+(1+x)^2)$$</p>\n<p>$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$</p>\n<p>多行公式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\displaystyle</span><br><span class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k b\\_k \\right)^2</span><br><span class=\"line\">\\leq</span><br><span class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k^2 \\right)</span><br><span class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n b\\_k^2 \\right)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\displaystyle </span><br><span class=\"line\">    \\frac&#123;1&#125;&#123;</span><br><span class=\"line\">        \\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123;</span><br><span class=\"line\">        \\frac25 \\pi&#125;&#125; = 1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123;</span><br><span class=\"line\">        1+\\frac&#123;e^&#123;-6\\pi&#125;&#125;</span><br><span class=\"line\">        &#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125;</span><br><span class=\"line\">         &#123;1+\\cdots&#125; &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(x) = \\int_&#123;-\\infty&#125;^\\infty</span><br><span class=\"line\">    \\hat f(\\xi)\\,e^&#123;2 \\pi i \\xi x&#125;</span><br><span class=\"line\">    \\,d\\xi</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分页符-Page-break\"><a href=\"#分页符-Page-break\" class=\"headerlink\" title=\"分页符 Page break\"></a>分页符 Page break</h3><blockquote>\n<p>Print Test: Ctrl + P</p>\n</blockquote>\n<p>[========]</p>\n<h3 id=\"绘制流程图-Flowchart\"><a href=\"#绘制流程图-Flowchart\" class=\"headerlink\" title=\"绘制流程图 Flowchart\"></a>绘制流程图 Flowchart</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 用户登陆</span><br><span class=\"line\">op=&gt;operation: 登陆操作</span><br><span class=\"line\">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class=\"line\">e=&gt;end: 进入后台</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>\n\n<p>[========]</p>\n<h3 id=\"绘制序列图-Sequence-Diagram\"><a href=\"#绘制序列图-Sequence-Diagram\" class=\"headerlink\" title=\"绘制序列图 Sequence Diagram\"></a>绘制序列图 Sequence Diagram</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Andrew-&gt;China: Says Hello </span><br><span class=\"line\">Note right of China: China thinks\\nabout it </span><br><span class=\"line\">China--&gt;Andrew: How are you? </span><br><span class=\"line\">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Editor-md\"><a href=\"#Editor-md\" class=\"headerlink\" title=\"Editor.md\"></a>Editor.md</h1><p><img src=\"https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png\"></p>\n<p><img src=\"https://img.shields.io/github/stars/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/forks/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/tag/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/release/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/github/issues/pandao/editor.md.svg\"> <img src=\"https://img.shields.io/bower/v/editor.md.svg\"></p>\n<p><strong>目录 (Table of Contents)</strong></p>\n<p>[TOCM]</p>\n<p>[TOC]</p>\n<h1 id=\"Heading-1\"><a href=\"#Heading-1\" class=\"headerlink\" title=\"Heading 1\"></a>Heading 1</h1><h2 id=\"Heading-2\"><a href=\"#Heading-2\" class=\"headerlink\" title=\"Heading 2\"></a>Heading 2</h2><h3 id=\"Heading-3\"><a href=\"#Heading-3\" class=\"headerlink\" title=\"Heading 3\"></a>Heading 3</h3><h4 id=\"Heading-4\"><a href=\"#Heading-4\" class=\"headerlink\" title=\"Heading 4\"></a>Heading 4</h4><h5 id=\"Heading-5\"><a href=\"#Heading-5\" class=\"headerlink\" title=\"Heading 5\"></a>Heading 5</h5><h6 id=\"Heading-6\"><a href=\"#Heading-6\" class=\"headerlink\" title=\"Heading 6\"></a>Heading 6</h6><h1 id=\"Heading-1-link-Heading-link\"><a href=\"#Heading-1-link-Heading-link\" class=\"headerlink\" title=\"Heading 1 link Heading link\"></a>Heading 1 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h1><h2 id=\"Heading-2-link-Heading-link\"><a href=\"#Heading-2-link-Heading-link\" class=\"headerlink\" title=\"Heading 2 link Heading link\"></a>Heading 2 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h2><h3 id=\"Heading-3-link-Heading-link\"><a href=\"#Heading-3-link-Heading-link\" class=\"headerlink\" title=\"Heading 3 link Heading link\"></a>Heading 3 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h3><h4 id=\"Heading-4-link-Heading-link-Heading-link-Heading-link\"><a href=\"#Heading-4-link-Heading-link-Heading-link-Heading-link\" class=\"headerlink\" title=\"Heading 4 link Heading link Heading link Heading link\"></a>Heading 4 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a> Heading link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h4><h5 id=\"Heading-5-link-Heading-link\"><a href=\"#Heading-5-link-Heading-link\" class=\"headerlink\" title=\"Heading 5 link Heading link\"></a>Heading 5 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h5><h6 id=\"Heading-6-link-Heading-link\"><a href=\"#Heading-6-link-Heading-link\" class=\"headerlink\" title=\"Heading 6 link Heading link\"></a>Heading 6 link <a href=\"https://github.com/pandao/editor.md\" title=\"Heading link\">Heading link</a></h6><h4 id=\"标题（用底线的形式）Heading-underline\"><a href=\"#标题（用底线的形式）Heading-underline\" class=\"headerlink\" title=\"标题（用底线的形式）Heading (underline)\"></a>标题（用底线的形式）Heading (underline)</h4><h1 id=\"This-is-an-H1\"><a href=\"#This-is-an-H1\" class=\"headerlink\" title=\"This is an H1\"></a>This is an H1</h1><h2 id=\"This-is-an-H2\"><a href=\"#This-is-an-H2\" class=\"headerlink\" title=\"This is an H2\"></a>This is an H2</h2><h3 id=\"字符效果和横线等\"><a href=\"#字符效果和横线等\" class=\"headerlink\" title=\"字符效果和横线等\"></a>字符效果和横线等</h3><hr>\n<p><del>删除线</del> <s>删除线（开启识别HTML标签时）</s><br><em>斜体字</em>      <em>斜体字</em><br><strong>粗体</strong>  <strong>粗体</strong><br><em><strong>粗斜体</strong></em> <em><strong>粗斜体</strong></em></p>\n<p>上标：X<sub>2</sub>，下标：O<sup>2</sup></p>\n<p><strong>缩写(同HTML的abbr标签)</strong></p>\n<blockquote>\n<p>即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启</p>\n</blockquote>\n<p>The <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.</p>\n<h3 id=\"引用-Blockquotes\"><a href=\"#引用-Blockquotes\" class=\"headerlink\" title=\"引用 Blockquotes\"></a>引用 Blockquotes</h3><blockquote>\n<p>引用文本 Blockquotes</p>\n</blockquote>\n<p>引用的行内混合 Blockquotes</p>\n<blockquote>\n<p>引用：如果想要插入空白换行<code>即&lt;br /&gt;标签</code>，在插入处先键入两个以上的空格然后回车即可，<a href=\"http://localhost/\">普通链接</a>。</p>\n</blockquote>\n<h3 id=\"锚点与链接-Links\"><a href=\"#锚点与链接-Links\" class=\"headerlink\" title=\"锚点与链接 Links\"></a>锚点与链接 Links</h3><p><a href=\"http://localhost/\">普通链接</a></p>\n<p><a href=\"http://localhost/\" title=\"普通链接带标题\">普通链接带标题</a></p>\n<p>直接链接：<a href=\"https://github.com/\">https://github.com</a></p>\n<p><a href=\"http://www.this-anchor-link.com/\">锚点链接</a> </p>\n<p><a href=\"mailto:test.test@gmail.com\">mailto:test.test@gmail.com</a></p>\n<p>GFM a-tail link @pandao  邮箱地址自动链接 <a href=\"mailto:&#x74;&#x65;&#x73;&#116;&#46;&#116;&#101;&#x73;&#116;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#x74;&#x65;&#x73;&#116;&#46;&#116;&#101;&#x73;&#116;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a>  <a href=\"mailto:&#119;&#119;&#119;&#64;&#118;&#x69;&#112;&#x2e;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;\">&#119;&#119;&#119;&#64;&#118;&#x69;&#112;&#x2e;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;</a></p>\n<blockquote>\n<p>@pandao</p>\n</blockquote>\n<h3 id=\"多语言代码高亮-Codes\"><a href=\"#多语言代码高亮-Codes\" class=\"headerlink\" title=\"多语言代码高亮 Codes\"></a>多语言代码高亮 Codes</h3><h4 id=\"行内代码-Inline-code\"><a href=\"#行内代码-Inline-code\" class=\"headerlink\" title=\"行内代码 Inline code\"></a>行内代码 Inline code</h4><p>执行命令：<code>npm install marked</code></p>\n<h4 id=\"缩进风格\"><a href=\"#缩进风格\" class=\"headerlink\" title=\"缩进风格\"></a>缩进风格</h4><p>即缩进四个空格，也做为实现类似 <code>&lt;pre&gt;</code> 预格式化文本 ( Preformatted Text ) 的功能。</p>\n<pre><code>&lt;?php\n    echo &quot;Hello world!&quot;;\n?&gt;\n</code></pre>\n<p>预格式化文本：</p>\n<pre><code>| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n</code></pre>\n<h4 id=\"JS代码\"><a href=\"#JS代码\" class=\"headerlink\" title=\"JS代码\"></a>JS代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello world!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> box = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> box.fn.init();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    box.prototype = box.fn = &#123;</span><br><span class=\"line\">        <span class=\"attr\">init</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;box.init()&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"attr\">add</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">&quot;add&quot;</span>, str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"attr\">remove</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">\t\t\talert(<span class=\"string\">&quot;remove&quot;</span>, str);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    box.fn.init.prototype = box.fn;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">window</span>.box =box;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> testBox = box();</span><br><span class=\"line\">testBox.add(<span class=\"string\">&quot;jQuery&quot;</span>).remove(<span class=\"string\">&quot;jQuery&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HTML-代码-HTML-codes\"><a href=\"#HTML-代码-HTML-codes\" class=\"headerlink\" title=\"HTML 代码 HTML codes\"></a>HTML 代码 HTML codes</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mate</span> <span class=\"attr\">charest</span>=<span class=\"string\">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;keywords&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;Editor.md, Markdown, Editor&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">body</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">14px</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#444</span>;<span class=\"attribute\">font-family</span>: <span class=\"string\">&quot;Microsoft Yahei&quot;</span>, Tahoma, <span class=\"string\">&quot;Hiragino Sans GB&quot;</span>, Arial;<span class=\"attribute\">background</span>:<span class=\"number\">#fff</span>;&#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">ul</span>&#123;<span class=\"attribute\">list-style</span>: none;&#125;</span></span><br><span class=\"line\"><span class=\"css\">            <span class=\"selector-tag\">img</span>&#123;<span class=\"attribute\">border</span>:none;<span class=\"attribute\">vertical-align</span>: middle;&#125;</span></span><br><span class=\"line\"><span class=\"css\">        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-xxl&quot;</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-green&quot;</span>&gt;</span>Plain text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片-Images\"><a href=\"#图片-Images\" class=\"headerlink\" title=\"图片 Images\"></a>图片 Images</h3><p>Image:</p>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/4.jpg\"></p>\n<blockquote>\n<p>Follow your heart.</p>\n</blockquote>\n<p><img src=\"https://pandao.github.io/editor.md/examples/images/8.jpg\"></p>\n<blockquote>\n<p>图为：厦门白城沙滩</p>\n</blockquote>\n<p>图片加链接 (Image + Link)：</p>\n<p><a href=\"https://pandao.github.io/editor.md/images/7.jpg\" title=\"李健首张专辑《似水流年》封面\"><img src=\"https://pandao.github.io/editor.md/examples/images/7.jpg\"></a></p>\n<blockquote>\n<p>图为：李健首张专辑《似水流年》封面</p>\n</blockquote>\n<hr>\n<h3 id=\"列表-Lists\"><a href=\"#列表-Lists\" class=\"headerlink\" title=\"列表 Lists\"></a>列表 Lists</h3><h4 id=\"无序列表（减号）Unordered-Lists\"><a href=\"#无序列表（减号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（减号）Unordered Lists (-)\"></a>无序列表（减号）Unordered Lists (-)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（星号）Unordered-Lists\"><a href=\"#无序列表（星号）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（星号）Unordered Lists (*)\"></a>无序列表（星号）Unordered Lists (*)</h4><ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n<h4 id=\"无序列表（加号和嵌套）Unordered-Lists\"><a href=\"#无序列表（加号和嵌套）Unordered-Lists\" class=\"headerlink\" title=\"无序列表（加号和嵌套）Unordered Lists (+)\"></a>无序列表（加号和嵌套）Unordered Lists (+)</h4><ul>\n<li>列表一</li>\n<li>列表二<ul>\n<li>列表二-1</li>\n<li>列表二-2</li>\n<li>列表二-3</li>\n</ul>\n</li>\n<li>列表三<ul>\n<li>列表一</li>\n<li>列表二</li>\n<li>列表三</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"有序列表-Ordered-Lists\"><a href=\"#有序列表-Ordered-Lists\" class=\"headerlink\" title=\"有序列表 Ordered Lists (-)\"></a>有序列表 Ordered Lists (-)</h4><ol>\n<li>第一行</li>\n<li>第二行</li>\n<li>第三行</li>\n</ol>\n<h4 id=\"GFM-task-list\"><a href=\"#GFM-task-list\" class=\"headerlink\" title=\"GFM task list\"></a>GFM task list</h4><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> GFM task list 1</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> GFM task list 2</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3<ul>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-1</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-2</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 3-3</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4<ul>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4-1</li>\n<li><input disabled=\"\" type=\"checkbox\"> GFM task list 4-2</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"绘制表格-Tables\"><a href=\"#绘制表格-Tables\" class=\"headerlink\" title=\"绘制表格 Tables\"></a>绘制表格 Tables</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th align=\"right\">价格</th>\n<th align=\"center\">数量</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>计算机</td>\n<td align=\"right\">$1600</td>\n<td align=\"center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td align=\"right\">$12</td>\n<td align=\"center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td align=\"right\">$1</td>\n<td align=\"center\">234</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>First Header</th>\n<th>Second Header</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n<tr>\n<td>Content Cell</td>\n<td>Content Cell</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Function name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>help()</code></td>\n<td>Display the help window.</td>\n</tr>\n<tr>\n<td><code>destroy()</code></td>\n<td><strong>Destroy your computer!</strong></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Left-Aligned</th>\n<th align=\"center\">Center Aligned</th>\n<th align=\"right\">Right Aligned</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">col 3 is</td>\n<td align=\"center\">some wordy text</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td align=\"left\">col 2 is</td>\n<td align=\"center\">centered</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td align=\"left\">zebra stripes</td>\n<td align=\"center\">are neat</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th align=\"right\">Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Computer</td>\n<td align=\"right\">$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td align=\"right\">$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td align=\"right\">$1</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"特殊符号-HTML-Entities-Codes\"><a href=\"#特殊符号-HTML-Entities-Codes\" class=\"headerlink\" title=\"特殊符号 HTML Entities Codes\"></a>特殊符号 HTML Entities Codes</h4><p>&copy; &amp;  &uml; &trade; &iexcl; &pound;<br>&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; </p>\n<p>X&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;</p>\n<p>18&ordm;C  &quot;  &apos;</p>\n<p>[========]</p>\n<h3 id=\"Emoji表情-smiley\"><a href=\"#Emoji表情-smiley\" class=\"headerlink\" title=\"Emoji表情 :smiley:\"></a>Emoji表情 :smiley:</h3><blockquote>\n<p>Blockquotes :star:</p>\n</blockquote>\n<h4 id=\"GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\"><a href=\"#GFM-task-lists-amp-Emoji-amp-fontAwesome-icon-emoji-amp-editormd-logo-emoji-editormd-logo-5x\" class=\"headerlink\" title=\"GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:\"></a>GFM task lists &amp; Emoji &amp; fontAwesome icon emoji &amp; editormd logo emoji :editormd-logo-5x:</h4><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> :smiley: @mentions, :smiley: #refs, <a href=\"\">links</a>, <strong>formatting</strong>, and <del>tags</del> supported :editormd-logo:;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> [ ] :smiley: this is a complete item :smiley:;</li>\n<li><input disabled=\"\" type=\"checkbox\"> []this is an incomplete item <a href=\"#\">test link</a> :fa-star: @pandao; </li>\n<li><input disabled=\"\" type=\"checkbox\"> [ ]this is an incomplete item :fa-star: :fa-gear:;<ul>\n<li><input disabled=\"\" type=\"checkbox\"> :smiley: this is an incomplete item <a href=\"#\">test link</a> :fa-star: :fa-gear:;</li>\n<li><input disabled=\"\" type=\"checkbox\"> :smiley: this is  :fa-star: :fa-gear: an incomplete item <a href=\"#\">test link</a>;</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"反斜杠-Escape\"><a href=\"#反斜杠-Escape\" class=\"headerlink\" title=\"反斜杠 Escape\"></a>反斜杠 Escape</h4><p>*literal asterisks*</p>\n<p>[========]</p>\n<h3 id=\"科学公式-TeX-KaTeX\"><a href=\"#科学公式-TeX-KaTeX\" class=\"headerlink\" title=\"科学公式 TeX(KaTeX)\"></a>科学公式 TeX(KaTeX)</h3><p>$$E=mc^2$$</p>\n<p>行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。</p>\n<p>$$x &gt; y$$</p>\n<p>$$(\\sqrt{3x-1}+(1+x)^2)$$</p>\n<p>$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$</p>\n<p>多行公式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\displaystyle</span><br><span class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k b\\_k \\right)^2</span><br><span class=\"line\">\\leq</span><br><span class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n a\\_k^2 \\right)</span><br><span class=\"line\">\\left( \\sum\\_&#123;k=1&#125;^n b\\_k^2 \\right)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\displaystyle </span><br><span class=\"line\">    \\frac&#123;1&#125;&#123;</span><br><span class=\"line\">        \\Bigl(\\sqrt&#123;\\phi \\sqrt&#123;5&#125;&#125;-\\phi\\Bigr) e^&#123;</span><br><span class=\"line\">        \\frac25 \\pi&#125;&#125; = 1+\\frac&#123;e^&#123;-2\\pi&#125;&#125; &#123;1+\\frac&#123;e^&#123;-4\\pi&#125;&#125; &#123;</span><br><span class=\"line\">        1+\\frac&#123;e^&#123;-6\\pi&#125;&#125;</span><br><span class=\"line\">        &#123;1+\\frac&#123;e^&#123;-8\\pi&#125;&#125;</span><br><span class=\"line\">         &#123;1+\\cdots&#125; &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(x) = \\int_&#123;-\\infty&#125;^\\infty</span><br><span class=\"line\">    \\hat f(\\xi)\\,e^&#123;2 \\pi i \\xi x&#125;</span><br><span class=\"line\">    \\,d\\xi</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"分页符-Page-break\"><a href=\"#分页符-Page-break\" class=\"headerlink\" title=\"分页符 Page break\"></a>分页符 Page break</h3><blockquote>\n<p>Print Test: Ctrl + P</p>\n</blockquote>\n<p>[========]</p>\n<h3 id=\"绘制流程图-Flowchart\"><a href=\"#绘制流程图-Flowchart\" class=\"headerlink\" title=\"绘制流程图 Flowchart\"></a>绘制流程图 Flowchart</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 用户登陆</span><br><span class=\"line\">op=&gt;operation: 登陆操作</span><br><span class=\"line\">cond=&gt;condition: 登陆成功 Yes or No?</span><br><span class=\"line\">e=&gt;end: 进入后台</span><br><span class=\"line\"></span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;e</span><br><span class=\"line\">cond(no)-&gt;op</span><br></pre></td></tr></table></figure>\n\n<p>[========]</p>\n<h3 id=\"绘制序列图-Sequence-Diagram\"><a href=\"#绘制序列图-Sequence-Diagram\" class=\"headerlink\" title=\"绘制序列图 Sequence Diagram\"></a>绘制序列图 Sequence Diagram</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Andrew-&gt;China: Says Hello </span><br><span class=\"line\">Note right of China: China thinks\\nabout it </span><br><span class=\"line\">China--&gt;Andrew: How are you? </span><br><span class=\"line\">Andrew-&gt;&gt;China: I am good thanks!</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h3>"},{"title":"Ubuntu 20.04 上安装 Apache Maven","date":"2021-06-02T15:31:55.000Z","_content":"```\n$ sudo apt install maven\n$ mvn -version\nApache Maven 3.6.3\nMaven home: /usr/share/maven\nJava version: 1.8.0_181, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8.0_181/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"5.8.0-50-generic\", arch: \"amd64\", family: \"unix\"\n\n```\n\n## Maven 阿里云(Aliyun)仓库\n修改 maven 根目录下的 conf 文件夹中的 settings.xml 文件，在 mirrors 节点上，添加内容如下：\n```html\n<mirrors>\n    <mirror>\n    <id>aliyunmaven</id>\n    <mirrorOf>*</mirrorOf>\n    <name>阿里云公共仓库</name>\n    <url>https://maven.aliyun.com/repository/public</url>\n    </mirror>\n</mirrors>\n```\n\n# maven 配置指南\n\n打开 maven 的配置文件（ windows 机器一般在 maven 安装目录的 conf/settings.xml ），在<mirrors></mirrors>标签中添加 mirror 子节点:\n```XML\n<mirror>\n<id>aliyunmaven</id>\n<mirrorOf>*</mirrorOf>\n<name>阿里云公共仓库</name>\n<url>https://maven.aliyun.com/repository/public</url>\n</mirror>\n```\n如果想使用其它代理仓库，可在<repositories></repositories>节点中加入对应的仓库使用地址。以使用 spring 代理仓为例：\n```XML\n<repository>\n  <id>spring</id>\n  <url>https://maven.aliyun.com/repository/spring</url>\n  <releases>\n    <enabled>true</enabled>\n  </releases>\n  <snapshots>\n    <enabled>true</enabled>\n  </snapshots>\n</repository>\n```\n在你的 pom.xml 文件<denpendencies></denpendencies>节点中加入你要引用的文件信息：\n```XML\n<dependency>\n  <groupId>[GROUP_ID]</groupId>\n  <artifactId>[ARTIFACT_ID]</artifactId>\n  <version>[VERSION]</version>\n</dependency>\n```\n执行拉取命令：\n```sh\nmvn install\n```","source":"_posts/Ubuntu-20-04-上安装-Apache-Maven.md","raw":"---\ntitle: Ubuntu 20.04 上安装 Apache Maven\ndate: 2021-06-02 23:31:55\ntags: \n- Ubuntu\n- Maven\n- Java\ncategories: \n- Java\n---\n```\n$ sudo apt install maven\n$ mvn -version\nApache Maven 3.6.3\nMaven home: /usr/share/maven\nJava version: 1.8.0_181, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8.0_181/jre\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"5.8.0-50-generic\", arch: \"amd64\", family: \"unix\"\n\n```\n\n## Maven 阿里云(Aliyun)仓库\n修改 maven 根目录下的 conf 文件夹中的 settings.xml 文件，在 mirrors 节点上，添加内容如下：\n```html\n<mirrors>\n    <mirror>\n    <id>aliyunmaven</id>\n    <mirrorOf>*</mirrorOf>\n    <name>阿里云公共仓库</name>\n    <url>https://maven.aliyun.com/repository/public</url>\n    </mirror>\n</mirrors>\n```\n\n# maven 配置指南\n\n打开 maven 的配置文件（ windows 机器一般在 maven 安装目录的 conf/settings.xml ），在<mirrors></mirrors>标签中添加 mirror 子节点:\n```XML\n<mirror>\n<id>aliyunmaven</id>\n<mirrorOf>*</mirrorOf>\n<name>阿里云公共仓库</name>\n<url>https://maven.aliyun.com/repository/public</url>\n</mirror>\n```\n如果想使用其它代理仓库，可在<repositories></repositories>节点中加入对应的仓库使用地址。以使用 spring 代理仓为例：\n```XML\n<repository>\n  <id>spring</id>\n  <url>https://maven.aliyun.com/repository/spring</url>\n  <releases>\n    <enabled>true</enabled>\n  </releases>\n  <snapshots>\n    <enabled>true</enabled>\n  </snapshots>\n</repository>\n```\n在你的 pom.xml 文件<denpendencies></denpendencies>节点中加入你要引用的文件信息：\n```XML\n<dependency>\n  <groupId>[GROUP_ID]</groupId>\n  <artifactId>[ARTIFACT_ID]</artifactId>\n  <version>[VERSION]</version>\n</dependency>\n```\n执行拉取命令：\n```sh\nmvn install\n```","slug":"Ubuntu-20-04-上安装-Apache-Maven","published":1,"updated":"2021-06-02T15:42:43.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevx000054ku2fdeh9c6y","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt install maven</span><br><span class=\"line\">$ mvn -version</span><br><span class=\"line\">Apache Maven 3.6.3</span><br><span class=\"line\">Maven home: /usr/share/maven</span><br><span class=\"line\">Java version: 1.8.0_181, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8.0_181/jre</span><br><span class=\"line\">Default locale: en_US, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;linux&quot;, version: &quot;5.8.0-50-generic&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Maven-阿里云-Aliyun-仓库\"><a href=\"#Maven-阿里云-Aliyun-仓库\" class=\"headerlink\" title=\"Maven 阿里云(Aliyun)仓库\"></a>Maven 阿里云(Aliyun)仓库</h2><p>修改 maven 根目录下的 conf 文件夹中的 settings.xml 文件，在 mirrors 节点上，添加内容如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyunmaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>阿里云公共仓库<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"maven-配置指南\"><a href=\"#maven-配置指南\" class=\"headerlink\" title=\"maven 配置指南\"></a>maven 配置指南</h1><p>打开 maven 的配置文件（ windows 机器一般在 maven 安装目录的 conf/settings.xml ），在<mirrors></mirrors>标签中添加 mirror 子节点:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyunmaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>阿里云公共仓库<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果想使用其它代理仓库，可在<repositories></repositories>节点中加入对应的仓库使用地址。以使用 spring 代理仓为例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在你的 pom.xml 文件<denpendencies></denpendencies>节点中加入你要引用的文件信息：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>[GROUP_ID]<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>[ARTIFACT_ID]<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>[VERSION]<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>执行拉取命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt install maven</span><br><span class=\"line\">$ mvn -version</span><br><span class=\"line\">Apache Maven 3.6.3</span><br><span class=\"line\">Maven home: /usr/share/maven</span><br><span class=\"line\">Java version: 1.8.0_181, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8.0_181/jre</span><br><span class=\"line\">Default locale: en_US, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;linux&quot;, version: &quot;5.8.0-50-generic&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Maven-阿里云-Aliyun-仓库\"><a href=\"#Maven-阿里云-Aliyun-仓库\" class=\"headerlink\" title=\"Maven 阿里云(Aliyun)仓库\"></a>Maven 阿里云(Aliyun)仓库</h2><p>修改 maven 根目录下的 conf 文件夹中的 settings.xml 文件，在 mirrors 节点上，添加内容如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyunmaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>阿里云公共仓库<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"maven-配置指南\"><a href=\"#maven-配置指南\" class=\"headerlink\" title=\"maven 配置指南\"></a>maven 配置指南</h1><p>打开 maven 的配置文件（ windows 机器一般在 maven 安装目录的 conf/settings.xml ），在<mirrors></mirrors>标签中添加 mirror 子节点:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyunmaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>阿里云公共仓库<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果想使用其它代理仓库，可在<repositories></repositories>节点中加入对应的仓库使用地址。以使用 spring 代理仓为例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>spring<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在你的 pom.xml 文件<denpendencies></denpendencies>节点中加入你要引用的文件信息：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>[GROUP_ID]<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>[ARTIFACT_ID]<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>[VERSION]<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>执行拉取命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install</span><br></pre></td></tr></table></figure>"},{"title":"QR CODE","date":"2021-06-01T15:23:21.000Z","_content":"\n## QR 简单了解\n\n### 1.存储大量信息\n\n传统的条形码只能处理 20 位左右的信息量，与此相比，`QR 码`可处理条形码的几十倍到几百倍的信息量。\n\n另外，`QR 码`还可以支持所有类型的数据。（如：数字、英文字母、日文字母、汉字、符号、二进制、控制码等）。一个 `QR 码`  最多可以处理 7089 字(仅用数字时)的巨大信息量。\n\n![QR 码 实例1](20210514-1.png)\n\n存储 300 位的英文字母和数字时，转换为 `QR 码`后只有这么小。\n\n### 2.在小空间打印\n\n`QR 码`使用纵向和横向两个方向处理数据，如果是相同的信息量，`QR 码`所占空间为条形码的十分之一左右。(还支持 Micro `QR 码`，可以在更小空间内处理数据。)\n\n### 3.有效表现各种字母\n\nQR 码是日本国产的二维码，因此非常适合处理日文字母和汉字。QR 码字集规格定义是按照日本标准“JIS 第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用 13 比特的数据处理，效率较高，与其他二维码相比，可以多存储 20%以上的信息。\n\n### 4.对变脏和破损的适应能力强\n\nQR 码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以`码字`为单位（组成内部数据的单位，在 QR 码的情况下，每 8 比特代表 1 码字。），最多可以纠错约 30%（根据变脏和破损程度的不同，也存在无法恢复的情况。）。\n\n### 5.任意方向读\n\nQR 码从 360° 任一方向均可快速读取。其奥秘就在于 QR 码中的 3 处定位图案，可以帮助 QR 码不受背景样式的影响，实现快速稳定的读取。\n\n![QR 码定位图案](20210514-2.png)\n\n### 6.支持数据合并\n\nQR 码可以将数据分割为多个编码，最多支持 16 个 QR 码。使用这一功能，还可以在狭长区域内打印 QR 码。另外，也可以把多个分割编码合并为单个数据。\n","source":"_posts/QR-CODE.md","raw":"---\ntitle: QR CODE\ndate: 2021-06-01 23:23:21\ntags: QR\ncategories: \n- OTHER\n---\n\n## QR 简单了解\n\n### 1.存储大量信息\n\n传统的条形码只能处理 20 位左右的信息量，与此相比，`QR 码`可处理条形码的几十倍到几百倍的信息量。\n\n另外，`QR 码`还可以支持所有类型的数据。（如：数字、英文字母、日文字母、汉字、符号、二进制、控制码等）。一个 `QR 码`  最多可以处理 7089 字(仅用数字时)的巨大信息量。\n\n![QR 码 实例1](20210514-1.png)\n\n存储 300 位的英文字母和数字时，转换为 `QR 码`后只有这么小。\n\n### 2.在小空间打印\n\n`QR 码`使用纵向和横向两个方向处理数据，如果是相同的信息量，`QR 码`所占空间为条形码的十分之一左右。(还支持 Micro `QR 码`，可以在更小空间内处理数据。)\n\n### 3.有效表现各种字母\n\nQR 码是日本国产的二维码，因此非常适合处理日文字母和汉字。QR 码字集规格定义是按照日本标准“JIS 第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用 13 比特的数据处理，效率较高，与其他二维码相比，可以多存储 20%以上的信息。\n\n### 4.对变脏和破损的适应能力强\n\nQR 码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以`码字`为单位（组成内部数据的单位，在 QR 码的情况下，每 8 比特代表 1 码字。），最多可以纠错约 30%（根据变脏和破损程度的不同，也存在无法恢复的情况。）。\n\n### 5.任意方向读\n\nQR 码从 360° 任一方向均可快速读取。其奥秘就在于 QR 码中的 3 处定位图案，可以帮助 QR 码不受背景样式的影响，实现快速稳定的读取。\n\n![QR 码定位图案](20210514-2.png)\n\n### 6.支持数据合并\n\nQR 码可以将数据分割为多个编码，最多支持 16 个 QR 码。使用这一功能，还可以在狭长区域内打印 QR 码。另外，也可以把多个分割编码合并为单个数据。\n","slug":"QR-CODE","published":1,"updated":"2021-06-02T15:43:51.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevx100064ku286gf9py9","content":"<h2 id=\"QR-简单了解\"><a href=\"#QR-简单了解\" class=\"headerlink\" title=\"QR 简单了解\"></a>QR 简单了解</h2><h3 id=\"1-存储大量信息\"><a href=\"#1-存储大量信息\" class=\"headerlink\" title=\"1.存储大量信息\"></a>1.存储大量信息</h3><p>传统的条形码只能处理 20 位左右的信息量，与此相比，<code>QR 码</code>可处理条形码的几十倍到几百倍的信息量。</p>\n<p>另外，<code>QR 码</code>还可以支持所有类型的数据。（如：数字、英文字母、日文字母、汉字、符号、二进制、控制码等）。一个 <code>QR 码</code>  最多可以处理 7089 字(仅用数字时)的巨大信息量。</p>\n<p><img src=\"/2021/06/01/QR-CODE/20210514-1.png\" alt=\"QR 码 实例1\"></p>\n<p>存储 300 位的英文字母和数字时，转换为 <code>QR 码</code>后只有这么小。</p>\n<h3 id=\"2-在小空间打印\"><a href=\"#2-在小空间打印\" class=\"headerlink\" title=\"2.在小空间打印\"></a>2.在小空间打印</h3><p><code>QR 码</code>使用纵向和横向两个方向处理数据，如果是相同的信息量，<code>QR 码</code>所占空间为条形码的十分之一左右。(还支持 Micro <code>QR 码</code>，可以在更小空间内处理数据。)</p>\n<h3 id=\"3-有效表现各种字母\"><a href=\"#3-有效表现各种字母\" class=\"headerlink\" title=\"3.有效表现各种字母\"></a>3.有效表现各种字母</h3><p>QR 码是日本国产的二维码，因此非常适合处理日文字母和汉字。QR 码字集规格定义是按照日本标准“JIS 第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用 13 比特的数据处理，效率较高，与其他二维码相比，可以多存储 20%以上的信息。</p>\n<h3 id=\"4-对变脏和破损的适应能力强\"><a href=\"#4-对变脏和破损的适应能力强\" class=\"headerlink\" title=\"4.对变脏和破损的适应能力强\"></a>4.对变脏和破损的适应能力强</h3><p>QR 码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以<code>码字</code>为单位（组成内部数据的单位，在 QR 码的情况下，每 8 比特代表 1 码字。），最多可以纠错约 30%（根据变脏和破损程度的不同，也存在无法恢复的情况。）。</p>\n<h3 id=\"5-任意方向读\"><a href=\"#5-任意方向读\" class=\"headerlink\" title=\"5.任意方向读\"></a>5.任意方向读</h3><p>QR 码从 360° 任一方向均可快速读取。其奥秘就在于 QR 码中的 3 处定位图案，可以帮助 QR 码不受背景样式的影响，实现快速稳定的读取。</p>\n<p><img src=\"/2021/06/01/QR-CODE/20210514-2.png\" alt=\"QR 码定位图案\"></p>\n<h3 id=\"6-支持数据合并\"><a href=\"#6-支持数据合并\" class=\"headerlink\" title=\"6.支持数据合并\"></a>6.支持数据合并</h3><p>QR 码可以将数据分割为多个编码，最多支持 16 个 QR 码。使用这一功能，还可以在狭长区域内打印 QR 码。另外，也可以把多个分割编码合并为单个数据。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"QR-简单了解\"><a href=\"#QR-简单了解\" class=\"headerlink\" title=\"QR 简单了解\"></a>QR 简单了解</h2><h3 id=\"1-存储大量信息\"><a href=\"#1-存储大量信息\" class=\"headerlink\" title=\"1.存储大量信息\"></a>1.存储大量信息</h3><p>传统的条形码只能处理 20 位左右的信息量，与此相比，<code>QR 码</code>可处理条形码的几十倍到几百倍的信息量。</p>\n<p>另外，<code>QR 码</code>还可以支持所有类型的数据。（如：数字、英文字母、日文字母、汉字、符号、二进制、控制码等）。一个 <code>QR 码</code>  最多可以处理 7089 字(仅用数字时)的巨大信息量。</p>\n<p><img src=\"/2021/06/01/QR-CODE/20210514-1.png\" alt=\"QR 码 实例1\"></p>\n<p>存储 300 位的英文字母和数字时，转换为 <code>QR 码</code>后只有这么小。</p>\n<h3 id=\"2-在小空间打印\"><a href=\"#2-在小空间打印\" class=\"headerlink\" title=\"2.在小空间打印\"></a>2.在小空间打印</h3><p><code>QR 码</code>使用纵向和横向两个方向处理数据，如果是相同的信息量，<code>QR 码</code>所占空间为条形码的十分之一左右。(还支持 Micro <code>QR 码</code>，可以在更小空间内处理数据。)</p>\n<h3 id=\"3-有效表现各种字母\"><a href=\"#3-有效表现各种字母\" class=\"headerlink\" title=\"3.有效表现各种字母\"></a>3.有效表现各种字母</h3><p>QR 码是日本国产的二维码，因此非常适合处理日文字母和汉字。QR 码字集规格定义是按照日本标准“JIS 第一级和第二级的汉字”制定的，因此在日语处理方面，每一个全角字母和汉字都用 13 比特的数据处理，效率较高，与其他二维码相比，可以多存储 20%以上的信息。</p>\n<h3 id=\"4-对变脏和破损的适应能力强\"><a href=\"#4-对变脏和破损的适应能力强\" class=\"headerlink\" title=\"4.对变脏和破损的适应能力强\"></a>4.对变脏和破损的适应能力强</h3><p>QR 码具备“纠错功能”，即使部分编码变脏或破损，也可以恢复数据。数据恢复以<code>码字</code>为单位（组成内部数据的单位，在 QR 码的情况下，每 8 比特代表 1 码字。），最多可以纠错约 30%（根据变脏和破损程度的不同，也存在无法恢复的情况。）。</p>\n<h3 id=\"5-任意方向读\"><a href=\"#5-任意方向读\" class=\"headerlink\" title=\"5.任意方向读\"></a>5.任意方向读</h3><p>QR 码从 360° 任一方向均可快速读取。其奥秘就在于 QR 码中的 3 处定位图案，可以帮助 QR 码不受背景样式的影响，实现快速稳定的读取。</p>\n<p><img src=\"/2021/06/01/QR-CODE/20210514-2.png\" alt=\"QR 码定位图案\"></p>\n<h3 id=\"6-支持数据合并\"><a href=\"#6-支持数据合并\" class=\"headerlink\" title=\"6.支持数据合并\"></a>6.支持数据合并</h3><p>QR 码可以将数据分割为多个编码，最多支持 16 个 QR 码。使用这一功能，还可以在狭长区域内打印 QR 码。另外，也可以把多个分割编码合并为单个数据。</p>\n"},{"title":"ejs 基础","date":"2021-06-05T14:47:21.000Z","_content":"\n## 标签含义\n+ `<% `'脚本' 标签，用于流程控制，无输出。\n+ `<%_` 删除其前面的空格符\n+ `<%=` 输出数据到模板（输出是转义 HTML 标签）\n+ `<%-` 输出非转义的数据到模板\n+ `<%#` 注释标签，不执行、不输出内容\n+ `<%%` 输出字符串 '<%'\n+ `%> ` 一般结束标签\n+ `-%>` 删除紧随其后的换行符\n+ `_%>` 将结束标签后面的空格符删除","source":"_posts/ejs-基础.md","raw":"---\ntitle: ejs 基础\ndate: 2021-06-05 22:47:21\ntags: \n- ejs\n- JavaScript\ncategories: JavaScript\n---\n\n## 标签含义\n+ `<% `'脚本' 标签，用于流程控制，无输出。\n+ `<%_` 删除其前面的空格符\n+ `<%=` 输出数据到模板（输出是转义 HTML 标签）\n+ `<%-` 输出非转义的数据到模板\n+ `<%#` 注释标签，不执行、不输出内容\n+ `<%%` 输出字符串 '<%'\n+ `%> ` 一般结束标签\n+ `-%>` 删除紧随其后的换行符\n+ `_%>` 将结束标签后面的空格符删除","slug":"ejs-基础","published":1,"updated":"2021-06-05T14:49:34.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevx200094ku26jpi44zr","content":"<h2 id=\"标签含义\"><a href=\"#标签含义\" class=\"headerlink\" title=\"标签含义\"></a>标签含义</h2><ul>\n<li><code>&lt;% </code>‘脚本’ 标签，用于流程控制，无输出。</li>\n<li><code>&lt;%_</code> 删除其前面的空格符</li>\n<li><code>&lt;%=</code> 输出数据到模板（输出是转义 HTML 标签）</li>\n<li><code>&lt;%-</code> 输出非转义的数据到模板</li>\n<li><code>&lt;%#</code> 注释标签，不执行、不输出内容</li>\n<li><code>&lt;%%</code> 输出字符串 ‘&lt;%’</li>\n<li><code>%&gt; </code> 一般结束标签</li>\n<li><code>-%&gt;</code> 删除紧随其后的换行符</li>\n<li><code>_%&gt;</code> 将结束标签后面的空格符删除</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"标签含义\"><a href=\"#标签含义\" class=\"headerlink\" title=\"标签含义\"></a>标签含义</h2><ul>\n<li><code>&lt;% </code>‘脚本’ 标签，用于流程控制，无输出。</li>\n<li><code>&lt;%_</code> 删除其前面的空格符</li>\n<li><code>&lt;%=</code> 输出数据到模板（输出是转义 HTML 标签）</li>\n<li><code>&lt;%-</code> 输出非转义的数据到模板</li>\n<li><code>&lt;%#</code> 注释标签，不执行、不输出内容</li>\n<li><code>&lt;%%</code> 输出字符串 ‘&lt;%’</li>\n<li><code>%&gt; </code> 一般结束标签</li>\n<li><code>-%&gt;</code> 删除紧随其后的换行符</li>\n<li><code>_%&gt;</code> 将结束标签后面的空格符删除</li>\n</ul>\n"},{"title":"Ubuntu 20.04 上安装 Jdk","date":"2021-06-02T15:41:26.000Z","_content":"# install java jdk\n\n1. download jdk8 from https://www.jdkdownload.com/\n2. unzip and move to `/usr/java`\n\n    sudo mkdir /usr/java/\n    sudo tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/java/\n\n3. Configure jdk environment variables\n    + backup  \n        ```\n        cp /etc/profile /etc/profile.bak\n        ```\n    + edit `/etc/profile`\n        ```\n        export JAVA_HOME=/usr/java/jdk1.8.0_181\n        export JRE_HOME=${JAVA_HOME}/jre\n        export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\n        export PATH=${JAVA_HOME}/bin:$PATH\n        ```\n    + `/etc/profile` takes effect\n        ```\n        source /etc/profile\n        ```\n    + Q: `source /etc/profile` failed  \n        edit `/etc/bash.bashrc` ,add JAVA_HOME etc.\n        Or  edit `/etc/bash.bashrc`, add `source /etc/profile` \n        Or  edit ` ~/.bashrc`, add `source /etc/profile` \n4. test java env \n```\n$ java -version\noutpuy: \njava version \"1.8.0_181\"\nJava(TM) SE Runtime Environment (build 1.8.0_181-b13)\nJava HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)\n```\n","source":"_posts/Ubuntu-20-04-上安装-Jdk.md","raw":"---\ntitle: Ubuntu 20.04 上安装 Jdk\ndate: 2021-06-02 23:41:26\ntags:\n- Java\n- Ubuntu\ncategories:\n- Java\n---\n# install java jdk\n\n1. download jdk8 from https://www.jdkdownload.com/\n2. unzip and move to `/usr/java`\n\n    sudo mkdir /usr/java/\n    sudo tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/java/\n\n3. Configure jdk environment variables\n    + backup  \n        ```\n        cp /etc/profile /etc/profile.bak\n        ```\n    + edit `/etc/profile`\n        ```\n        export JAVA_HOME=/usr/java/jdk1.8.0_181\n        export JRE_HOME=${JAVA_HOME}/jre\n        export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\n        export PATH=${JAVA_HOME}/bin:$PATH\n        ```\n    + `/etc/profile` takes effect\n        ```\n        source /etc/profile\n        ```\n    + Q: `source /etc/profile` failed  \n        edit `/etc/bash.bashrc` ,add JAVA_HOME etc.\n        Or  edit `/etc/bash.bashrc`, add `source /etc/profile` \n        Or  edit ` ~/.bashrc`, add `source /etc/profile` \n4. test java env \n```\n$ java -version\noutpuy: \njava version \"1.8.0_181\"\nJava(TM) SE Runtime Environment (build 1.8.0_181-b13)\nJava HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)\n```\n","slug":"Ubuntu-20-04-上安装-Jdk","published":1,"updated":"2021-06-02T15:42:19.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevx3000a4ku29tgy3tcl","content":"<h1 id=\"install-java-jdk\"><a href=\"#install-java-jdk\" class=\"headerlink\" title=\"install java jdk\"></a>install java jdk</h1><ol>\n<li><p>download jdk8 from <a href=\"https://www.jdkdownload.com/\">https://www.jdkdownload.com/</a></p>\n</li>\n<li><p>unzip and move to <code>/usr/java</code></p>\n<p> sudo mkdir /usr/java/<br> sudo tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/java/</p>\n</li>\n<li><p>Configure jdk environment variables</p>\n<ul>\n<li>backup    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/profile /etc/profile.bak</span><br></pre></td></tr></table></figure></li>\n<li>edit <code>/etc/profile</code>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.8.0_181</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li>\n<li><code>/etc/profile</code> takes effect  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></li>\n<li>Q: <code>source /etc/profile</code> failed<br>  edit <code>/etc/bash.bashrc</code> ,add JAVA_HOME etc.<br>  Or  edit <code>/etc/bash.bashrc</code>, add <code>source /etc/profile</code><br>  Or  edit <code> ~/.bashrc</code>, add <code>source /etc/profile</code> </li>\n</ul>\n</li>\n<li><p>test java env </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java -version</span><br><span class=\"line\">outpuy: </span><br><span class=\"line\">java version &quot;1.8.0_181&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"install-java-jdk\"><a href=\"#install-java-jdk\" class=\"headerlink\" title=\"install java jdk\"></a>install java jdk</h1><ol>\n<li><p>download jdk8 from <a href=\"https://www.jdkdownload.com/\">https://www.jdkdownload.com/</a></p>\n</li>\n<li><p>unzip and move to <code>/usr/java</code></p>\n<p> sudo mkdir /usr/java/<br> sudo tar -zxvf jdk-8u171-linux-x64.tar.gz -C /usr/java/</p>\n</li>\n<li><p>Configure jdk environment variables</p>\n<ul>\n<li>backup    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/profile /etc/profile.bak</span><br></pre></td></tr></table></figure></li>\n<li>edit <code>/etc/profile</code>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/java/jdk1.8.0_181</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li>\n<li><code>/etc/profile</code> takes effect  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></li>\n<li>Q: <code>source /etc/profile</code> failed<br>  edit <code>/etc/bash.bashrc</code> ,add JAVA_HOME etc.<br>  Or  edit <code>/etc/bash.bashrc</code>, add <code>source /etc/profile</code><br>  Or  edit <code> ~/.bashrc</code>, add <code>source /etc/profile</code> </li>\n</ul>\n</li>\n<li><p>test java env </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java -version</span><br><span class=\"line\">outpuy: </span><br><span class=\"line\">java version &quot;1.8.0_181&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_181-b13)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags: hexo\ncategories: \n- OTHER\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-05-30T15:44:48.853Z","updated":"2021-06-02T15:44:15.421Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevx5000e4ku23feae7tl","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"hexo themes 下提交不到github","date":"2021-06-07T11:15:17.000Z","_content":"\n## 原因\n因为`themes/light`也是从仓库里拉取下来的 他关联到了作者的`git`仓库 所以提交不上去\n\n## 处理\n\n从暂存区删除该文件夹\n    bash git rm --cache themes/主题文件名  ","source":"_posts/hexo-themes-下提交不到github.md","raw":"---\ntitle: hexo themes 下提交不到github\ndate: 2021-06-07 19:15:17\ntags: hexo\ncategories: hexo\n---\n\n## 原因\n因为`themes/light`也是从仓库里拉取下来的 他关联到了作者的`git`仓库 所以提交不上去\n\n## 处理\n\n从暂存区删除该文件夹\n    bash git rm --cache themes/主题文件名  ","slug":"hexo-themes-下提交不到github","published":1,"updated":"2021-06-07T11:17:58.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevx6000h4ku21blc8w3d","content":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>因为<code>themes/light</code>也是从仓库里拉取下来的 他关联到了作者的<code>git</code>仓库 所以提交不上去</p>\n<h2 id=\"处理\"><a href=\"#处理\" class=\"headerlink\" title=\"处理\"></a>处理</h2><p>从暂存区删除该文件夹<br>    bash git rm –cache themes/主题文件名  </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><p>因为<code>themes/light</code>也是从仓库里拉取下来的 他关联到了作者的<code>git</code>仓库 所以提交不上去</p>\n<h2 id=\"处理\"><a href=\"#处理\" class=\"headerlink\" title=\"处理\"></a>处理</h2><p>从暂存区删除该文件夹<br>    bash git rm –cache themes/主题文件名  </p>\n"},{"title":"hexo 添加目录","date":"2021-06-05T14:02:02.000Z","_content":" \n","source":"_posts/hexo-添加目录.md","raw":"---\ntitle: hexo 添加目录\ndate: 2021-06-05 22:02:02\ntags: hexo\ncategories: hexo\n--- \n","slug":"hexo-添加目录","published":1,"updated":"2021-06-05T14:02:26.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevxg001i4ku20oda47d6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Rust 基础","date":"2021-04-15T15:24:08.000Z","_content":"# Hello,World!\n## main function\n\n```rust\nfn main() {\n\n}\n```\n\n+ a function named `main` that has no parameters and returns nothing\n\n+ If there were parameters, they would go inside the parentheses\n\n+ `rustfmt` to format your code ; The Rust team has included this tool with the standard Rust distribution\n\n+ Rust style is to indent with **four spaces**, not a tab\n\n+ `println!` calls a Rust macro\n\nFor now, you just need to know that using a `!` means that you’re calling a `macro` instead of a normal `function`.\n\n## Compiling and Running Are Separate Steps\n\n1. compile\n\n    rustc main.rs\n\n    > similar to gcc or clang   \n    > After compiling successfully, Rust outputs a binary executable\n2. run\n\n    ./main  # linux\n\n## Rust language \n\nRust is an *ahead-of-time* compiled language, \nmeaning you can compile a program and give the executable to someone else, and they can *run it even without having Rust installed*\n\n## Hello,Cargo!\n\nCargo is Rust’s build system and package manager.\n\n    cargo --version\n\n## Creating a Project with Cargo\n\n    cargo new hello_cargo\n\nIt has also initialized a new Git repository along with a `.gitignore` file.\n\n# Cargo.toml\n```toml\n[package]\nname = \"hello-rust\"\nversion = \"0.1.0\"\nauthors = [\"aeewz\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n```\n\n<!-- 20210414 BEGIN -->\n\n`[package]`  \nthe following statements are configuring a package\n\n`edition = \"2018\"`  \nthe configuration information Cargo needs to `compile` your program:\n\n- the edition of Rust to use\n\n`[dependencies]`  \nlist any of your project’s dependencies  \n`packages` of code are referred to as `crates`\n\n## Building and Running a Cargo Project\n\n- We can build a project using `cargo build`.\n- We can build and run a project in one step using `cargo run`.\n- We can build a project without producing a binary to check for errors using `cargo check`.\n- Instead of saving the result of the build in the same directory as our code, Cargo stores it in the `target/debug` directory.\n\n## Building for Release\nWhen your project is finally ready for release, you can  \nuse `cargo build --release` to compile it with optimizations. \n\nThis command will create an executable in `target/release` instead of `target/debug`. \n\n## ~ 20210415 SUMMARY \nyou’ve learned how to:\n\n+ Install the latest stable version of Rust using rustup\n+ Update to a newer Rust version\n+ Open locally installed documentation\n+ Write and run a “Hello, world!” program using rustc directly\n+ Create and run a new project using the conventions of Cargo\n\n","source":"_posts/rust-基础.md","raw":"---\ntitle: Rust 基础\ndate: 2021-04-15 23:24:08\ntags: Rust \ncategories: Rust\n---\n# Hello,World!\n## main function\n\n```rust\nfn main() {\n\n}\n```\n\n+ a function named `main` that has no parameters and returns nothing\n\n+ If there were parameters, they would go inside the parentheses\n\n+ `rustfmt` to format your code ; The Rust team has included this tool with the standard Rust distribution\n\n+ Rust style is to indent with **four spaces**, not a tab\n\n+ `println!` calls a Rust macro\n\nFor now, you just need to know that using a `!` means that you’re calling a `macro` instead of a normal `function`.\n\n## Compiling and Running Are Separate Steps\n\n1. compile\n\n    rustc main.rs\n\n    > similar to gcc or clang   \n    > After compiling successfully, Rust outputs a binary executable\n2. run\n\n    ./main  # linux\n\n## Rust language \n\nRust is an *ahead-of-time* compiled language, \nmeaning you can compile a program and give the executable to someone else, and they can *run it even without having Rust installed*\n\n## Hello,Cargo!\n\nCargo is Rust’s build system and package manager.\n\n    cargo --version\n\n## Creating a Project with Cargo\n\n    cargo new hello_cargo\n\nIt has also initialized a new Git repository along with a `.gitignore` file.\n\n# Cargo.toml\n```toml\n[package]\nname = \"hello-rust\"\nversion = \"0.1.0\"\nauthors = [\"aeewz\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n```\n\n<!-- 20210414 BEGIN -->\n\n`[package]`  \nthe following statements are configuring a package\n\n`edition = \"2018\"`  \nthe configuration information Cargo needs to `compile` your program:\n\n- the edition of Rust to use\n\n`[dependencies]`  \nlist any of your project’s dependencies  \n`packages` of code are referred to as `crates`\n\n## Building and Running a Cargo Project\n\n- We can build a project using `cargo build`.\n- We can build and run a project in one step using `cargo run`.\n- We can build a project without producing a binary to check for errors using `cargo check`.\n- Instead of saving the result of the build in the same directory as our code, Cargo stores it in the `target/debug` directory.\n\n## Building for Release\nWhen your project is finally ready for release, you can  \nuse `cargo build --release` to compile it with optimizations. \n\nThis command will create an executable in `target/release` instead of `target/debug`. \n\n## ~ 20210415 SUMMARY \nyou’ve learned how to:\n\n+ Install the latest stable version of Rust using rustup\n+ Update to a newer Rust version\n+ Open locally installed documentation\n+ Write and run a “Hello, world!” program using rustc directly\n+ Create and run a new project using the conventions of Cargo\n\n","slug":"rust-基础","published":1,"updated":"2021-06-02T15:31:00.719Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevxg001j4ku2262ih4yk","content":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello,World!\"></a>Hello,World!</h1><h2 id=\"main-function\"><a href=\"#main-function\" class=\"headerlink\" title=\"main function\"></a>main function</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>a function named <code>main</code> that has no parameters and returns nothing</p>\n</li>\n<li><p>If there were parameters, they would go inside the parentheses</p>\n</li>\n<li><p><code>rustfmt</code> to format your code ; The Rust team has included this tool with the standard Rust distribution</p>\n</li>\n<li><p>Rust style is to indent with <strong>four spaces</strong>, not a tab</p>\n</li>\n<li><p><code>println!</code> calls a Rust macro</p>\n</li>\n</ul>\n<p>For now, you just need to know that using a <code>!</code> means that you’re calling a <code>macro</code> instead of a normal <code>function</code>.</p>\n<h2 id=\"Compiling-and-Running-Are-Separate-Steps\"><a href=\"#Compiling-and-Running-Are-Separate-Steps\" class=\"headerlink\" title=\"Compiling and Running Are Separate Steps\"></a>Compiling and Running Are Separate Steps</h2><ol>\n<li><p>compile</p>\n<p> rustc main.rs</p>\n<blockquote>\n<p>similar to gcc or clang<br>After compiling successfully, Rust outputs a binary executable</p>\n</blockquote>\n</li>\n<li><p>run</p>\n<p> ./main  # linux</p>\n</li>\n</ol>\n<h2 id=\"Rust-language\"><a href=\"#Rust-language\" class=\"headerlink\" title=\"Rust language\"></a>Rust language</h2><p>Rust is an <em>ahead-of-time</em> compiled language,<br>meaning you can compile a program and give the executable to someone else, and they can <em>run it even without having Rust installed</em></p>\n<h2 id=\"Hello-Cargo\"><a href=\"#Hello-Cargo\" class=\"headerlink\" title=\"Hello,Cargo!\"></a>Hello,Cargo!</h2><p>Cargo is Rust’s build system and package manager.</p>\n<pre><code>cargo --version\n</code></pre>\n<h2 id=\"Creating-a-Project-with-Cargo\"><a href=\"#Creating-a-Project-with-Cargo\" class=\"headerlink\" title=\"Creating a Project with Cargo\"></a>Creating a Project with Cargo</h2><pre><code>cargo new hello_cargo\n</code></pre>\n<p>It has also initialized a new Git repository along with a <code>.gitignore</code> file.</p>\n<h1 id=\"Cargo-toml\"><a href=\"#Cargo-toml\" class=\"headerlink\" title=\"Cargo.toml\"></a>Cargo.toml</h1><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[package]</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = <span class=\"string\">&quot;hello-rust&quot;</span></span><br><span class=\"line\"><span class=\"attr\">version</span> = <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">authors</span> = [<span class=\"string\">&quot;aeewz&quot;</span>]</span><br><span class=\"line\"><span class=\"attr\">edition</span> = <span class=\"string\">&quot;2018&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[dependencies]</span></span><br></pre></td></tr></table></figure>\n\n<!-- 20210414 BEGIN -->\n\n<p><code>[package]</code><br>the following statements are configuring a package</p>\n<p><code>edition = &quot;2018&quot;</code><br>the configuration information Cargo needs to <code>compile</code> your program:</p>\n<ul>\n<li>the edition of Rust to use</li>\n</ul>\n<p><code>[dependencies]</code><br>list any of your project’s dependencies<br><code>packages</code> of code are referred to as <code>crates</code></p>\n<h2 id=\"Building-and-Running-a-Cargo-Project\"><a href=\"#Building-and-Running-a-Cargo-Project\" class=\"headerlink\" title=\"Building and Running a Cargo Project\"></a>Building and Running a Cargo Project</h2><ul>\n<li>We can build a project using <code>cargo build</code>.</li>\n<li>We can build and run a project in one step using <code>cargo run</code>.</li>\n<li>We can build a project without producing a binary to check for errors using <code>cargo check</code>.</li>\n<li>Instead of saving the result of the build in the same directory as our code, Cargo stores it in the <code>target/debug</code> directory.</li>\n</ul>\n<h2 id=\"Building-for-Release\"><a href=\"#Building-for-Release\" class=\"headerlink\" title=\"Building for Release\"></a>Building for Release</h2><p>When your project is finally ready for release, you can<br>use <code>cargo build --release</code> to compile it with optimizations. </p>\n<p>This command will create an executable in <code>target/release</code> instead of <code>target/debug</code>. </p>\n<h2 id=\"20210415-SUMMARY\"><a href=\"#20210415-SUMMARY\" class=\"headerlink\" title=\"~ 20210415 SUMMARY\"></a>~ 20210415 SUMMARY</h2><p>you’ve learned how to:</p>\n<ul>\n<li>Install the latest stable version of Rust using rustup</li>\n<li>Update to a newer Rust version</li>\n<li>Open locally installed documentation</li>\n<li>Write and run a “Hello, world!” program using rustc directly</li>\n<li>Create and run a new project using the conventions of Cargo</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello,World!\"></a>Hello,World!</h1><h2 id=\"main-function\"><a href=\"#main-function\" class=\"headerlink\" title=\"main function\"></a>main function</h2><figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fn</span> <span class=\"title\">main</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>a function named <code>main</code> that has no parameters and returns nothing</p>\n</li>\n<li><p>If there were parameters, they would go inside the parentheses</p>\n</li>\n<li><p><code>rustfmt</code> to format your code ; The Rust team has included this tool with the standard Rust distribution</p>\n</li>\n<li><p>Rust style is to indent with <strong>four spaces</strong>, not a tab</p>\n</li>\n<li><p><code>println!</code> calls a Rust macro</p>\n</li>\n</ul>\n<p>For now, you just need to know that using a <code>!</code> means that you’re calling a <code>macro</code> instead of a normal <code>function</code>.</p>\n<h2 id=\"Compiling-and-Running-Are-Separate-Steps\"><a href=\"#Compiling-and-Running-Are-Separate-Steps\" class=\"headerlink\" title=\"Compiling and Running Are Separate Steps\"></a>Compiling and Running Are Separate Steps</h2><ol>\n<li><p>compile</p>\n<p> rustc main.rs</p>\n<blockquote>\n<p>similar to gcc or clang<br>After compiling successfully, Rust outputs a binary executable</p>\n</blockquote>\n</li>\n<li><p>run</p>\n<p> ./main  # linux</p>\n</li>\n</ol>\n<h2 id=\"Rust-language\"><a href=\"#Rust-language\" class=\"headerlink\" title=\"Rust language\"></a>Rust language</h2><p>Rust is an <em>ahead-of-time</em> compiled language,<br>meaning you can compile a program and give the executable to someone else, and they can <em>run it even without having Rust installed</em></p>\n<h2 id=\"Hello-Cargo\"><a href=\"#Hello-Cargo\" class=\"headerlink\" title=\"Hello,Cargo!\"></a>Hello,Cargo!</h2><p>Cargo is Rust’s build system and package manager.</p>\n<pre><code>cargo --version\n</code></pre>\n<h2 id=\"Creating-a-Project-with-Cargo\"><a href=\"#Creating-a-Project-with-Cargo\" class=\"headerlink\" title=\"Creating a Project with Cargo\"></a>Creating a Project with Cargo</h2><pre><code>cargo new hello_cargo\n</code></pre>\n<p>It has also initialized a new Git repository along with a <code>.gitignore</code> file.</p>\n<h1 id=\"Cargo-toml\"><a href=\"#Cargo-toml\" class=\"headerlink\" title=\"Cargo.toml\"></a>Cargo.toml</h1><figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[package]</span></span><br><span class=\"line\"><span class=\"attr\">name</span> = <span class=\"string\">&quot;hello-rust&quot;</span></span><br><span class=\"line\"><span class=\"attr\">version</span> = <span class=\"string\">&quot;0.1.0&quot;</span></span><br><span class=\"line\"><span class=\"attr\">authors</span> = [<span class=\"string\">&quot;aeewz&quot;</span>]</span><br><span class=\"line\"><span class=\"attr\">edition</span> = <span class=\"string\">&quot;2018&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[dependencies]</span></span><br></pre></td></tr></table></figure>\n\n<!-- 20210414 BEGIN -->\n\n<p><code>[package]</code><br>the following statements are configuring a package</p>\n<p><code>edition = &quot;2018&quot;</code><br>the configuration information Cargo needs to <code>compile</code> your program:</p>\n<ul>\n<li>the edition of Rust to use</li>\n</ul>\n<p><code>[dependencies]</code><br>list any of your project’s dependencies<br><code>packages</code> of code are referred to as <code>crates</code></p>\n<h2 id=\"Building-and-Running-a-Cargo-Project\"><a href=\"#Building-and-Running-a-Cargo-Project\" class=\"headerlink\" title=\"Building and Running a Cargo Project\"></a>Building and Running a Cargo Project</h2><ul>\n<li>We can build a project using <code>cargo build</code>.</li>\n<li>We can build and run a project in one step using <code>cargo run</code>.</li>\n<li>We can build a project without producing a binary to check for errors using <code>cargo check</code>.</li>\n<li>Instead of saving the result of the build in the same directory as our code, Cargo stores it in the <code>target/debug</code> directory.</li>\n</ul>\n<h2 id=\"Building-for-Release\"><a href=\"#Building-for-Release\" class=\"headerlink\" title=\"Building for Release\"></a>Building for Release</h2><p>When your project is finally ready for release, you can<br>use <code>cargo build --release</code> to compile it with optimizations. </p>\n<p>This command will create an executable in <code>target/release</code> instead of <code>target/debug</code>. </p>\n<h2 id=\"20210415-SUMMARY\"><a href=\"#20210415-SUMMARY\" class=\"headerlink\" title=\"~ 20210415 SUMMARY\"></a>~ 20210415 SUMMARY</h2><p>you’ve learned how to:</p>\n<ul>\n<li>Install the latest stable version of Rust using rustup</li>\n<li>Update to a newer Rust version</li>\n<li>Open locally installed documentation</li>\n<li>Write and run a “Hello, world!” program using rustc directly</li>\n<li>Create and run a new project using the conventions of Cargo</li>\n</ul>\n"},{"title":"JavaScript 学习","date":"2021-06-01T15:36:51.000Z","_content":"## 使用 vscode \n学习的几个 vscode 设置\n\n1. 如何运行js代码 ？\n    \n    新建js脚本，使用 `run` 插件即可(其实是运行的nodejs代码)  \n    + 如果要测试浏览器脚本，还是需要浏览器的配合  \n    推荐插件 `live Server` 实时预览html界面  \n    ![live Server](https://ritwickdey.gallerycdn.vsassets.io/extensions/ritwickdey/liveserver/5.6.1/1555497731217/Microsoft.VisualStudio.Services.Icons.Default) [![VSCode Marketplace](https://img.shields.io/vscode-marketplace/v/ritwickdey.LiveServer.svg?style=flat-square&label=vscode%20marketplace)](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)  \n\n    + 如果需要调试就需要安装 debugger for edge/chrome/firefox etc.\n\n2. vscode 设置\n    在使用推荐模板在之后，在模板内输入自动提示就消失了\n\n        \"editor.quickSuggestions\": true\n        \"editor.suggest.snippetsPreventQuickSuggestions\": false","source":"_posts/javascript-学习.md","raw":"---\ntitle: JavaScript 学习\ndate: 2021-06-01 23:36:51\ntags: \n- JavaScript\n- vscode\ncategories: JavaScript\n---\n## 使用 vscode \n学习的几个 vscode 设置\n\n1. 如何运行js代码 ？\n    \n    新建js脚本，使用 `run` 插件即可(其实是运行的nodejs代码)  \n    + 如果要测试浏览器脚本，还是需要浏览器的配合  \n    推荐插件 `live Server` 实时预览html界面  \n    ![live Server](https://ritwickdey.gallerycdn.vsassets.io/extensions/ritwickdey/liveserver/5.6.1/1555497731217/Microsoft.VisualStudio.Services.Icons.Default) [![VSCode Marketplace](https://img.shields.io/vscode-marketplace/v/ritwickdey.LiveServer.svg?style=flat-square&label=vscode%20marketplace)](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer)  \n\n    + 如果需要调试就需要安装 debugger for edge/chrome/firefox etc.\n\n2. vscode 设置\n    在使用推荐模板在之后，在模板内输入自动提示就消失了\n\n        \"editor.quickSuggestions\": true\n        \"editor.suggest.snippetsPreventQuickSuggestions\": false","slug":"javascript-学习","published":1,"updated":"2021-06-05T14:48:30.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevxh001l4ku2ajb36qv4","content":"<h2 id=\"使用-vscode\"><a href=\"#使用-vscode\" class=\"headerlink\" title=\"使用 vscode\"></a>使用 vscode</h2><p>学习的几个 vscode 设置</p>\n<ol>\n<li><p>如何运行js代码 ？</p>\n<p> 新建js脚本，使用 <code>run</code> 插件即可(其实是运行的nodejs代码)  </p>\n<ul>\n<li><p>如果要测试浏览器脚本，还是需要浏览器的配合<br>推荐插件 <code>live Server</code> 实时预览html界面<br><img src=\"https://ritwickdey.gallerycdn.vsassets.io/extensions/ritwickdey/liveserver/5.6.1/1555497731217/Microsoft.VisualStudio.Services.Icons.Default\" alt=\"live Server\"> <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\"><img src=\"https://img.shields.io/vscode-marketplace/v/ritwickdey.LiveServer.svg?style=flat-square&label=vscode%20marketplace\" alt=\"VSCode Marketplace\"></a>  </p>\n</li>\n<li><p>如果需要调试就需要安装 debugger for edge/chrome/firefox etc.</p>\n</li>\n</ul>\n</li>\n<li><p>vscode 设置<br> 在使用推荐模板在之后，在模板内输入自动提示就消失了</p>\n<pre><code> &quot;editor.quickSuggestions&quot;: true\n &quot;editor.suggest.snippetsPreventQuickSuggestions&quot;: false\n</code></pre>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用-vscode\"><a href=\"#使用-vscode\" class=\"headerlink\" title=\"使用 vscode\"></a>使用 vscode</h2><p>学习的几个 vscode 设置</p>\n<ol>\n<li><p>如何运行js代码 ？</p>\n<p> 新建js脚本，使用 <code>run</code> 插件即可(其实是运行的nodejs代码)  </p>\n<ul>\n<li><p>如果要测试浏览器脚本，还是需要浏览器的配合<br>推荐插件 <code>live Server</code> 实时预览html界面<br><img src=\"https://ritwickdey.gallerycdn.vsassets.io/extensions/ritwickdey/liveserver/5.6.1/1555497731217/Microsoft.VisualStudio.Services.Icons.Default\" alt=\"live Server\"> <a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer\"><img src=\"https://img.shields.io/vscode-marketplace/v/ritwickdey.LiveServer.svg?style=flat-square&label=vscode%20marketplace\" alt=\"VSCode Marketplace\"></a>  </p>\n</li>\n<li><p>如果需要调试就需要安装 debugger for edge/chrome/firefox etc.</p>\n</li>\n</ul>\n</li>\n<li><p>vscode 设置<br> 在使用推荐模板在之后，在模板内输入自动提示就消失了</p>\n<pre><code> &quot;editor.quickSuggestions&quot;: true\n &quot;editor.suggest.snippetsPreventQuickSuggestions&quot;: false\n</code></pre>\n</li>\n</ol>\n"},{"title":"Scala 基础","date":"2021-04-25T15:10:00.000Z","_content":"\nhttps://docs.scala-lang.org/overviews/scala-book/introduction.html\n\n# 1. scala install on window\n\n## 1.1 scala release\n\nconf env\n\n1. `SCALA_HOME`\n2. Path add `%SCALA_HOME%\\bin`\n\n### 1.1.1 install on linux\n\n1. install sdkman\n   $ curl -s \"https://get.sdkman.io\" | bash\n   $ source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n    $ sdk version\n2. install sbt\n   echo \"deb https://repo.scala-sbt.org/scalasbt/debian /\" | sudo tee -a /etc/apt/sources.list.d/sbt.list\n   curl -sL \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823\" | sudo apt-key add\n   sudo apt-get update\n   sudo apt-get install sbt\n3. install scala\n   sdk install scala\n\n## 1.2 edge 安装\n\n### 1.2.1 命令行安装\n\n+ (1) Setup\n\n    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\n    sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/\n    sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main\" > /etc/apt/sources.list.d/microsoft-edge-dev.list'\n    sudo rm microsoft.gpg\n\n+ (2) Install\n\n    sudo apt update\n    sudo apt install microsoft-edge-dev\n\n<!-- ————————————————\n版权声明：本文为CSDN博主「cugautozp」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/cugautozp/article/details/109325559 -->\n\n### 1.2.2 deb 安装\n\n    sudo dpkg -i “xxx.deb”\n\n# 2. 基本了解\n\n## 2.1 `val` & `var`\n\n`val` is an immutable variable — like final in Java — and should be preferred  \n`var` creates a mutable variable, and should only be used when there is a specific reason to use it\n\n## 2.2 if/else\n\n    val x = if (a < b) a else b\n\n## 2.3 match expressions\n\n### 2.3.1 Scala has a match expression, which in its most basic use is like a Java `switch` statement:\n\n    val result = i match {\n        case 1 => \"one\"\n        case 2 => \"two\"\n        case _ => \"not 1 or 2\"\n    }\n\n### 2.3.2 matching against many different `types`:\n\n    def getClassAsString(x: Any):String = x match {\n        case s: String => s + \" is a String\"\n        case i: Int => \"Int\"\n        case f: Float => \"Float\"\n        case l: List[_] => \"List\"\n        case p: Person => \"Person\"\n        case _ => \"Unknown\"\n    }\n\n## 2.4 try/catch\n\n    try {\n        writeToFile(text)\n    } catch {\n        case fnfe: FileNotFoundException => println(fnfe)\n        case ioe: IOException => println(ioe)\n    }\n\n## 2.5 `for` loops and expressions\n\nScala for loops — which we generally write in this book as for-loops — look like this:\n\n    for (arg <- args) println(arg)\n\n    // \"x to y\" syntax\n    for (i <- 0 to 5) println(i)\n\n    // \"x to y by\" syntax\n    for (i <- 0 to 10 by 2) println(i)\n\nYou can also add the yield keyword to for-loops to create for-expressions that yield a result. Here’s a for-expression that doubles each value in the sequence 1 to 5:\n\n    val x = for (i <- 1 to 5) yield i * 2\n\nHere’s another for-expression that iterates over a list of strings:\n\n    val fruits = List(\"apple\", \"banana\", \"lime\", \"orange\")\n\n    val fruitLengths = for {\n        f <- fruits\n        if f.length > 4\n    } yield f.length\n\n## 2.4.1  For\n\n> foreach is available on most collections classes, including `sequences`, `maps`, and `sets`.\n\n    val ratings = Map(\n        \"Lady in the Water\"  -> 3.0,\n        \"Snakes on a Plane\"  -> 4.0,\n        \"You, Me and Dupree\" -> 3.5\n    )\n\n    for ((name,rating) <- ratings) println(s\"Movie: $name, Rating: $rating\")\n\n\n    ratings.foreach {\n        case(movie, rating) => println(s\"key: $movie, value: $rating\")\n    }\n\n> While a for-loop is used for side effects (such as printing output), a for-expression is used to create new collections from existing collections.\n\n> For 循环用于产生副作用(如打印输出)，\n> 而 for 表达式用于从现有集合创建新的集合。\n\n## 2.5 Types\n\n### 2.5.1 Use the explicit form when you need to be clear\n\n确认何时应该使用明确类型  \n\nOne place where you’ll want to show the data type is when you want to be clear about what you’re creating. That is, if you don’t explicitly declare the data type, the compiler may make a wrong assumption about what you want to create. Some examples of this are when you want to create numbers with specific data types. We show this in the next lesson.\n\n当你想用明确的类型，防止编译器在进行类型推断推断错误。\n\n| Data Type | Possible Values                                                                                 |\n| --------- | ----------------------------------------------------------------------------------------------- |\n| Boolean   | true or false                                                                                   |\n| Byte      | 8-bit signed two’s complement integer (-2^7 to 2^7-1, inclusive) `-128 to 127`                  |\n| Short     | 16-bit signed two’s complement integer (-2^15 to 2^15-1, inclusive) `-32,768 to 32,76`7         |\n| Int       | 32-bit two’s complement integer (-2^31 to 2^31-1, inclusive) `-2,147,483,648 to 2,147,483,647`  |\n| Long      | 64-bit two’s complement integer (-2^63 to 2^63-1, inclusive) (`-2^63 to 2^63-1`, inclusive)     |\n| Float     | 32-bit IEEE 754 single-precision float `1.40129846432481707e-45 to 3.40282346638528860e+38`     |\n| Double    | 64-bit IEEE 754 double-precision float `4.94065645841246544e-324d to 1.79769313486231570e+308d` |\n| Char      | 16-bit unsigned Unicode character (0 to 2^16-1, inclusive) `0 to 65,535`                        |\n| String    | a sequence of `Char`                                                                            |\n\n## 2.6 Input and Output\n\n    import scala.io.StdIn.readLine\n\n    object HelloInteractive extends App {\n\n        print(\"Enter your first name: \")\n        val firstName = readLine()\n\n        print(\"Enter your last name: \")\n        val lastName = readLine()\n\n        println(s\"Your name is $firstName $lastName\")\n\n    }\n\n# 3. DEMOMATCH 模式匹配样例\n\n```scala\npackage org.aeewz.scala.demo\n\nobject DemoMatch extends  App{\n  println(\"================ Match ====================\")\n  def convertBooleanToStringMessage(bool: Boolean): String = bool match {\n    case true => \"you said true\"\n    case false => \"you said false\"\n  }\n  val result = convertBooleanToStringMessage(true)\n  println(result)\n  println(\"========== Type (is int or string) ========\")\n  def isTrue(a: Any) = a match {\n    case i:Int => false\n    case s:String => false\n    case _ => true\n  }\n  println(isTrue(0))\n  println(isTrue(\"\"))\n  println(isTrue(1.1))\n  println(\"================ isOdd ====================\")\n  def isOdd(num: Int) : Boolean = num % 2 match {\n    case 0 => true\n    case 1 => false\n  }\n  val nums = (1 to 5).toList\n  nums.foreach{\n    case(num) => {\n      println(s\" $num is${ if(isOdd(num)) \"\" else \" not\"} odd.\")\n    }\n  }\n  println(\"===========================================\")\n\n}\n```\n\nOutput:\n\n```shell\n================ Match ====================\nyou said true\n========== Type (is int or string) ========\nfalse\nfalse\ntrue\n================ isOdd ====================\n 1 is not odd.\n 2 is odd.\n 3 is not odd.\n 4 is odd.\n 5 is not odd.\n===========================================\n```\n","source":"_posts/scala-基础.md","raw":"---\ntitle: Scala 基础\ndate: 2021-04-25 23:10:00\ntags:\n- Scala\n- 大数据\n\ncategories: \n- Scala \n---\n\nhttps://docs.scala-lang.org/overviews/scala-book/introduction.html\n\n# 1. scala install on window\n\n## 1.1 scala release\n\nconf env\n\n1. `SCALA_HOME`\n2. Path add `%SCALA_HOME%\\bin`\n\n### 1.1.1 install on linux\n\n1. install sdkman\n   $ curl -s \"https://get.sdkman.io\" | bash\n   $ source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n    $ sdk version\n2. install sbt\n   echo \"deb https://repo.scala-sbt.org/scalasbt/debian /\" | sudo tee -a /etc/apt/sources.list.d/sbt.list\n   curl -sL \"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823\" | sudo apt-key add\n   sudo apt-get update\n   sudo apt-get install sbt\n3. install scala\n   sdk install scala\n\n## 1.2 edge 安装\n\n### 1.2.1 命令行安装\n\n+ (1) Setup\n\n    curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg\n    sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/\n    sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main\" > /etc/apt/sources.list.d/microsoft-edge-dev.list'\n    sudo rm microsoft.gpg\n\n+ (2) Install\n\n    sudo apt update\n    sudo apt install microsoft-edge-dev\n\n<!-- ————————————————\n版权声明：本文为CSDN博主「cugautozp」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/cugautozp/article/details/109325559 -->\n\n### 1.2.2 deb 安装\n\n    sudo dpkg -i “xxx.deb”\n\n# 2. 基本了解\n\n## 2.1 `val` & `var`\n\n`val` is an immutable variable — like final in Java — and should be preferred  \n`var` creates a mutable variable, and should only be used when there is a specific reason to use it\n\n## 2.2 if/else\n\n    val x = if (a < b) a else b\n\n## 2.3 match expressions\n\n### 2.3.1 Scala has a match expression, which in its most basic use is like a Java `switch` statement:\n\n    val result = i match {\n        case 1 => \"one\"\n        case 2 => \"two\"\n        case _ => \"not 1 or 2\"\n    }\n\n### 2.3.2 matching against many different `types`:\n\n    def getClassAsString(x: Any):String = x match {\n        case s: String => s + \" is a String\"\n        case i: Int => \"Int\"\n        case f: Float => \"Float\"\n        case l: List[_] => \"List\"\n        case p: Person => \"Person\"\n        case _ => \"Unknown\"\n    }\n\n## 2.4 try/catch\n\n    try {\n        writeToFile(text)\n    } catch {\n        case fnfe: FileNotFoundException => println(fnfe)\n        case ioe: IOException => println(ioe)\n    }\n\n## 2.5 `for` loops and expressions\n\nScala for loops — which we generally write in this book as for-loops — look like this:\n\n    for (arg <- args) println(arg)\n\n    // \"x to y\" syntax\n    for (i <- 0 to 5) println(i)\n\n    // \"x to y by\" syntax\n    for (i <- 0 to 10 by 2) println(i)\n\nYou can also add the yield keyword to for-loops to create for-expressions that yield a result. Here’s a for-expression that doubles each value in the sequence 1 to 5:\n\n    val x = for (i <- 1 to 5) yield i * 2\n\nHere’s another for-expression that iterates over a list of strings:\n\n    val fruits = List(\"apple\", \"banana\", \"lime\", \"orange\")\n\n    val fruitLengths = for {\n        f <- fruits\n        if f.length > 4\n    } yield f.length\n\n## 2.4.1  For\n\n> foreach is available on most collections classes, including `sequences`, `maps`, and `sets`.\n\n    val ratings = Map(\n        \"Lady in the Water\"  -> 3.0,\n        \"Snakes on a Plane\"  -> 4.0,\n        \"You, Me and Dupree\" -> 3.5\n    )\n\n    for ((name,rating) <- ratings) println(s\"Movie: $name, Rating: $rating\")\n\n\n    ratings.foreach {\n        case(movie, rating) => println(s\"key: $movie, value: $rating\")\n    }\n\n> While a for-loop is used for side effects (such as printing output), a for-expression is used to create new collections from existing collections.\n\n> For 循环用于产生副作用(如打印输出)，\n> 而 for 表达式用于从现有集合创建新的集合。\n\n## 2.5 Types\n\n### 2.5.1 Use the explicit form when you need to be clear\n\n确认何时应该使用明确类型  \n\nOne place where you’ll want to show the data type is when you want to be clear about what you’re creating. That is, if you don’t explicitly declare the data type, the compiler may make a wrong assumption about what you want to create. Some examples of this are when you want to create numbers with specific data types. We show this in the next lesson.\n\n当你想用明确的类型，防止编译器在进行类型推断推断错误。\n\n| Data Type | Possible Values                                                                                 |\n| --------- | ----------------------------------------------------------------------------------------------- |\n| Boolean   | true or false                                                                                   |\n| Byte      | 8-bit signed two’s complement integer (-2^7 to 2^7-1, inclusive) `-128 to 127`                  |\n| Short     | 16-bit signed two’s complement integer (-2^15 to 2^15-1, inclusive) `-32,768 to 32,76`7         |\n| Int       | 32-bit two’s complement integer (-2^31 to 2^31-1, inclusive) `-2,147,483,648 to 2,147,483,647`  |\n| Long      | 64-bit two’s complement integer (-2^63 to 2^63-1, inclusive) (`-2^63 to 2^63-1`, inclusive)     |\n| Float     | 32-bit IEEE 754 single-precision float `1.40129846432481707e-45 to 3.40282346638528860e+38`     |\n| Double    | 64-bit IEEE 754 double-precision float `4.94065645841246544e-324d to 1.79769313486231570e+308d` |\n| Char      | 16-bit unsigned Unicode character (0 to 2^16-1, inclusive) `0 to 65,535`                        |\n| String    | a sequence of `Char`                                                                            |\n\n## 2.6 Input and Output\n\n    import scala.io.StdIn.readLine\n\n    object HelloInteractive extends App {\n\n        print(\"Enter your first name: \")\n        val firstName = readLine()\n\n        print(\"Enter your last name: \")\n        val lastName = readLine()\n\n        println(s\"Your name is $firstName $lastName\")\n\n    }\n\n# 3. DEMOMATCH 模式匹配样例\n\n```scala\npackage org.aeewz.scala.demo\n\nobject DemoMatch extends  App{\n  println(\"================ Match ====================\")\n  def convertBooleanToStringMessage(bool: Boolean): String = bool match {\n    case true => \"you said true\"\n    case false => \"you said false\"\n  }\n  val result = convertBooleanToStringMessage(true)\n  println(result)\n  println(\"========== Type (is int or string) ========\")\n  def isTrue(a: Any) = a match {\n    case i:Int => false\n    case s:String => false\n    case _ => true\n  }\n  println(isTrue(0))\n  println(isTrue(\"\"))\n  println(isTrue(1.1))\n  println(\"================ isOdd ====================\")\n  def isOdd(num: Int) : Boolean = num % 2 match {\n    case 0 => true\n    case 1 => false\n  }\n  val nums = (1 to 5).toList\n  nums.foreach{\n    case(num) => {\n      println(s\" $num is${ if(isOdd(num)) \"\" else \" not\"} odd.\")\n    }\n  }\n  println(\"===========================================\")\n\n}\n```\n\nOutput:\n\n```shell\n================ Match ====================\nyou said true\n========== Type (is int or string) ========\nfalse\nfalse\ntrue\n================ isOdd ====================\n 1 is not odd.\n 2 is odd.\n 3 is not odd.\n 4 is odd.\n 5 is not odd.\n===========================================\n```\n","slug":"scala-基础","published":1,"updated":"2021-06-02T15:37:56.429Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwnmevxl001o4ku26ozy0l79","content":"<p><a href=\"https://docs.scala-lang.org/overviews/scala-book/introduction.html\">https://docs.scala-lang.org/overviews/scala-book/introduction.html</a></p>\n<h1 id=\"1-scala-install-on-window\"><a href=\"#1-scala-install-on-window\" class=\"headerlink\" title=\"1. scala install on window\"></a>1. scala install on window</h1><h2 id=\"1-1-scala-release\"><a href=\"#1-1-scala-release\" class=\"headerlink\" title=\"1.1 scala release\"></a>1.1 scala release</h2><p>conf env</p>\n<ol>\n<li><code>SCALA_HOME</code></li>\n<li>Path add <code>%SCALA_HOME%\\bin</code></li>\n</ol>\n<h3 id=\"1-1-1-install-on-linux\"><a href=\"#1-1-1-install-on-linux\" class=\"headerlink\" title=\"1.1.1 install on linux\"></a>1.1.1 install on linux</h3><ol>\n<li>install sdkman<br>$ curl -s “<a href=\"https://get.sdkman.io&quot;/\">https://get.sdkman.io&quot;</a> | bash<br>$ source “$HOME/.sdkman/bin/sdkman-init.sh”<br> $ sdk version</li>\n<li>install sbt<br>echo “deb <a href=\"https://repo.scala-sbt.org/scalasbt/debian\">https://repo.scala-sbt.org/scalasbt/debian</a> /“ | sudo tee -a /etc/apt/sources.list.d/sbt.list<br>curl -sL “<a href=\"https://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823&quot;\">https://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823&quot;</a> | sudo apt-key add<br>sudo apt-get update<br>sudo apt-get install sbt</li>\n<li>install scala<br>sdk install scala</li>\n</ol>\n<h2 id=\"1-2-edge-安装\"><a href=\"#1-2-edge-安装\" class=\"headerlink\" title=\"1.2 edge 安装\"></a>1.2 edge 安装</h2><h3 id=\"1-2-1-命令行安装\"><a href=\"#1-2-1-命令行安装\" class=\"headerlink\" title=\"1.2.1 命令行安装\"></a>1.2.1 命令行安装</h3><ul>\n<li><p>(1) Setup</p>\n<p>  curl <a href=\"https://packages.microsoft.com/keys/microsoft.asc\">https://packages.microsoft.com/keys/microsoft.asc</a> | gpg –dearmor &gt; microsoft.gpg<br>  sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/<br>  sudo sh -c ‘echo “deb [arch=amd64] <a href=\"https://packages.microsoft.com/repos/edge\">https://packages.microsoft.com/repos/edge</a> stable main” &gt; /etc/apt/sources.list.d/microsoft-edge-dev.list’<br>  sudo rm microsoft.gpg</p>\n</li>\n<li><p>(2) Install</p>\n<p>  sudo apt update<br>  sudo apt install microsoft-edge-dev</p>\n</li>\n</ul>\n<!-- ————————————————\n版权声明：本文为CSDN博主「cugautozp」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/cugautozp/article/details/109325559 -->\n\n<h3 id=\"1-2-2-deb-安装\"><a href=\"#1-2-2-deb-安装\" class=\"headerlink\" title=\"1.2.2 deb 安装\"></a>1.2.2 deb 安装</h3><pre><code>sudo dpkg -i “xxx.deb”\n</code></pre>\n<h1 id=\"2-基本了解\"><a href=\"#2-基本了解\" class=\"headerlink\" title=\"2. 基本了解\"></a>2. 基本了解</h1><h2 id=\"2-1-val-amp-var\"><a href=\"#2-1-val-amp-var\" class=\"headerlink\" title=\"2.1 val &amp; var\"></a>2.1 <code>val</code> &amp; <code>var</code></h2><p><code>val</code> is an immutable variable — like final in Java — and should be preferred<br><code>var</code> creates a mutable variable, and should only be used when there is a specific reason to use it</p>\n<h2 id=\"2-2-if-else\"><a href=\"#2-2-if-else\" class=\"headerlink\" title=\"2.2 if/else\"></a>2.2 if/else</h2><pre><code>val x = if (a &lt; b) a else b\n</code></pre>\n<h2 id=\"2-3-match-expressions\"><a href=\"#2-3-match-expressions\" class=\"headerlink\" title=\"2.3 match expressions\"></a>2.3 match expressions</h2><h3 id=\"2-3-1-Scala-has-a-match-expression-which-in-its-most-basic-use-is-like-a-Java-switch-statement\"><a href=\"#2-3-1-Scala-has-a-match-expression-which-in-its-most-basic-use-is-like-a-Java-switch-statement\" class=\"headerlink\" title=\"2.3.1 Scala has a match expression, which in its most basic use is like a Java switch statement:\"></a>2.3.1 Scala has a match expression, which in its most basic use is like a Java <code>switch</code> statement:</h3><pre><code>val result = i match &#123;\n    case 1 =&gt; &quot;one&quot;\n    case 2 =&gt; &quot;two&quot;\n    case _ =&gt; &quot;not 1 or 2&quot;\n&#125;\n</code></pre>\n<h3 id=\"2-3-2-matching-against-many-different-types\"><a href=\"#2-3-2-matching-against-many-different-types\" class=\"headerlink\" title=\"2.3.2 matching against many different types:\"></a>2.3.2 matching against many different <code>types</code>:</h3><pre><code>def getClassAsString(x: Any):String = x match &#123;\n    case s: String =&gt; s + &quot; is a String&quot;\n    case i: Int =&gt; &quot;Int&quot;\n    case f: Float =&gt; &quot;Float&quot;\n    case l: List[_] =&gt; &quot;List&quot;\n    case p: Person =&gt; &quot;Person&quot;\n    case _ =&gt; &quot;Unknown&quot;\n&#125;\n</code></pre>\n<h2 id=\"2-4-try-catch\"><a href=\"#2-4-try-catch\" class=\"headerlink\" title=\"2.4 try/catch\"></a>2.4 try/catch</h2><pre><code>try &#123;\n    writeToFile(text)\n&#125; catch &#123;\n    case fnfe: FileNotFoundException =&gt; println(fnfe)\n    case ioe: IOException =&gt; println(ioe)\n&#125;\n</code></pre>\n<h2 id=\"2-5-for-loops-and-expressions\"><a href=\"#2-5-for-loops-and-expressions\" class=\"headerlink\" title=\"2.5 for loops and expressions\"></a>2.5 <code>for</code> loops and expressions</h2><p>Scala for loops — which we generally write in this book as for-loops — look like this:</p>\n<pre><code>for (arg &lt;- args) println(arg)\n\n// &quot;x to y&quot; syntax\nfor (i &lt;- 0 to 5) println(i)\n\n// &quot;x to y by&quot; syntax\nfor (i &lt;- 0 to 10 by 2) println(i)\n</code></pre>\n<p>You can also add the yield keyword to for-loops to create for-expressions that yield a result. Here’s a for-expression that doubles each value in the sequence 1 to 5:</p>\n<pre><code>val x = for (i &lt;- 1 to 5) yield i * 2\n</code></pre>\n<p>Here’s another for-expression that iterates over a list of strings:</p>\n<pre><code>val fruits = List(&quot;apple&quot;, &quot;banana&quot;, &quot;lime&quot;, &quot;orange&quot;)\n\nval fruitLengths = for &#123;\n    f &lt;- fruits\n    if f.length &gt; 4\n&#125; yield f.length\n</code></pre>\n<h2 id=\"2-4-1-For\"><a href=\"#2-4-1-For\" class=\"headerlink\" title=\"2.4.1  For\"></a>2.4.1  For</h2><blockquote>\n<p>foreach is available on most collections classes, including <code>sequences</code>, <code>maps</code>, and <code>sets</code>.</p>\n</blockquote>\n<pre><code>val ratings = Map(\n    &quot;Lady in the Water&quot;  -&gt; 3.0,\n    &quot;Snakes on a Plane&quot;  -&gt; 4.0,\n    &quot;You, Me and Dupree&quot; -&gt; 3.5\n)\n\nfor ((name,rating) &lt;- ratings) println(s&quot;Movie: $name, Rating: $rating&quot;)\n\n\nratings.foreach &#123;\n    case(movie, rating) =&gt; println(s&quot;key: $movie, value: $rating&quot;)\n&#125;\n</code></pre>\n<blockquote>\n<p>While a for-loop is used for side effects (such as printing output), a for-expression is used to create new collections from existing collections.</p>\n</blockquote>\n<blockquote>\n<p>For 循环用于产生副作用(如打印输出)，<br>而 for 表达式用于从现有集合创建新的集合。</p>\n</blockquote>\n<h2 id=\"2-5-Types\"><a href=\"#2-5-Types\" class=\"headerlink\" title=\"2.5 Types\"></a>2.5 Types</h2><h3 id=\"2-5-1-Use-the-explicit-form-when-you-need-to-be-clear\"><a href=\"#2-5-1-Use-the-explicit-form-when-you-need-to-be-clear\" class=\"headerlink\" title=\"2.5.1 Use the explicit form when you need to be clear\"></a>2.5.1 Use the explicit form when you need to be clear</h3><p>确认何时应该使用明确类型  </p>\n<p>One place where you’ll want to show the data type is when you want to be clear about what you’re creating. That is, if you don’t explicitly declare the data type, the compiler may make a wrong assumption about what you want to create. Some examples of this are when you want to create numbers with specific data types. We show this in the next lesson.</p>\n<p>当你想用明确的类型，防止编译器在进行类型推断推断错误。</p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Possible Values</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Boolean</td>\n<td>true or false</td>\n</tr>\n<tr>\n<td>Byte</td>\n<td>8-bit signed two’s complement integer (-2^7 to 2^7-1, inclusive) <code>-128 to 127</code></td>\n</tr>\n<tr>\n<td>Short</td>\n<td>16-bit signed two’s complement integer (-2^15 to 2^15-1, inclusive) <code>-32,768 to 32,76</code>7</td>\n</tr>\n<tr>\n<td>Int</td>\n<td>32-bit two’s complement integer (-2^31 to 2^31-1, inclusive) <code>-2,147,483,648 to 2,147,483,647</code></td>\n</tr>\n<tr>\n<td>Long</td>\n<td>64-bit two’s complement integer (-2^63 to 2^63-1, inclusive) (<code>-2^63 to 2^63-1</code>, inclusive)</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>32-bit IEEE 754 single-precision float <code>1.40129846432481707e-45 to 3.40282346638528860e+38</code></td>\n</tr>\n<tr>\n<td>Double</td>\n<td>64-bit IEEE 754 double-precision float <code>4.94065645841246544e-324d to 1.79769313486231570e+308d</code></td>\n</tr>\n<tr>\n<td>Char</td>\n<td>16-bit unsigned Unicode character (0 to 2^16-1, inclusive) <code>0 to 65,535</code></td>\n</tr>\n<tr>\n<td>String</td>\n<td>a sequence of <code>Char</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-6-Input-and-Output\"><a href=\"#2-6-Input-and-Output\" class=\"headerlink\" title=\"2.6 Input and Output\"></a>2.6 Input and Output</h2><pre><code>import scala.io.StdIn.readLine\n\nobject HelloInteractive extends App &#123;\n\n    print(&quot;Enter your first name: &quot;)\n    val firstName = readLine()\n\n    print(&quot;Enter your last name: &quot;)\n    val lastName = readLine()\n\n    println(s&quot;Your name is $firstName $lastName&quot;)\n\n&#125;\n</code></pre>\n<h1 id=\"3-DEMOMATCH-模式匹配样例\"><a href=\"#3-DEMOMATCH-模式匹配样例\" class=\"headerlink\" title=\"3. DEMOMATCH 模式匹配样例\"></a>3. DEMOMATCH 模式匹配样例</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.aeewz.scala.demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">DemoMatch</span> <span class=\"keyword\">extends</span>  <span class=\"title\">App</span></span>&#123;</span><br><span class=\"line\">  println(<span class=\"string\">&quot;================ Match ====================&quot;</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convertBooleanToStringMessage</span></span>(bool: <span class=\"type\">Boolean</span>): <span class=\"type\">String</span> = bool <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">true</span> =&gt; <span class=\"string\">&quot;you said true&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">false</span> =&gt; <span class=\"string\">&quot;you said false&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> result = convertBooleanToStringMessage(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  println(result)</span><br><span class=\"line\">  println(<span class=\"string\">&quot;========== Type (is int or string) ========&quot;</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isTrue</span></span>(a: <span class=\"type\">Any</span>) = a <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> i:<span class=\"type\">Int</span> =&gt; <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> s:<span class=\"type\">String</span> =&gt; <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> _ =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  println(isTrue(<span class=\"number\">0</span>))</span><br><span class=\"line\">  println(isTrue(<span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">  println(isTrue(<span class=\"number\">1.1</span>))</span><br><span class=\"line\">  println(<span class=\"string\">&quot;================ isOdd ====================&quot;</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isOdd</span></span>(num: <span class=\"type\">Int</span>) : <span class=\"type\">Boolean</span> = num % <span class=\"number\">2</span> <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span> =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span> =&gt; <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> nums = (<span class=\"number\">1</span> to <span class=\"number\">5</span>).toList</span><br><span class=\"line\">  nums.foreach&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span>(num) =&gt; &#123;</span><br><span class=\"line\">      println(<span class=\"string\">s&quot; <span class=\"subst\">$num</span> is<span class=\"subst\">$&#123; if(isOdd(num)) &quot;&quot; else &quot; not&quot;&#125;</span> odd.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  println(<span class=\"string\">&quot;===========================================&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Output:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">================ Match ====================</span><br><span class=\"line\">you said true</span><br><span class=\"line\">========== Type (is int or string) ========</span><br><span class=\"line\">false</span><br><span class=\"line\">false</span><br><span class=\"line\">true</span><br><span class=\"line\">================ isOdd ====================</span><br><span class=\"line\"> 1 is not odd.</span><br><span class=\"line\"> 2 is odd.</span><br><span class=\"line\"> 3 is not odd.</span><br><span class=\"line\"> 4 is odd.</span><br><span class=\"line\"> 5 is not odd.</span><br><span class=\"line\">===========================================</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://docs.scala-lang.org/overviews/scala-book/introduction.html\">https://docs.scala-lang.org/overviews/scala-book/introduction.html</a></p>\n<h1 id=\"1-scala-install-on-window\"><a href=\"#1-scala-install-on-window\" class=\"headerlink\" title=\"1. scala install on window\"></a>1. scala install on window</h1><h2 id=\"1-1-scala-release\"><a href=\"#1-1-scala-release\" class=\"headerlink\" title=\"1.1 scala release\"></a>1.1 scala release</h2><p>conf env</p>\n<ol>\n<li><code>SCALA_HOME</code></li>\n<li>Path add <code>%SCALA_HOME%\\bin</code></li>\n</ol>\n<h3 id=\"1-1-1-install-on-linux\"><a href=\"#1-1-1-install-on-linux\" class=\"headerlink\" title=\"1.1.1 install on linux\"></a>1.1.1 install on linux</h3><ol>\n<li>install sdkman<br>$ curl -s “<a href=\"https://get.sdkman.io&quot;/\">https://get.sdkman.io&quot;</a> | bash<br>$ source “$HOME/.sdkman/bin/sdkman-init.sh”<br> $ sdk version</li>\n<li>install sbt<br>echo “deb <a href=\"https://repo.scala-sbt.org/scalasbt/debian\">https://repo.scala-sbt.org/scalasbt/debian</a> /“ | sudo tee -a /etc/apt/sources.list.d/sbt.list<br>curl -sL “<a href=\"https://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823&quot;\">https://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823&quot;</a> | sudo apt-key add<br>sudo apt-get update<br>sudo apt-get install sbt</li>\n<li>install scala<br>sdk install scala</li>\n</ol>\n<h2 id=\"1-2-edge-安装\"><a href=\"#1-2-edge-安装\" class=\"headerlink\" title=\"1.2 edge 安装\"></a>1.2 edge 安装</h2><h3 id=\"1-2-1-命令行安装\"><a href=\"#1-2-1-命令行安装\" class=\"headerlink\" title=\"1.2.1 命令行安装\"></a>1.2.1 命令行安装</h3><ul>\n<li><p>(1) Setup</p>\n<p>  curl <a href=\"https://packages.microsoft.com/keys/microsoft.asc\">https://packages.microsoft.com/keys/microsoft.asc</a> | gpg –dearmor &gt; microsoft.gpg<br>  sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/<br>  sudo sh -c ‘echo “deb [arch=amd64] <a href=\"https://packages.microsoft.com/repos/edge\">https://packages.microsoft.com/repos/edge</a> stable main” &gt; /etc/apt/sources.list.d/microsoft-edge-dev.list’<br>  sudo rm microsoft.gpg</p>\n</li>\n<li><p>(2) Install</p>\n<p>  sudo apt update<br>  sudo apt install microsoft-edge-dev</p>\n</li>\n</ul>\n<!-- ————————————————\n版权声明：本文为CSDN博主「cugautozp」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/cugautozp/article/details/109325559 -->\n\n<h3 id=\"1-2-2-deb-安装\"><a href=\"#1-2-2-deb-安装\" class=\"headerlink\" title=\"1.2.2 deb 安装\"></a>1.2.2 deb 安装</h3><pre><code>sudo dpkg -i “xxx.deb”\n</code></pre>\n<h1 id=\"2-基本了解\"><a href=\"#2-基本了解\" class=\"headerlink\" title=\"2. 基本了解\"></a>2. 基本了解</h1><h2 id=\"2-1-val-amp-var\"><a href=\"#2-1-val-amp-var\" class=\"headerlink\" title=\"2.1 val &amp; var\"></a>2.1 <code>val</code> &amp; <code>var</code></h2><p><code>val</code> is an immutable variable — like final in Java — and should be preferred<br><code>var</code> creates a mutable variable, and should only be used when there is a specific reason to use it</p>\n<h2 id=\"2-2-if-else\"><a href=\"#2-2-if-else\" class=\"headerlink\" title=\"2.2 if/else\"></a>2.2 if/else</h2><pre><code>val x = if (a &lt; b) a else b\n</code></pre>\n<h2 id=\"2-3-match-expressions\"><a href=\"#2-3-match-expressions\" class=\"headerlink\" title=\"2.3 match expressions\"></a>2.3 match expressions</h2><h3 id=\"2-3-1-Scala-has-a-match-expression-which-in-its-most-basic-use-is-like-a-Java-switch-statement\"><a href=\"#2-3-1-Scala-has-a-match-expression-which-in-its-most-basic-use-is-like-a-Java-switch-statement\" class=\"headerlink\" title=\"2.3.1 Scala has a match expression, which in its most basic use is like a Java switch statement:\"></a>2.3.1 Scala has a match expression, which in its most basic use is like a Java <code>switch</code> statement:</h3><pre><code>val result = i match &#123;\n    case 1 =&gt; &quot;one&quot;\n    case 2 =&gt; &quot;two&quot;\n    case _ =&gt; &quot;not 1 or 2&quot;\n&#125;\n</code></pre>\n<h3 id=\"2-3-2-matching-against-many-different-types\"><a href=\"#2-3-2-matching-against-many-different-types\" class=\"headerlink\" title=\"2.3.2 matching against many different types:\"></a>2.3.2 matching against many different <code>types</code>:</h3><pre><code>def getClassAsString(x: Any):String = x match &#123;\n    case s: String =&gt; s + &quot; is a String&quot;\n    case i: Int =&gt; &quot;Int&quot;\n    case f: Float =&gt; &quot;Float&quot;\n    case l: List[_] =&gt; &quot;List&quot;\n    case p: Person =&gt; &quot;Person&quot;\n    case _ =&gt; &quot;Unknown&quot;\n&#125;\n</code></pre>\n<h2 id=\"2-4-try-catch\"><a href=\"#2-4-try-catch\" class=\"headerlink\" title=\"2.4 try/catch\"></a>2.4 try/catch</h2><pre><code>try &#123;\n    writeToFile(text)\n&#125; catch &#123;\n    case fnfe: FileNotFoundException =&gt; println(fnfe)\n    case ioe: IOException =&gt; println(ioe)\n&#125;\n</code></pre>\n<h2 id=\"2-5-for-loops-and-expressions\"><a href=\"#2-5-for-loops-and-expressions\" class=\"headerlink\" title=\"2.5 for loops and expressions\"></a>2.5 <code>for</code> loops and expressions</h2><p>Scala for loops — which we generally write in this book as for-loops — look like this:</p>\n<pre><code>for (arg &lt;- args) println(arg)\n\n// &quot;x to y&quot; syntax\nfor (i &lt;- 0 to 5) println(i)\n\n// &quot;x to y by&quot; syntax\nfor (i &lt;- 0 to 10 by 2) println(i)\n</code></pre>\n<p>You can also add the yield keyword to for-loops to create for-expressions that yield a result. Here’s a for-expression that doubles each value in the sequence 1 to 5:</p>\n<pre><code>val x = for (i &lt;- 1 to 5) yield i * 2\n</code></pre>\n<p>Here’s another for-expression that iterates over a list of strings:</p>\n<pre><code>val fruits = List(&quot;apple&quot;, &quot;banana&quot;, &quot;lime&quot;, &quot;orange&quot;)\n\nval fruitLengths = for &#123;\n    f &lt;- fruits\n    if f.length &gt; 4\n&#125; yield f.length\n</code></pre>\n<h2 id=\"2-4-1-For\"><a href=\"#2-4-1-For\" class=\"headerlink\" title=\"2.4.1  For\"></a>2.4.1  For</h2><blockquote>\n<p>foreach is available on most collections classes, including <code>sequences</code>, <code>maps</code>, and <code>sets</code>.</p>\n</blockquote>\n<pre><code>val ratings = Map(\n    &quot;Lady in the Water&quot;  -&gt; 3.0,\n    &quot;Snakes on a Plane&quot;  -&gt; 4.0,\n    &quot;You, Me and Dupree&quot; -&gt; 3.5\n)\n\nfor ((name,rating) &lt;- ratings) println(s&quot;Movie: $name, Rating: $rating&quot;)\n\n\nratings.foreach &#123;\n    case(movie, rating) =&gt; println(s&quot;key: $movie, value: $rating&quot;)\n&#125;\n</code></pre>\n<blockquote>\n<p>While a for-loop is used for side effects (such as printing output), a for-expression is used to create new collections from existing collections.</p>\n</blockquote>\n<blockquote>\n<p>For 循环用于产生副作用(如打印输出)，<br>而 for 表达式用于从现有集合创建新的集合。</p>\n</blockquote>\n<h2 id=\"2-5-Types\"><a href=\"#2-5-Types\" class=\"headerlink\" title=\"2.5 Types\"></a>2.5 Types</h2><h3 id=\"2-5-1-Use-the-explicit-form-when-you-need-to-be-clear\"><a href=\"#2-5-1-Use-the-explicit-form-when-you-need-to-be-clear\" class=\"headerlink\" title=\"2.5.1 Use the explicit form when you need to be clear\"></a>2.5.1 Use the explicit form when you need to be clear</h3><p>确认何时应该使用明确类型  </p>\n<p>One place where you’ll want to show the data type is when you want to be clear about what you’re creating. That is, if you don’t explicitly declare the data type, the compiler may make a wrong assumption about what you want to create. Some examples of this are when you want to create numbers with specific data types. We show this in the next lesson.</p>\n<p>当你想用明确的类型，防止编译器在进行类型推断推断错误。</p>\n<table>\n<thead>\n<tr>\n<th>Data Type</th>\n<th>Possible Values</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Boolean</td>\n<td>true or false</td>\n</tr>\n<tr>\n<td>Byte</td>\n<td>8-bit signed two’s complement integer (-2^7 to 2^7-1, inclusive) <code>-128 to 127</code></td>\n</tr>\n<tr>\n<td>Short</td>\n<td>16-bit signed two’s complement integer (-2^15 to 2^15-1, inclusive) <code>-32,768 to 32,76</code>7</td>\n</tr>\n<tr>\n<td>Int</td>\n<td>32-bit two’s complement integer (-2^31 to 2^31-1, inclusive) <code>-2,147,483,648 to 2,147,483,647</code></td>\n</tr>\n<tr>\n<td>Long</td>\n<td>64-bit two’s complement integer (-2^63 to 2^63-1, inclusive) (<code>-2^63 to 2^63-1</code>, inclusive)</td>\n</tr>\n<tr>\n<td>Float</td>\n<td>32-bit IEEE 754 single-precision float <code>1.40129846432481707e-45 to 3.40282346638528860e+38</code></td>\n</tr>\n<tr>\n<td>Double</td>\n<td>64-bit IEEE 754 double-precision float <code>4.94065645841246544e-324d to 1.79769313486231570e+308d</code></td>\n</tr>\n<tr>\n<td>Char</td>\n<td>16-bit unsigned Unicode character (0 to 2^16-1, inclusive) <code>0 to 65,535</code></td>\n</tr>\n<tr>\n<td>String</td>\n<td>a sequence of <code>Char</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-6-Input-and-Output\"><a href=\"#2-6-Input-and-Output\" class=\"headerlink\" title=\"2.6 Input and Output\"></a>2.6 Input and Output</h2><pre><code>import scala.io.StdIn.readLine\n\nobject HelloInteractive extends App &#123;\n\n    print(&quot;Enter your first name: &quot;)\n    val firstName = readLine()\n\n    print(&quot;Enter your last name: &quot;)\n    val lastName = readLine()\n\n    println(s&quot;Your name is $firstName $lastName&quot;)\n\n&#125;\n</code></pre>\n<h1 id=\"3-DEMOMATCH-模式匹配样例\"><a href=\"#3-DEMOMATCH-模式匹配样例\" class=\"headerlink\" title=\"3. DEMOMATCH 模式匹配样例\"></a>3. DEMOMATCH 模式匹配样例</h1><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.aeewz.scala.demo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">object</span> <span class=\"title\">DemoMatch</span> <span class=\"keyword\">extends</span>  <span class=\"title\">App</span></span>&#123;</span><br><span class=\"line\">  println(<span class=\"string\">&quot;================ Match ====================&quot;</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">convertBooleanToStringMessage</span></span>(bool: <span class=\"type\">Boolean</span>): <span class=\"type\">String</span> = bool <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">true</span> =&gt; <span class=\"string\">&quot;you said true&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"literal\">false</span> =&gt; <span class=\"string\">&quot;you said false&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> result = convertBooleanToStringMessage(<span class=\"literal\">true</span>)</span><br><span class=\"line\">  println(result)</span><br><span class=\"line\">  println(<span class=\"string\">&quot;========== Type (is int or string) ========&quot;</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isTrue</span></span>(a: <span class=\"type\">Any</span>) = a <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> i:<span class=\"type\">Int</span> =&gt; <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> s:<span class=\"type\">String</span> =&gt; <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> _ =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  println(isTrue(<span class=\"number\">0</span>))</span><br><span class=\"line\">  println(isTrue(<span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">  println(isTrue(<span class=\"number\">1.1</span>))</span><br><span class=\"line\">  println(<span class=\"string\">&quot;================ isOdd ====================&quot;</span>)</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">isOdd</span></span>(num: <span class=\"type\">Int</span>) : <span class=\"type\">Boolean</span> = num % <span class=\"number\">2</span> <span class=\"keyword\">match</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span> =&gt; <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span> =&gt; <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">val</span> nums = (<span class=\"number\">1</span> to <span class=\"number\">5</span>).toList</span><br><span class=\"line\">  nums.foreach&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span>(num) =&gt; &#123;</span><br><span class=\"line\">      println(<span class=\"string\">s&quot; <span class=\"subst\">$num</span> is<span class=\"subst\">$&#123; if(isOdd(num)) &quot;&quot; else &quot; not&quot;&#125;</span> odd.&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  println(<span class=\"string\">&quot;===========================================&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Output:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">================ Match ====================</span><br><span class=\"line\">you said true</span><br><span class=\"line\">========== Type (is int or string) ========</span><br><span class=\"line\">false</span><br><span class=\"line\">false</span><br><span class=\"line\">true</span><br><span class=\"line\">================ isOdd ====================</span><br><span class=\"line\"> 1 is not odd.</span><br><span class=\"line\"> 2 is odd.</span><br><span class=\"line\"> 3 is not odd.</span><br><span class=\"line\"> 4 is odd.</span><br><span class=\"line\"> 5 is not odd.</span><br><span class=\"line\">===========================================</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/Antlr4-基础/1.png","post":"ckwnmevwt00004ku217p06y5g","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/QR-CODE/20210514-1.png","post":"ckwnmevx100064ku286gf9py9","slug":"20210514-1.png","modified":1,"renderable":1},{"_id":"source/_posts/QR-CODE/20210514-2.png","post":"ckwnmevx100064ku286gf9py9","slug":"20210514-2.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckwnmevwt00004ku217p06y5g","category_id":"ckwnmevwy00024ku2ejr84o5x","_id":"ckwnmevx4000b4ku22kg99chd"},{"post_id":"ckwnmevx100064ku286gf9py9","category_id":"ckwnmevwy00024ku2ejr84o5x","_id":"ckwnmevx5000f4ku23dp4882t"},{"post_id":"ckwnmevwx00014ku2bxpv6wdl","category_id":"ckwnmevx200074ku25am13l53","_id":"ckwnmevx7000j4ku269kt0gqm"},{"post_id":"ckwnmevx5000e4ku23feae7tl","category_id":"ckwnmevwy00024ku2ejr84o5x","_id":"ckwnmevx8000m4ku27lj8bd6d"},{"post_id":"ckwnmevwz00044ku287qo0mq6","category_id":"ckwnmevx4000c4ku22ekfajfv","_id":"ckwnmevx8000p4ku219yw711p"},{"post_id":"ckwnmevx000054ku2fdeh9c6y","category_id":"ckwnmevx7000k4ku2gmvl03j7","_id":"ckwnmevx9000s4ku2g7ihhsf6"},{"post_id":"ckwnmevx200094ku26jpi44zr","category_id":"ckwnmevx8000n4ku2gu6vf21l","_id":"ckwnmevxb000x4ku26a7cezjm"},{"post_id":"ckwnmevx3000a4ku29tgy3tcl","category_id":"ckwnmevx7000k4ku2gmvl03j7","_id":"ckwnmevxb000z4ku2dmmhht9z"},{"post_id":"ckwnmevx6000h4ku21blc8w3d","category_id":"ckwnmevxa000w4ku28jkbfjsj","_id":"ckwnmevxc00114ku23vpp87bu"},{"post_id":"ckwnmevxg001i4ku20oda47d6","category_id":"ckwnmevxa000w4ku28jkbfjsj","_id":"ckwnmevxl001p4ku2hg6mda8o"},{"post_id":"ckwnmevxh001l4ku2ajb36qv4","category_id":"ckwnmevx8000n4ku2gu6vf21l","_id":"ckwnmevxp001q4ku2cgop6j59"},{"post_id":"ckwnmevxg001j4ku2262ih4yk","category_id":"ckwnmevxi001m4ku203wpe4f1","_id":"ckwnmevxq001u4ku22uvg8479"},{"post_id":"ckwnmevxl001o4ku26ozy0l79","category_id":"ckwnmevxp001r4ku2gzai0d53","_id":"ckwnmevxr001y4ku2515bhoua"}],"PostTag":[{"post_id":"ckwnmevwt00004ku217p06y5g","tag_id":"ckwnmevwz00034ku2eia40pbt","_id":"ckwnmevx5000g4ku281tm2bkn"},{"post_id":"ckwnmevwt00004ku217p06y5g","tag_id":"ckwnmevx200084ku2ajk8dngv","_id":"ckwnmevx7000i4ku23wa99543"},{"post_id":"ckwnmevwx00014ku2bxpv6wdl","tag_id":"ckwnmevx4000d4ku27ah64776","_id":"ckwnmevx9000q4ku2etgch1pt"},{"post_id":"ckwnmevwx00014ku2bxpv6wdl","tag_id":"ckwnmevx7000l4ku23yu01d0j","_id":"ckwnmevx9000r4ku24lda9l4p"},{"post_id":"ckwnmevwz00044ku287qo0mq6","tag_id":"ckwnmevx8000o4ku2c9pmdm4v","_id":"ckwnmevxa000v4ku2gj8bb1ee"},{"post_id":"ckwnmevx000054ku2fdeh9c6y","tag_id":"ckwnmevx9000u4ku2elqp51xj","_id":"ckwnmevxc00134ku24a45cbxz"},{"post_id":"ckwnmevx000054ku2fdeh9c6y","tag_id":"ckwnmevxb000y4ku2apnd8ivc","_id":"ckwnmevxc00144ku2c5zv4xpc"},{"post_id":"ckwnmevx000054ku2fdeh9c6y","tag_id":"ckwnmevx200084ku2ajk8dngv","_id":"ckwnmevxc00164ku24ia5hvg5"},{"post_id":"ckwnmevx100064ku286gf9py9","tag_id":"ckwnmevxc00124ku2gk945n23","_id":"ckwnmevxc00174ku2bjlkf0ek"},{"post_id":"ckwnmevx200094ku26jpi44zr","tag_id":"ckwnmevxc00154ku2d4yggcy8","_id":"ckwnmevxd001a4ku218mx3tna"},{"post_id":"ckwnmevx200094ku26jpi44zr","tag_id":"ckwnmevx8000o4ku2c9pmdm4v","_id":"ckwnmevxd001b4ku25bq1g0tt"},{"post_id":"ckwnmevx3000a4ku29tgy3tcl","tag_id":"ckwnmevx200084ku2ajk8dngv","_id":"ckwnmevxd001d4ku23yv8fl3f"},{"post_id":"ckwnmevx3000a4ku29tgy3tcl","tag_id":"ckwnmevx9000u4ku2elqp51xj","_id":"ckwnmevxe001e4ku24ucv1dt3"},{"post_id":"ckwnmevx5000e4ku23feae7tl","tag_id":"ckwnmevxd001c4ku22sozgxvk","_id":"ckwnmevxe001g4ku26r4d3vu6"},{"post_id":"ckwnmevx6000h4ku21blc8w3d","tag_id":"ckwnmevxd001c4ku22sozgxvk","_id":"ckwnmevxe001h4ku27z5dhxn9"},{"post_id":"ckwnmevxg001i4ku20oda47d6","tag_id":"ckwnmevxd001c4ku22sozgxvk","_id":"ckwnmevxh001k4ku2gshx1cca"},{"post_id":"ckwnmevxg001j4ku2262ih4yk","tag_id":"ckwnmevxi001n4ku2910o2v75","_id":"ckwnmevxq001t4ku21ervbt24"},{"post_id":"ckwnmevxh001l4ku2ajb36qv4","tag_id":"ckwnmevx8000o4ku2c9pmdm4v","_id":"ckwnmevxr001w4ku29vm779cz"},{"post_id":"ckwnmevxh001l4ku2ajb36qv4","tag_id":"ckwnmevxq001s4ku2dta481hg","_id":"ckwnmevxr001x4ku2gho68k2c"},{"post_id":"ckwnmevxl001o4ku26ozy0l79","tag_id":"ckwnmevxq001v4ku2bcle7dn7","_id":"ckwnmevxr00204ku27yjrh62j"},{"post_id":"ckwnmevxl001o4ku26ozy0l79","tag_id":"ckwnmevxr001z4ku23mwof4eh","_id":"ckwnmevxs00214ku2arkx3g80"}],"Tag":[{"name":"Antlr4","_id":"ckwnmevwz00034ku2eia40pbt"},{"name":"Java","_id":"ckwnmevx200084ku2ajk8dngv"},{"name":"C#","_id":"ckwnmevx4000d4ku27ah64776"},{"name":"模式匹配","_id":"ckwnmevx7000l4ku23yu01d0j"},{"name":"JavaScript","_id":"ckwnmevx8000o4ku2c9pmdm4v"},{"name":"Ubuntu","_id":"ckwnmevx9000u4ku2elqp51xj"},{"name":"Maven","_id":"ckwnmevxb000y4ku2apnd8ivc"},{"name":"QR","_id":"ckwnmevxc00124ku2gk945n23"},{"name":"ejs","_id":"ckwnmevxc00154ku2d4yggcy8"},{"name":"hexo","_id":"ckwnmevxd001c4ku22sozgxvk"},{"name":"Rust","_id":"ckwnmevxi001n4ku2910o2v75"},{"name":"vscode","_id":"ckwnmevxq001s4ku2dta481hg"},{"name":"Scala","_id":"ckwnmevxq001v4ku2bcle7dn7"},{"name":"大数据","_id":"ckwnmevxr001z4ku23mwof4eh"}]}}