@page "/sqlparser"
<h3>index &nbsp;</h3>

<div>
    <Blog.BlazorApp.Components.OrgChat.OrgchartComponent Data=@(Root)></Blog.BlazorApp.Components.OrgChat.OrgchartComponent>
</div>

<code hidden>
    @((MarkupString)LISP_Tree)
</code>

@using Antlr4.Runtime
@using System.Text
@using System.Collections.Immutable
@using System.Collections.Generic
@using Blog.BlazorApp.Components.OrgChat
@code {
    private string LISP_Tree;
    public OrgChatTreeNode Root;
    protected override void OnParametersSet()
    {
        //;SELECT sum(a.age),A.ID FROM A group by A.ID;
        string sql = "insert into C (C01,C02,C03) SELECT t1.a01 as c01,t1.b01 as c02,t2.bo2 FROM sha.A t1 left join qaw.B t2 on t1.b01=t2.b01;SELECT sum(a.age),A.ID FROM A group by A.ID2;";
        var charStream = CharStreams.fromString(sql);
        var lexer = new HiveLexer(charStream);
        var tokens = new CommonTokenStream(lexer);
        var parser = new HiveParser(tokens);
        parser.BuildParseTree = true;
        var tree = parser.statements();
        LISP_Tree = tree.ToStringTree(parser);
        Root = InitLispTree2(LISP_Tree);
    }

    private OrgChatTreeNode InitLispTree2(string lispTree)
    {
        var root = new OrgChatTreeNode("root");
        var stack = new Stack<OrgChatTreeNode>();
        stack.Push(root);
        string content ;
        for (int i = 0; i < lispTree.Length;i++)
        {
            var v_char = lispTree[i];
            //Console.WriteLine(v_char);
            // 读到 '('
            if (v_char == '(')
            {
                OrgChatTreeNode node = new OrgChatTreeNode();
                // 读取至下一个 ‘（’或者‘）’
                (content, i) = ReadUnitl(lispTree, "()", i);
                // 如果内容去首尾空格之后 内容不为空，正常元素
                if (content.Trim().Length > 0)
                {
                    var tmp_n = content;
                    var n = tmp_n.IndexOf(' ');
                    node.Name = n <= 0 ? tmp_n : tmp_n.Substring(0, n);
                    node.Title = n <= 0 ? "" : tmp_n.Substring(n);
                }
                // 只读到一个 ‘（’，是语句括号，此时按照正常结点处理，在发现语句反括号时，在对括号元素进行正确位置修复【to A】
                else if (content.Trim().Length == 0)
                {
                    node.Title = "(";
                    node.Name = "";
                }
                // 为了保证 叶结点 children 为空，子结点链表惰性加载
                stack.Peek().AddChildrens(node);
                stack.Push(node);
            }
            //  读到 ')'
                // 如果当前栈顶元素为 ‘（’
            else if (v_char == ')')
            {
                // 说明 该对括号为语句括号，非LISP树括号 【接 A】
                // 处理方法为，将括号‘（’的子结点【C】，转给父节点【P】
                if (stack.Peek().Title == "(")
                {
                    // 将括号‘（’的子结点【C】，转给父节点【P】，并清除子节点
                    stack.Pop().AdoptChildrensTo(stack.Peek()); 
                    // 将 ‘）’新增为叶节点 添加到父节点【P】上
                    stack.Peek().AddChildrens(new OrgChatTreeNode(title: ")", name: ""));
                }
                // 其他则退出栈顶元素，总是保持栈顶为最新根
                else
                    stack.Pop();
            }
            // 读到不是 ‘（’和‘）’的元素，都是叶节点
            else
            {
                //读取直至下一个 ‘（’或者‘）’
                (content, i) = ReadUnitl(lispTree, "()", i);
                // 内容不为空 添加子节点
                if (content.ToString().Trim().Length > 0)
                    stack.Peek().AddChildrens(new OrgChatTreeNode(name: "", title: content));
            }
            content = null;
        }
        return root;
    }

    private (string,int) ReadUnitl(string src, string until=" ", int start = 0)
    {
        var content = new StringBuilder();
        while (!until.Contains(src[start + 1]))
        {
            start++;
            content.Append(src[start]);
        }
        return (content.ToString(), start);
    }
}
