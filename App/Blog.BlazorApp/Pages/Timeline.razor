@page "/timeline"
@using System.Text.Json
@using Models.Github
<div class="col-md-9" id="timeline-div">
    <div id="timeline-line"></div>
    <ul id="timeline-group">
        @foreach (var item in TimelineNodes)
        {
            <li class="timeline-item">
                <div class="timeline-item-header">
                    <div class="circle"></div>
                    <div class="context">
                        <strong>@(item.Header)</strong>
                        <div style="width: 80%;">
                            <div style="background-color: rgba(0, 0, 0, 0.3); border-radius: 0.25rem; height: 0.5rem; width: 100%;">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="timeline-item-body">
                    <ul>
                        @foreach (var str in item.Content)
                        {
                            <li>@str</li>
                        }
                    </ul>
                    <div style="display: flex; flex-wrap: wrap; justify-content: start; width: 100%;">
                        @*@for (var j = 0; j < new Random().Next(1, 9) * 20; j++)
                            {
                            <div style="margin-bottom: 0.5rem; margin-right: 0.5rem; width: @(new Random().Next(1, 8)*10)%;">
                            <div style="background-color: rgba(0, 0, 0, 0.3); border-radius: 9999px; height: 0.2rem; width: 100%;">
                            </div>
                            </div>
                            }*@
                    </div>
                </div>
            </li>
        }

    </ul>
</div>

@inject IHttpClientFactory ClientFactory
@code {
    /// <summary>
    /// 时间轴结点集
    /// </summary>
    private IList<TimelineNode> TimelineNodes { get; set; } = new List<TimelineNode>();

    /// <summary>
    /// 页面初始化时 请求github提交记录，按天分组
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("GithubLookApi");
        var res = await client.GetStreamAsync("https://api.github.com/repos/livebug/Sharif/commits");
        TimelineNodes.Clear();
        using (JsonDocument document = JsonDocument.Parse(res))
        {
            // 遍历json元素 根元素为数组
            foreach (JsonElement jsonElement in document.RootElement.EnumerateArray())
            {
                // 获取 commit 元素，反序列化为对象
                var c = jsonElement.GetProperty("commit").Deserialize<Commit>();
                // 解析分组字段，确认分组
                var datestr = DateTime.Parse(c.author.date).ToShortDateString();
                // 判断分组是否存在，不存在新建分组结点
                if (!TimelineNodes.Any(n => n.Header == datestr))
                {
                    TimelineNodes.Add(new TimelineNode
                        {
                            Header = datestr,
                            Content = new List<string>()
                        });
                }
                // 向结点中添加内容
                TimelineNodes.First(n => n.Header == datestr).Content.Add($"{c.message}");
            }
        }
    }

    internal class TimelineNode
    {
        /// <summary>
        /// 结点头信息
        /// </summary>
        public string Header { get; set; }
        /// <summary>
        /// 结点内容
        /// </summary>
        public List<string> Content { get; set; }
    }
}