@page "/timeline"
@using System.Text.Json
@using Models.Github
<div class="col-md-9" id="timeline-div">
    <div id="timeline-line"></div>
    <ul id="timeline-group">
        @foreach (var item in TimelineNodes)
        {
            <li class="timeline-item">
                <div class="timeline-item-header">
                    <div class="circle"></div>
                    <div class="context">
                        <strong>@(item.Header)</strong>
                        <div style="width: 80%;">
                            <div style="background-color: rgba(0, 0, 0, 0.3); border-radius: 0.25rem; height: 0.5rem; width: 100%;">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="timeline-item-body">
                    <ul>
                        @foreach (var str in item.Content)
                        {
                            <li>@str</li>
                        }
                    </ul>
                    <div style="display: flex; flex-wrap: wrap; justify-content: start; width: 100%;">
                        @*@for (var j = 0; j < new Random().Next(1, 9) * 20; j++)
                            {

                            <div style="margin-bottom: 0.5rem; margin-right: 0.5rem; width: @(new Random().Next(1, 8)*10)%;">
                            <div style="background-color: rgba(0, 0, 0, 0.3); border-radius: 9999px; height: 0.2rem; width: 100%;">
                            </div>
                            </div>
                            }*@
                    </div>
                </div>
            </li>
        }

    </ul>
</div>

@inject IHttpClientFactory ClientFactory
@code {
    private IList<Commit> Commits { get; set; } = new List<Commit>();
    private IList<TimelineNode> TimelineNodes { get; set; } = new List<TimelineNode>();

    protected override async Task OnInitializedAsync()
    {
        var client = ClientFactory.CreateClient("GithubLookApi");
        var res = await client.GetStreamAsync("https://api.github.com/repos/livebug/Sharif/commits");
        int count = 0;
        TimelineNodes.Clear();
        Commits.Clear();
        using (JsonDocument document = JsonDocument.Parse(res))
        {
            JsonElement commits = document.RootElement;
            count = commits.GetArrayLength();
            Console.WriteLine(count);
            foreach (JsonElement group in commits.EnumerateArray())
            {
                JsonElement commit = group.GetProperty("commit");
                var c = commit.Deserialize<Commit>();
                var datestr = DateTime.Parse(c.author.date).ToShortDateString();
                if (!TimelineNodes.Any(n => n.Header == datestr))
                {
                    TimelineNodes.Add(new TimelineNode
                        {
                            Header = datestr,
                            Content = new List<string>()
                        });
                }
                var node = TimelineNodes.First(n => n.Header == datestr);
                node.Content.Add($"{c.message}.");
                //node.Content.Add($"{c.message} by {c.author.name}.");
            }
        }
    }

    internal class TimelineNode
    {
        public string Header { get; set; }
        public List<string> Content { get; set; }
    }
}