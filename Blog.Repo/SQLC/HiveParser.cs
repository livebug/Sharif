//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from HiveParser.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
//[System.CLSCompliant(false)]
public partial class HiveParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KW_TRUE=1, KW_FALSE=2, KW_ALL=3, KW_NONE=4, KW_AND=5, KW_OR=6, KW_NOT=7, 
		KW_LIKE=8, KW_ANY=9, KW_IF=10, KW_EXISTS=11, KW_ASC=12, KW_DESC=13, KW_NULLS=14, 
		KW_LAST=15, KW_ORDER=16, KW_GROUP=17, KW_BY=18, KW_HAVING=19, KW_WHERE=20, 
		KW_FROM=21, KW_AS=22, KW_SELECT=23, KW_DISTINCT=24, KW_INSERT=25, KW_OVERWRITE=26, 
		KW_OUTER=27, KW_UNIQUEJOIN=28, KW_PRESERVE=29, KW_JOIN=30, KW_LEFT=31, 
		KW_RIGHT=32, KW_FULL=33, KW_ON=34, KW_PARTITION=35, KW_PARTITIONS=36, 
		KW_TABLE=37, KW_TABLES=38, KW_COLUMNS=39, KW_INDEX=40, KW_INDEXES=41, 
		KW_REBUILD=42, KW_FUNCTIONS=43, KW_SHOW=44, KW_MSCK=45, KW_REPAIR=46, 
		KW_DIRECTORY=47, KW_LOCAL=48, KW_TRANSFORM=49, KW_USING=50, KW_CLUSTER=51, 
		KW_DISTRIBUTE=52, KW_SORT=53, KW_UNION=54, KW_EXCEPT=55, KW_LOAD=56, KW_EXPORT=57, 
		KW_IMPORT=58, KW_REPLICATION=59, KW_METADATA=60, KW_DATA=61, KW_INPATH=62, 
		KW_IS=63, KW_NULL=64, KW_CREATE=65, KW_EXTERNAL=66, KW_ALTER=67, KW_CHANGE=68, 
		KW_COLUMN=69, KW_FIRST=70, KW_AFTER=71, KW_DESCRIBE=72, KW_DROP=73, KW_RENAME=74, 
		KW_TO=75, KW_COMMENT=76, KW_BOOLEAN=77, KW_TINYINT=78, KW_SMALLINT=79, 
		KW_INT=80, KW_BIGINT=81, KW_FLOAT=82, KW_DOUBLE=83, KW_PRECISION=84, KW_DATE=85, 
		KW_DATETIME=86, KW_TIMESTAMP=87, KW_TIMESTAMPLOCALTZ=88, KW_TIME=89, KW_ZONE=90, 
		KW_INTERVAL=91, KW_DECIMAL=92, KW_STRING=93, KW_CHAR=94, KW_VARCHAR=95, 
		KW_ARRAY=96, KW_STRUCT=97, KW_MAP=98, KW_UNIONTYPE=99, KW_REDUCE=100, 
		KW_PARTITIONED=101, KW_CLUSTERED=102, KW_SORTED=103, KW_INTO=104, KW_BUCKETS=105, 
		KW_ROW=106, KW_ROWS=107, KW_FORMAT=108, KW_DELIMITED=109, KW_FIELDS=110, 
		KW_TERMINATED=111, KW_ESCAPED=112, KW_COLLECTION=113, KW_ITEMS=114, KW_KEYS=115, 
		KW_KEY_TYPE=116, KW_KILL=117, KW_LINES=118, KW_STORED=119, KW_FILEFORMAT=120, 
		KW_INPUTFORMAT=121, KW_OUTPUTFORMAT=122, KW_INPUTDRIVER=123, KW_OUTPUTDRIVER=124, 
		KW_ENABLE=125, KW_DISABLE=126, KW_LOCATION=127, KW_TABLESAMPLE=128, KW_BUCKET=129, 
		KW_OUT=130, KW_OF=131, KW_PERCENT=132, KW_CAST=133, KW_ADD=134, KW_REPLACE=135, 
		KW_RLIKE=136, KW_REGEXP=137, KW_TEMPORARY=138, KW_FUNCTION=139, KW_MACRO=140, 
		KW_FILE=141, KW_JAR=142, KW_EXPLAIN=143, KW_EXTENDED=144, KW_FORMATTED=145, 
		KW_DEPENDENCY=146, KW_LOGICAL=147, KW_SERDE=148, KW_WITH=149, KW_DEFERRED=150, 
		KW_SERDEPROPERTIES=151, KW_DBPROPERTIES=152, KW_LIMIT=153, KW_OFFSET=154, 
		KW_SET=155, KW_UNSET=156, KW_TBLPROPERTIES=157, KW_IDXPROPERTIES=158, 
		KW_VALUE_TYPE=159, KW_ELEM_TYPE=160, KW_DEFINED=161, KW_CASE=162, KW_WHEN=163, 
		KW_THEN=164, KW_ELSE=165, KW_END=166, KW_MAPJOIN=167, KW_STREAMTABLE=168, 
		KW_CLUSTERSTATUS=169, KW_UTC=170, KW_UTCTIMESTAMP=171, KW_LONG=172, KW_DELETE=173, 
		KW_PLUS=174, KW_MINUS=175, KW_FETCH=176, KW_INTERSECT=177, KW_VIEW=178, 
		KW_VIEWS=179, KW_IN=180, KW_DATABASE=181, KW_DATABASES=182, KW_MATERIALIZED=183, 
		KW_SCHEMA=184, KW_SCHEMAS=185, KW_GRANT=186, KW_REVOKE=187, KW_SSL=188, 
		KW_UNDO=189, KW_LOCK=190, KW_LOCKS=191, KW_UNLOCK=192, KW_SHARED=193, 
		KW_EXCLUSIVE=194, KW_PROCEDURE=195, KW_UNSIGNED=196, KW_WHILE=197, KW_READ=198, 
		KW_READS=199, KW_PURGE=200, KW_RANGE=201, KW_ANALYZE=202, KW_BEFORE=203, 
		KW_BETWEEN=204, KW_BOTH=205, KW_BINARY=206, KW_CROSS=207, KW_CONTINUE=208, 
		KW_CURSOR=209, KW_TRIGGER=210, KW_RECORDREADER=211, KW_RECORDWRITER=212, 
		KW_SEMI=213, KW_LATERAL=214, KW_TOUCH=215, KW_ARCHIVE=216, KW_UNARCHIVE=217, 
		KW_COMPUTE=218, KW_STATISTICS=219, KW_USE=220, KW_OPTION=221, KW_CONCATENATE=222, 
		KW_SHOW_DATABASE=223, KW_UPDATE=224, KW_RESTRICT=225, KW_CASCADE=226, 
		KW_SKEWED=227, KW_ROLLUP=228, KW_CUBE=229, KW_DIRECTORIES=230, KW_FOR=231, 
		KW_WINDOW=232, KW_UNBOUNDED=233, KW_PRECEDING=234, KW_FOLLOWING=235, KW_CURRENT=236, 
		KW_CURRENT_DATE=237, KW_CURRENT_TIMESTAMP=238, KW_LESS=239, KW_MORE=240, 
		KW_OVER=241, KW_GROUPING=242, KW_SETS=243, KW_TRUNCATE=244, KW_NOSCAN=245, 
		KW_USER=246, KW_ROLE=247, KW_ROLES=248, KW_INNER=249, KW_EXCHANGE=250, 
		KW_URI=251, KW_SERVER=252, KW_ADMIN=253, KW_OWNER=254, KW_PRINCIPALS=255, 
		KW_COMPACT=256, KW_COMPACTIONS=257, KW_TRANSACTIONS=258, KW_REWRITE=259, 
		KW_AUTHORIZATION=260, KW_REOPTIMIZATION=261, KW_CONF=262, KW_VALUES=263, 
		KW_RELOAD=264, KW_YEAR=265, KW_QUERY=266, KW_QUARTER=267, KW_MONTH=268, 
		KW_WEEK=269, KW_DAY=270, KW_DOW=271, KW_HOUR=272, KW_MINUTE=273, KW_SECOND=274, 
		KW_START=275, KW_TRANSACTION=276, KW_COMMIT=277, KW_ROLLBACK=278, KW_WORK=279, 
		KW_ONLY=280, KW_WRITE=281, KW_ISOLATION=282, KW_LEVEL=283, KW_SNAPSHOT=284, 
		KW_AUTOCOMMIT=285, KW_CACHE=286, KW_PRIMARY=287, KW_FOREIGN=288, KW_REFERENCES=289, 
		KW_CONSTRAINT=290, KW_ENFORCED=291, KW_VALIDATE=292, KW_NOVALIDATE=293, 
		KW_RELY=294, KW_NORELY=295, KW_UNIQUE=296, KW_KEY=297, KW_ABORT=298, KW_EXTRACT=299, 
		KW_FLOOR=300, KW_MERGE=301, KW_MATCHED=302, KW_REPL=303, KW_DUMP=304, 
		KW_STATUS=305, KW_VECTORIZATION=306, KW_SUMMARY=307, KW_OPERATOR=308, 
		KW_EXPRESSION=309, KW_DETAIL=310, KW_WAIT=311, KW_RESOURCE=312, KW_PLAN=313, 
		KW_QUERY_PARALLELISM=314, KW_PLANS=315, KW_ACTIVATE=316, KW_DEFAULT=317, 
		KW_CHECK=318, KW_POOL=319, KW_MOVE=320, KW_DO=321, KW_ALLOC_FRACTION=322, 
		KW_SCHEDULING_POLICY=323, KW_PATH=324, KW_MAPPING=325, KW_WORKLOAD=326, 
		KW_MANAGEMENT=327, KW_ACTIVE=328, KW_UNMANAGED=329, KW_APPLICATION=330, 
		KW_SYNC=331, DOT=332, COLON=333, COMMA=334, SEMICOLON=335, LPAREN=336, 
		RPAREN=337, LSQUARE=338, RSQUARE=339, LCURLY=340, RCURLY=341, EQUAL=342, 
		EQUAL_NS=343, NOTEQUAL=344, LESSTHANOREQUALTO=345, LESSTHAN=346, GREATERTHANOREQUALTO=347, 
		GREATERTHAN=348, DIVIDE=349, PLUS=350, MINUS=351, STAR=352, MOD=353, DIV=354, 
		AMPERSAND=355, TILDE=356, BITWISEOR=357, CONCATENATE=358, BITWISEXOR=359, 
		QUESTION=360, DOLLAR=361, StringLiteral=362, CharSetLiteral=363, IntegralLiteral=364, 
		NumberLiteral=365, ByteLengthLiteral=366, Number=367, Identifier=368, 
		QuotedIdentifier=369, CharSetName=370, WS=371, LINE_COMMENT=372, QUERY_HINT=373, 
		SHOW_HINT=374, HIDDEN_HINT=375;
	public const int
		RULE_statements = 0, RULE_statementSeparator = 1, RULE_empty = 2, RULE_statement = 3, 
		RULE_explainStatement = 4, RULE_explainOption = 5, RULE_vectorizationOnly = 6, 
		RULE_vectorizatonDetail = 7, RULE_execStatement = 8, RULE_loadStatement = 9, 
		RULE_replicationClause = 10, RULE_exportStatement = 11, RULE_importStatement = 12, 
		RULE_replDumpStatement = 13, RULE_replLoadStatement = 14, RULE_replConfigs = 15, 
		RULE_replConfigsList = 16, RULE_replStatusStatement = 17, RULE_ddlStatement = 18, 
		RULE_ifExists = 19, RULE_restrictOrCascade = 20, RULE_ifNotExists = 21, 
		RULE_rewriteEnabled = 22, RULE_rewriteDisabled = 23, RULE_storedAsDirs = 24, 
		RULE_orReplace = 25, RULE_createDatabaseStatement = 26, RULE_dbLocation = 27, 
		RULE_dbProperties = 28, RULE_dbPropertiesList = 29, RULE_switchDatabaseStatement = 30, 
		RULE_dropDatabaseStatement = 31, RULE_databaseComment = 32, RULE_createTableStatement = 33, 
		RULE_truncateTableStatement = 34, RULE_dropTableStatement = 35, RULE_alterStatement = 36, 
		RULE_alterTableStatementSuffix = 37, RULE_alterTblPartitionStatementSuffix = 38, 
		RULE_alterStatementPartitionKeyType = 39, RULE_alterViewStatementSuffix = 40, 
		RULE_alterMaterializedViewStatementSuffix = 41, RULE_alterDatabaseStatementSuffix = 42, 
		RULE_alterDatabaseSuffixProperties = 43, RULE_alterDatabaseSuffixSetOwner = 44, 
		RULE_alterDatabaseSuffixSetLocation = 45, RULE_alterStatementSuffixRename = 46, 
		RULE_alterStatementSuffixAddCol = 47, RULE_alterStatementSuffixAddConstraint = 48, 
		RULE_alterStatementSuffixDropConstraint = 49, RULE_alterStatementSuffixRenameCol = 50, 
		RULE_alterStatementSuffixUpdateStatsCol = 51, RULE_alterStatementSuffixUpdateStats = 52, 
		RULE_alterStatementChangeColPosition = 53, RULE_alterStatementSuffixAddPartitions = 54, 
		RULE_alterStatementSuffixAddPartitionsElement = 55, RULE_alterStatementSuffixTouch = 56, 
		RULE_alterStatementSuffixArchive = 57, RULE_alterStatementSuffixUnArchive = 58, 
		RULE_partitionLocation = 59, RULE_alterStatementSuffixDropPartitions = 60, 
		RULE_alterStatementSuffixProperties = 61, RULE_alterViewSuffixProperties = 62, 
		RULE_alterMaterializedViewSuffixRewrite = 63, RULE_alterMaterializedViewSuffixRebuild = 64, 
		RULE_alterStatementSuffixSerdeProperties = 65, RULE_alterIndexStatementSuffix = 66, 
		RULE_alterStatementSuffixFileFormat = 67, RULE_alterStatementSuffixClusterbySortby = 68, 
		RULE_alterTblPartitionStatementSuffixSkewedLocation = 69, RULE_skewedLocations = 70, 
		RULE_skewedLocationsList = 71, RULE_skewedLocationMap = 72, RULE_alterStatementSuffixLocation = 73, 
		RULE_alterStatementSuffixSkewedby = 74, RULE_alterStatementSuffixExchangePartition = 75, 
		RULE_alterStatementSuffixRenamePart = 76, RULE_alterStatementSuffixStatsPart = 77, 
		RULE_alterStatementSuffixMergeFiles = 78, RULE_alterStatementSuffixBucketNum = 79, 
		RULE_createIndexStatement = 80, RULE_locationPath = 81, RULE_dropIndexStatement = 82, 
		RULE_tablePartitionPrefix = 83, RULE_blocking = 84, RULE_alterStatementSuffixCompact = 85, 
		RULE_alterStatementSuffixSetOwner = 86, RULE_fileFormat = 87, RULE_inputFileFormat = 88, 
		RULE_tabTypeExpr = 89, RULE_partTypeExpr = 90, RULE_tabPartColTypeExpr = 91, 
		RULE_descStatement = 92, RULE_analyzeStatement = 93, RULE_showStatement = 94, 
		RULE_lockStatement = 95, RULE_lockDatabase = 96, RULE_lockMode = 97, RULE_unlockStatement = 98, 
		RULE_unlockDatabase = 99, RULE_createRoleStatement = 100, RULE_dropRoleStatement = 101, 
		RULE_grantPrivileges = 102, RULE_revokePrivileges = 103, RULE_grantRole = 104, 
		RULE_revokeRole = 105, RULE_showRoleGrants = 106, RULE_showRoles = 107, 
		RULE_showCurrentRole = 108, RULE_setRole = 109, RULE_showGrants = 110, 
		RULE_showRolePrincipals = 111, RULE_privilegeIncludeColObject = 112, RULE_privilegeObject = 113, 
		RULE_privObject = 114, RULE_privObjectCols = 115, RULE_privilegeList = 116, 
		RULE_privlegeDef = 117, RULE_privilegeType = 118, RULE_principalSpecification = 119, 
		RULE_principalName = 120, RULE_withGrantOption = 121, RULE_grantOptionFor = 122, 
		RULE_adminOptionFor = 123, RULE_withAdminOption = 124, RULE_metastoreCheck = 125, 
		RULE_resourceList = 126, RULE_resource = 127, RULE_resourceType = 128, 
		RULE_createFunctionStatement = 129, RULE_dropFunctionStatement = 130, 
		RULE_reloadFunctionStatement = 131, RULE_createMacroStatement = 132, RULE_dropMacroStatement = 133, 
		RULE_createViewStatement = 134, RULE_createMaterializedViewStatement = 135, 
		RULE_viewPartition = 136, RULE_dropViewStatement = 137, RULE_dropMaterializedViewStatement = 138, 
		RULE_showFunctionIdentifier = 139, RULE_showStmtIdentifier = 140, RULE_tableComment = 141, 
		RULE_tablePartition = 142, RULE_tableBuckets = 143, RULE_tableSkewed = 144, 
		RULE_rowFormat = 145, RULE_recordReader = 146, RULE_recordWriter = 147, 
		RULE_rowFormatSerde = 148, RULE_rowFormatDelimited = 149, RULE_tableRowFormat = 150, 
		RULE_tablePropertiesPrefixed = 151, RULE_tableProperties = 152, RULE_tablePropertiesList = 153, 
		RULE_keyValueProperty = 154, RULE_keyProperty = 155, RULE_tableRowFormatFieldIdentifier = 156, 
		RULE_tableRowFormatCollItemsIdentifier = 157, RULE_tableRowFormatMapKeysIdentifier = 158, 
		RULE_tableRowFormatLinesIdentifier = 159, RULE_tableRowNullFormat = 160, 
		RULE_tableFileFormat = 161, RULE_tableLocation = 162, RULE_columnNameTypeList = 163, 
		RULE_columnNameTypeOrConstraintList = 164, RULE_columnNameColonTypeList = 165, 
		RULE_columnNameList = 166, RULE_columnName = 167, RULE_extColumnName = 168, 
		RULE_columnNameOrderList = 169, RULE_columnParenthesesList = 170, RULE_enableValidateSpecification = 171, 
		RULE_enableSpecification = 172, RULE_validateSpecification = 173, RULE_enforcedSpecification = 174, 
		RULE_relySpecification = 175, RULE_createConstraint = 176, RULE_alterConstraintWithName = 177, 
		RULE_pkConstraint = 178, RULE_createForeignKey = 179, RULE_alterForeignKeyWithName = 180, 
		RULE_skewedValueElement = 181, RULE_skewedColumnValuePairList = 182, RULE_skewedColumnValuePair = 183, 
		RULE_skewedColumnValues = 184, RULE_skewedColumnValue = 185, RULE_skewedValueLocationElement = 186, 
		RULE_orderSpecification = 187, RULE_nullOrdering = 188, RULE_columnNameOrder = 189, 
		RULE_columnNameCommentList = 190, RULE_columnNameComment = 191, RULE_columnRefOrder = 192, 
		RULE_columnNameType = 193, RULE_columnNameTypeOrConstraint = 194, RULE_tableConstraint = 195, 
		RULE_columnNameTypeConstraint = 196, RULE_columnConstraint = 197, RULE_foreignKeyConstraint = 198, 
		RULE_colConstraint = 199, RULE_alterColumnConstraint = 200, RULE_alterForeignKeyConstraint = 201, 
		RULE_alterColConstraint = 202, RULE_tableConstraintPrimaryKey = 203, RULE_constraintOptsCreate = 204, 
		RULE_constraintOptsAlter = 205, RULE_columnNameColonType = 206, RULE_colType = 207, 
		RULE_colTypeList = 208, RULE_type_db_col = 209, RULE_primitiveType = 210, 
		RULE_listType = 211, RULE_structType = 212, RULE_mapType = 213, RULE_unionType = 214, 
		RULE_setOperator = 215, RULE_queryStatementExpression = 216, RULE_queryStatementExpressionBody = 217, 
		RULE_withClause = 218, RULE_cteStatement = 219, RULE_fromStatement = 220, 
		RULE_singleFromStatement = 221, RULE_regularBody = 222, RULE_atomSelectStatement = 223, 
		RULE_selectStatement = 224, RULE_setOpSelectStatement = 225, RULE_selectStatementWithCTE = 226, 
		RULE_body = 227, RULE_insertClause = 228, RULE_destination = 229, RULE_limitClause = 230, 
		RULE_deleteStatement = 231, RULE_columnAssignmentClause = 232, RULE_setColumnsClause = 233, 
		RULE_updateStatement = 234, RULE_sqlTransactionStatement = 235, RULE_startTransactionStatement = 236, 
		RULE_transactionMode = 237, RULE_transactionAccessMode = 238, RULE_isolationLevel = 239, 
		RULE_levelOfIsolation = 240, RULE_commitStatement = 241, RULE_rollbackStatement = 242, 
		RULE_setAutoCommitStatement = 243, RULE_abortTransactionStatement = 244, 
		RULE_mergeStatement = 245, RULE_whenClauses = 246, RULE_whenNotMatchedClause = 247, 
		RULE_whenMatchedAndClause = 248, RULE_whenMatchedThenClause = 249, RULE_updateOrDelete = 250, 
		RULE_killQueryStatement = 251, RULE_selectClause = 252, RULE_selectList = 253, 
		RULE_selectTrfmClause = 254, RULE_selectItem = 255, RULE_trfmClause = 256, 
		RULE_selectExpression = 257, RULE_selectExpressionList = 258, RULE_window_clause = 259, 
		RULE_window_defn = 260, RULE_window_specification = 261, RULE_window_frame = 262, 
		RULE_window_range_expression = 263, RULE_window_value_expression = 264, 
		RULE_window_frame_start_boundary = 265, RULE_window_frame_boundary = 266, 
		RULE_tableAllColumns = 267, RULE_tableOrColumn = 268, RULE_expressionList = 269, 
		RULE_aliasList = 270, RULE_fromClause = 271, RULE_fromSource = 272, RULE_atomjoinSource = 273, 
		RULE_joinSource = 274, RULE_joinSourcePart = 275, RULE_uniqueJoinSource = 276, 
		RULE_uniqueJoinExpr = 277, RULE_uniqueJoinToken = 278, RULE_joinToken = 279, 
		RULE_lateralView = 280, RULE_tableAlias = 281, RULE_tableBucketSample = 282, 
		RULE_splitSample = 283, RULE_tableSample = 284, RULE_tableSource = 285, 
		RULE_uniqueJoinTableSource = 286, RULE_tableName = 287, RULE_viewName = 288, 
		RULE_subQuerySource = 289, RULE_partitioningSpec = 290, RULE_partitionTableFunctionSource = 291, 
		RULE_partitionedTableFunction = 292, RULE_whereClause = 293, RULE_searchCondition = 294, 
		RULE_valuesClause = 295, RULE_valuesTableConstructor = 296, RULE_valueRowConstructor = 297, 
		RULE_virtualTableSource = 298, RULE_groupByClause = 299, RULE_groupby_expression = 300, 
		RULE_groupByEmpty = 301, RULE_rollupStandard = 302, RULE_rollupOldSyntax = 303, 
		RULE_groupingSetExpression = 304, RULE_groupingSetExpressionMultiple = 305, 
		RULE_groupingExpressionSingle = 306, RULE_havingClause = 307, RULE_havingCondition = 308, 
		RULE_expressionsInParenthesis = 309, RULE_expressionsNotInParenthesis = 310, 
		RULE_expressionPart = 311, RULE_expressions = 312, RULE_columnRefOrderInParenthesis = 313, 
		RULE_columnRefOrderNotInParenthesis = 314, RULE_orderByClause = 315, RULE_clusterByClause = 316, 
		RULE_partitionByClause = 317, RULE_distributeByClause = 318, RULE_sortByClause = 319, 
		RULE_function = 320, RULE_functionName = 321, RULE_castExpression = 322, 
		RULE_caseExpression = 323, RULE_whenExpression = 324, RULE_floorExpression = 325, 
		RULE_floorDateQualifiers = 326, RULE_extractExpression = 327, RULE_timeQualifiers = 328, 
		RULE_constant = 329, RULE_stringLiteralSequence = 330, RULE_charSetStringLiteral = 331, 
		RULE_dateLiteral = 332, RULE_timestampLiteral = 333, RULE_timestampLocalTZLiteral = 334, 
		RULE_intervalValue = 335, RULE_intervalLiteral = 336, RULE_intervalExpression = 337, 
		RULE_intervalQualifiers = 338, RULE_atomExpression = 339, RULE_precedenceUnaryOperator = 340, 
		RULE_isCondition = 341, RULE_precedenceBitwiseXorOperator = 342, RULE_precedenceStarOperator = 343, 
		RULE_precedencePlusOperator = 344, RULE_precedenceConcatenateOperator = 345, 
		RULE_precedenceAmpersandOperator = 346, RULE_precedenceBitwiseOrOperator = 347, 
		RULE_precedenceRegexpOperator = 348, RULE_precedenceSimilarOperator = 349, 
		RULE_precedenceDistinctOperator = 350, RULE_precedenceEqualOperator = 351, 
		RULE_precedenceNotOperator = 352, RULE_precedenceAndOperator = 353, RULE_precedenceOrOperator = 354, 
		RULE_expression = 355, RULE_subQueryExpression = 356, RULE_precedenceSimilarExpressionPart = 357, 
		RULE_precedenceSimilarExpressionAtom = 358, RULE_precedenceSimilarExpressionIn = 359, 
		RULE_precedenceSimilarExpressionPartNot = 360, RULE_booleanValue = 361, 
		RULE_booleanValueTok = 362, RULE_tableOrPartition = 363, RULE_partitionSpec = 364, 
		RULE_partitionVal = 365, RULE_dropPartitionSpec = 366, RULE_dropPartitionVal = 367, 
		RULE_dropPartitionOperator = 368, RULE_sysFuncNames = 369, RULE_descFuncNames = 370, 
		RULE_identifier = 371, RULE_functionIdentifier = 372, RULE_principalIdentifier = 373, 
		RULE_nonReserved = 374, RULE_sql11ReservedKeywordsUsedAsFunctionName = 375;
	public static readonly string[] ruleNames = {
		"statements", "statementSeparator", "empty", "statement", "explainStatement", 
		"explainOption", "vectorizationOnly", "vectorizatonDetail", "execStatement", 
		"loadStatement", "replicationClause", "exportStatement", "importStatement", 
		"replDumpStatement", "replLoadStatement", "replConfigs", "replConfigsList", 
		"replStatusStatement", "ddlStatement", "ifExists", "restrictOrCascade", 
		"ifNotExists", "rewriteEnabled", "rewriteDisabled", "storedAsDirs", "orReplace", 
		"createDatabaseStatement", "dbLocation", "dbProperties", "dbPropertiesList", 
		"switchDatabaseStatement", "dropDatabaseStatement", "databaseComment", 
		"createTableStatement", "truncateTableStatement", "dropTableStatement", 
		"alterStatement", "alterTableStatementSuffix", "alterTblPartitionStatementSuffix", 
		"alterStatementPartitionKeyType", "alterViewStatementSuffix", "alterMaterializedViewStatementSuffix", 
		"alterDatabaseStatementSuffix", "alterDatabaseSuffixProperties", "alterDatabaseSuffixSetOwner", 
		"alterDatabaseSuffixSetLocation", "alterStatementSuffixRename", "alterStatementSuffixAddCol", 
		"alterStatementSuffixAddConstraint", "alterStatementSuffixDropConstraint", 
		"alterStatementSuffixRenameCol", "alterStatementSuffixUpdateStatsCol", 
		"alterStatementSuffixUpdateStats", "alterStatementChangeColPosition", 
		"alterStatementSuffixAddPartitions", "alterStatementSuffixAddPartitionsElement", 
		"alterStatementSuffixTouch", "alterStatementSuffixArchive", "alterStatementSuffixUnArchive", 
		"partitionLocation", "alterStatementSuffixDropPartitions", "alterStatementSuffixProperties", 
		"alterViewSuffixProperties", "alterMaterializedViewSuffixRewrite", "alterMaterializedViewSuffixRebuild", 
		"alterStatementSuffixSerdeProperties", "alterIndexStatementSuffix", "alterStatementSuffixFileFormat", 
		"alterStatementSuffixClusterbySortby", "alterTblPartitionStatementSuffixSkewedLocation", 
		"skewedLocations", "skewedLocationsList", "skewedLocationMap", "alterStatementSuffixLocation", 
		"alterStatementSuffixSkewedby", "alterStatementSuffixExchangePartition", 
		"alterStatementSuffixRenamePart", "alterStatementSuffixStatsPart", "alterStatementSuffixMergeFiles", 
		"alterStatementSuffixBucketNum", "createIndexStatement", "locationPath", 
		"dropIndexStatement", "tablePartitionPrefix", "blocking", "alterStatementSuffixCompact", 
		"alterStatementSuffixSetOwner", "fileFormat", "inputFileFormat", "tabTypeExpr", 
		"partTypeExpr", "tabPartColTypeExpr", "descStatement", "analyzeStatement", 
		"showStatement", "lockStatement", "lockDatabase", "lockMode", "unlockStatement", 
		"unlockDatabase", "createRoleStatement", "dropRoleStatement", "grantPrivileges", 
		"revokePrivileges", "grantRole", "revokeRole", "showRoleGrants", "showRoles", 
		"showCurrentRole", "setRole", "showGrants", "showRolePrincipals", "privilegeIncludeColObject", 
		"privilegeObject", "privObject", "privObjectCols", "privilegeList", "privlegeDef", 
		"privilegeType", "principalSpecification", "principalName", "withGrantOption", 
		"grantOptionFor", "adminOptionFor", "withAdminOption", "metastoreCheck", 
		"resourceList", "resource", "resourceType", "createFunctionStatement", 
		"dropFunctionStatement", "reloadFunctionStatement", "createMacroStatement", 
		"dropMacroStatement", "createViewStatement", "createMaterializedViewStatement", 
		"viewPartition", "dropViewStatement", "dropMaterializedViewStatement", 
		"showFunctionIdentifier", "showStmtIdentifier", "tableComment", "tablePartition", 
		"tableBuckets", "tableSkewed", "rowFormat", "recordReader", "recordWriter", 
		"rowFormatSerde", "rowFormatDelimited", "tableRowFormat", "tablePropertiesPrefixed", 
		"tableProperties", "tablePropertiesList", "keyValueProperty", "keyProperty", 
		"tableRowFormatFieldIdentifier", "tableRowFormatCollItemsIdentifier", 
		"tableRowFormatMapKeysIdentifier", "tableRowFormatLinesIdentifier", "tableRowNullFormat", 
		"tableFileFormat", "tableLocation", "columnNameTypeList", "columnNameTypeOrConstraintList", 
		"columnNameColonTypeList", "columnNameList", "columnName", "extColumnName", 
		"columnNameOrderList", "columnParenthesesList", "enableValidateSpecification", 
		"enableSpecification", "validateSpecification", "enforcedSpecification", 
		"relySpecification", "createConstraint", "alterConstraintWithName", "pkConstraint", 
		"createForeignKey", "alterForeignKeyWithName", "skewedValueElement", "skewedColumnValuePairList", 
		"skewedColumnValuePair", "skewedColumnValues", "skewedColumnValue", "skewedValueLocationElement", 
		"orderSpecification", "nullOrdering", "columnNameOrder", "columnNameCommentList", 
		"columnNameComment", "columnRefOrder", "columnNameType", "columnNameTypeOrConstraint", 
		"tableConstraint", "columnNameTypeConstraint", "columnConstraint", "foreignKeyConstraint", 
		"colConstraint", "alterColumnConstraint", "alterForeignKeyConstraint", 
		"alterColConstraint", "tableConstraintPrimaryKey", "constraintOptsCreate", 
		"constraintOptsAlter", "columnNameColonType", "colType", "colTypeList", 
		"type_db_col", "primitiveType", "listType", "structType", "mapType", "unionType", 
		"setOperator", "queryStatementExpression", "queryStatementExpressionBody", 
		"withClause", "cteStatement", "fromStatement", "singleFromStatement", 
		"regularBody", "atomSelectStatement", "selectStatement", "setOpSelectStatement", 
		"selectStatementWithCTE", "body", "insertClause", "destination", "limitClause", 
		"deleteStatement", "columnAssignmentClause", "setColumnsClause", "updateStatement", 
		"sqlTransactionStatement", "startTransactionStatement", "transactionMode", 
		"transactionAccessMode", "isolationLevel", "levelOfIsolation", "commitStatement", 
		"rollbackStatement", "setAutoCommitStatement", "abortTransactionStatement", 
		"mergeStatement", "whenClauses", "whenNotMatchedClause", "whenMatchedAndClause", 
		"whenMatchedThenClause", "updateOrDelete", "killQueryStatement", "selectClause", 
		"selectList", "selectTrfmClause", "selectItem", "trfmClause", "selectExpression", 
		"selectExpressionList", "window_clause", "window_defn", "window_specification", 
		"window_frame", "window_range_expression", "window_value_expression", 
		"window_frame_start_boundary", "window_frame_boundary", "tableAllColumns", 
		"tableOrColumn", "expressionList", "aliasList", "fromClause", "fromSource", 
		"atomjoinSource", "joinSource", "joinSourcePart", "uniqueJoinSource", 
		"uniqueJoinExpr", "uniqueJoinToken", "joinToken", "lateralView", "tableAlias", 
		"tableBucketSample", "splitSample", "tableSample", "tableSource", "uniqueJoinTableSource", 
		"tableName", "viewName", "subQuerySource", "partitioningSpec", "partitionTableFunctionSource", 
		"partitionedTableFunction", "whereClause", "searchCondition", "valuesClause", 
		"valuesTableConstructor", "valueRowConstructor", "virtualTableSource", 
		"groupByClause", "groupby_expression", "groupByEmpty", "rollupStandard", 
		"rollupOldSyntax", "groupingSetExpression", "groupingSetExpressionMultiple", 
		"groupingExpressionSingle", "havingClause", "havingCondition", "expressionsInParenthesis", 
		"expressionsNotInParenthesis", "expressionPart", "expressions", "columnRefOrderInParenthesis", 
		"columnRefOrderNotInParenthesis", "orderByClause", "clusterByClause", 
		"partitionByClause", "distributeByClause", "sortByClause", "function", 
		"functionName", "castExpression", "caseExpression", "whenExpression", 
		"floorExpression", "floorDateQualifiers", "extractExpression", "timeQualifiers", 
		"constant", "stringLiteralSequence", "charSetStringLiteral", "dateLiteral", 
		"timestampLiteral", "timestampLocalTZLiteral", "intervalValue", "intervalLiteral", 
		"intervalExpression", "intervalQualifiers", "atomExpression", "precedenceUnaryOperator", 
		"isCondition", "precedenceBitwiseXorOperator", "precedenceStarOperator", 
		"precedencePlusOperator", "precedenceConcatenateOperator", "precedenceAmpersandOperator", 
		"precedenceBitwiseOrOperator", "precedenceRegexpOperator", "precedenceSimilarOperator", 
		"precedenceDistinctOperator", "precedenceEqualOperator", "precedenceNotOperator", 
		"precedenceAndOperator", "precedenceOrOperator", "expression", "subQueryExpression", 
		"precedenceSimilarExpressionPart", "precedenceSimilarExpressionAtom", 
		"precedenceSimilarExpressionIn", "precedenceSimilarExpressionPartNot", 
		"booleanValue", "booleanValueTok", "tableOrPartition", "partitionSpec", 
		"partitionVal", "dropPartitionSpec", "dropPartitionVal", "dropPartitionOperator", 
		"sysFuncNames", "descFuncNames", "identifier", "functionIdentifier", "principalIdentifier", 
		"nonReserved", "sql11ReservedKeywordsUsedAsFunctionName"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'.'", "':'", "','", "';'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", null, "'<=>'", null, "'<='", 
		"'<'", "'>='", "'>'", "'/'", "'+'", "'-'", "'*'", "'%'", "'DIV'", "'&'", 
		"'~'", "'|'", "'||'", "'^'", "'?'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KW_TRUE", "KW_FALSE", "KW_ALL", "KW_NONE", "KW_AND", "KW_OR", "KW_NOT", 
		"KW_LIKE", "KW_ANY", "KW_IF", "KW_EXISTS", "KW_ASC", "KW_DESC", "KW_NULLS", 
		"KW_LAST", "KW_ORDER", "KW_GROUP", "KW_BY", "KW_HAVING", "KW_WHERE", "KW_FROM", 
		"KW_AS", "KW_SELECT", "KW_DISTINCT", "KW_INSERT", "KW_OVERWRITE", "KW_OUTER", 
		"KW_UNIQUEJOIN", "KW_PRESERVE", "KW_JOIN", "KW_LEFT", "KW_RIGHT", "KW_FULL", 
		"KW_ON", "KW_PARTITION", "KW_PARTITIONS", "KW_TABLE", "KW_TABLES", "KW_COLUMNS", 
		"KW_INDEX", "KW_INDEXES", "KW_REBUILD", "KW_FUNCTIONS", "KW_SHOW", "KW_MSCK", 
		"KW_REPAIR", "KW_DIRECTORY", "KW_LOCAL", "KW_TRANSFORM", "KW_USING", "KW_CLUSTER", 
		"KW_DISTRIBUTE", "KW_SORT", "KW_UNION", "KW_EXCEPT", "KW_LOAD", "KW_EXPORT", 
		"KW_IMPORT", "KW_REPLICATION", "KW_METADATA", "KW_DATA", "KW_INPATH", 
		"KW_IS", "KW_NULL", "KW_CREATE", "KW_EXTERNAL", "KW_ALTER", "KW_CHANGE", 
		"KW_COLUMN", "KW_FIRST", "KW_AFTER", "KW_DESCRIBE", "KW_DROP", "KW_RENAME", 
		"KW_TO", "KW_COMMENT", "KW_BOOLEAN", "KW_TINYINT", "KW_SMALLINT", "KW_INT", 
		"KW_BIGINT", "KW_FLOAT", "KW_DOUBLE", "KW_PRECISION", "KW_DATE", "KW_DATETIME", 
		"KW_TIMESTAMP", "KW_TIMESTAMPLOCALTZ", "KW_TIME", "KW_ZONE", "KW_INTERVAL", 
		"KW_DECIMAL", "KW_STRING", "KW_CHAR", "KW_VARCHAR", "KW_ARRAY", "KW_STRUCT", 
		"KW_MAP", "KW_UNIONTYPE", "KW_REDUCE", "KW_PARTITIONED", "KW_CLUSTERED", 
		"KW_SORTED", "KW_INTO", "KW_BUCKETS", "KW_ROW", "KW_ROWS", "KW_FORMAT", 
		"KW_DELIMITED", "KW_FIELDS", "KW_TERMINATED", "KW_ESCAPED", "KW_COLLECTION", 
		"KW_ITEMS", "KW_KEYS", "KW_KEY_TYPE", "KW_KILL", "KW_LINES", "KW_STORED", 
		"KW_FILEFORMAT", "KW_INPUTFORMAT", "KW_OUTPUTFORMAT", "KW_INPUTDRIVER", 
		"KW_OUTPUTDRIVER", "KW_ENABLE", "KW_DISABLE", "KW_LOCATION", "KW_TABLESAMPLE", 
		"KW_BUCKET", "KW_OUT", "KW_OF", "KW_PERCENT", "KW_CAST", "KW_ADD", "KW_REPLACE", 
		"KW_RLIKE", "KW_REGEXP", "KW_TEMPORARY", "KW_FUNCTION", "KW_MACRO", "KW_FILE", 
		"KW_JAR", "KW_EXPLAIN", "KW_EXTENDED", "KW_FORMATTED", "KW_DEPENDENCY", 
		"KW_LOGICAL", "KW_SERDE", "KW_WITH", "KW_DEFERRED", "KW_SERDEPROPERTIES", 
		"KW_DBPROPERTIES", "KW_LIMIT", "KW_OFFSET", "KW_SET", "KW_UNSET", "KW_TBLPROPERTIES", 
		"KW_IDXPROPERTIES", "KW_VALUE_TYPE", "KW_ELEM_TYPE", "KW_DEFINED", "KW_CASE", 
		"KW_WHEN", "KW_THEN", "KW_ELSE", "KW_END", "KW_MAPJOIN", "KW_STREAMTABLE", 
		"KW_CLUSTERSTATUS", "KW_UTC", "KW_UTCTIMESTAMP", "KW_LONG", "KW_DELETE", 
		"KW_PLUS", "KW_MINUS", "KW_FETCH", "KW_INTERSECT", "KW_VIEW", "KW_VIEWS", 
		"KW_IN", "KW_DATABASE", "KW_DATABASES", "KW_MATERIALIZED", "KW_SCHEMA", 
		"KW_SCHEMAS", "KW_GRANT", "KW_REVOKE", "KW_SSL", "KW_UNDO", "KW_LOCK", 
		"KW_LOCKS", "KW_UNLOCK", "KW_SHARED", "KW_EXCLUSIVE", "KW_PROCEDURE", 
		"KW_UNSIGNED", "KW_WHILE", "KW_READ", "KW_READS", "KW_PURGE", "KW_RANGE", 
		"KW_ANALYZE", "KW_BEFORE", "KW_BETWEEN", "KW_BOTH", "KW_BINARY", "KW_CROSS", 
		"KW_CONTINUE", "KW_CURSOR", "KW_TRIGGER", "KW_RECORDREADER", "KW_RECORDWRITER", 
		"KW_SEMI", "KW_LATERAL", "KW_TOUCH", "KW_ARCHIVE", "KW_UNARCHIVE", "KW_COMPUTE", 
		"KW_STATISTICS", "KW_USE", "KW_OPTION", "KW_CONCATENATE", "KW_SHOW_DATABASE", 
		"KW_UPDATE", "KW_RESTRICT", "KW_CASCADE", "KW_SKEWED", "KW_ROLLUP", "KW_CUBE", 
		"KW_DIRECTORIES", "KW_FOR", "KW_WINDOW", "KW_UNBOUNDED", "KW_PRECEDING", 
		"KW_FOLLOWING", "KW_CURRENT", "KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP", 
		"KW_LESS", "KW_MORE", "KW_OVER", "KW_GROUPING", "KW_SETS", "KW_TRUNCATE", 
		"KW_NOSCAN", "KW_USER", "KW_ROLE", "KW_ROLES", "KW_INNER", "KW_EXCHANGE", 
		"KW_URI", "KW_SERVER", "KW_ADMIN", "KW_OWNER", "KW_PRINCIPALS", "KW_COMPACT", 
		"KW_COMPACTIONS", "KW_TRANSACTIONS", "KW_REWRITE", "KW_AUTHORIZATION", 
		"KW_REOPTIMIZATION", "KW_CONF", "KW_VALUES", "KW_RELOAD", "KW_YEAR", "KW_QUERY", 
		"KW_QUARTER", "KW_MONTH", "KW_WEEK", "KW_DAY", "KW_DOW", "KW_HOUR", "KW_MINUTE", 
		"KW_SECOND", "KW_START", "KW_TRANSACTION", "KW_COMMIT", "KW_ROLLBACK", 
		"KW_WORK", "KW_ONLY", "KW_WRITE", "KW_ISOLATION", "KW_LEVEL", "KW_SNAPSHOT", 
		"KW_AUTOCOMMIT", "KW_CACHE", "KW_PRIMARY", "KW_FOREIGN", "KW_REFERENCES", 
		"KW_CONSTRAINT", "KW_ENFORCED", "KW_VALIDATE", "KW_NOVALIDATE", "KW_RELY", 
		"KW_NORELY", "KW_UNIQUE", "KW_KEY", "KW_ABORT", "KW_EXTRACT", "KW_FLOOR", 
		"KW_MERGE", "KW_MATCHED", "KW_REPL", "KW_DUMP", "KW_STATUS", "KW_VECTORIZATION", 
		"KW_SUMMARY", "KW_OPERATOR", "KW_EXPRESSION", "KW_DETAIL", "KW_WAIT", 
		"KW_RESOURCE", "KW_PLAN", "KW_QUERY_PARALLELISM", "KW_PLANS", "KW_ACTIVATE", 
		"KW_DEFAULT", "KW_CHECK", "KW_POOL", "KW_MOVE", "KW_DO", "KW_ALLOC_FRACTION", 
		"KW_SCHEDULING_POLICY", "KW_PATH", "KW_MAPPING", "KW_WORKLOAD", "KW_MANAGEMENT", 
		"KW_ACTIVE", "KW_UNMANAGED", "KW_APPLICATION", "KW_SYNC", "DOT", "COLON", 
		"COMMA", "SEMICOLON", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", 
		"RCURLY", "EQUAL", "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", "LESSTHAN", 
		"GREATERTHANOREQUALTO", "GREATERTHAN", "DIVIDE", "PLUS", "MINUS", "STAR", 
		"MOD", "DIV", "AMPERSAND", "TILDE", "BITWISEOR", "CONCATENATE", "BITWISEXOR", 
		"QUESTION", "DOLLAR", "StringLiteral", "CharSetLiteral", "IntegralLiteral", 
		"NumberLiteral", "ByteLengthLiteral", "Number", "Identifier", "QuotedIdentifier", 
		"CharSetName", "WS", "LINE_COMMENT", "QUERY_HINT", "SHOW_HINT", "HIDDEN_HINT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HiveParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static HiveParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HiveParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HiveParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(HiveParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext[] statementSeparator() {
			return GetRuleContexts<StatementSeparatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator(int i) {
			return GetRuleContext<StatementSeparatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyContext[] empty() {
			return GetRuleContexts<EmptyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyContext empty(int i) {
			return GetRuleContext<EmptyContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 0, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_DESC) | (1L << KW_FROM) | (1L << KW_SELECT) | (1L << KW_INSERT) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_LOAD) | (1L << KW_EXPORT) | (1L << KW_IMPORT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (KW_CREATE - 65)) | (1L << (KW_ALTER - 65)) | (1L << (KW_DESCRIBE - 65)) | (1L << (KW_DROP - 65)) | (1L << (KW_MAP - 65)) | (1L << (KW_REDUCE - 65)) | (1L << (KW_KILL - 65)))) != 0) || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (KW_EXPLAIN - 143)) | (1L << (KW_WITH - 143)) | (1L << (KW_SET - 143)) | (1L << (KW_DELETE - 143)) | (1L << (KW_GRANT - 143)) | (1L << (KW_REVOKE - 143)) | (1L << (KW_LOCK - 143)) | (1L << (KW_UNLOCK - 143)) | (1L << (KW_ANALYZE - 143)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (KW_USE - 220)) | (1L << (KW_UPDATE - 220)) | (1L << (KW_TRUNCATE - 220)) | (1L << (KW_RELOAD - 220)) | (1L << (KW_START - 220)) | (1L << (KW_COMMIT - 220)) | (1L << (KW_ROLLBACK - 220)))) != 0) || ((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (KW_ABORT - 298)) | (1L << (KW_MERGE - 298)) | (1L << (KW_REPL - 298)) | (1L << (SEMICOLON - 298)) | (1L << (LPAREN - 298)))) != 0)) {
				{
				State = 756;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_DESC:
				case KW_FROM:
				case KW_SELECT:
				case KW_INSERT:
				case KW_SHOW:
				case KW_MSCK:
				case KW_LOAD:
				case KW_EXPORT:
				case KW_IMPORT:
				case KW_CREATE:
				case KW_ALTER:
				case KW_DESCRIBE:
				case KW_DROP:
				case KW_MAP:
				case KW_REDUCE:
				case KW_KILL:
				case KW_EXPLAIN:
				case KW_WITH:
				case KW_SET:
				case KW_DELETE:
				case KW_GRANT:
				case KW_REVOKE:
				case KW_LOCK:
				case KW_UNLOCK:
				case KW_ANALYZE:
				case KW_USE:
				case KW_UPDATE:
				case KW_TRUNCATE:
				case KW_RELOAD:
				case KW_START:
				case KW_COMMIT:
				case KW_ROLLBACK:
				case KW_ABORT:
				case KW_MERGE:
				case KW_REPL:
				case LPAREN:
					{
					State = 752;
					statement();
					State = 753;
					statementSeparator();
					}
					break;
				case SEMICOLON:
					{
					State = 755;
					empty();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 761;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeparatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(HiveParser.SEMICOLON, 0); }
		public StatementSeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeparator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterStatementSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitStatementSeparator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementSeparator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementSeparatorContext statementSeparator() {
		StatementSeparatorContext _localctx = new StatementSeparatorContext(Context, State);
		EnterRule(_localctx, 2, RULE_statementSeparator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementSeparatorContext statementSeparator() {
			return GetRuleContext<StatementSeparatorContext>(0);
		}
		public EmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyContext empty() {
		EmptyContext _localctx = new EmptyContext(Context, State);
		EnterRule(_localctx, 4, RULE_empty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			statementSeparator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplainStatementContext explainStatement() {
			return GetRuleContext<ExplainStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecStatementContext execStatement() {
			return GetRuleContext<ExecStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_statement);
		try {
			State = 769;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_EXPLAIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 767;
				explainStatement();
				}
				break;
			case KW_DESC:
			case KW_FROM:
			case KW_SELECT:
			case KW_INSERT:
			case KW_SHOW:
			case KW_MSCK:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_CREATE:
			case KW_ALTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_MAP:
			case KW_REDUCE:
			case KW_KILL:
			case KW_WITH:
			case KW_SET:
			case KW_DELETE:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_LOCK:
			case KW_UNLOCK:
			case KW_ANALYZE:
			case KW_USE:
			case KW_UPDATE:
			case KW_TRUNCATE:
			case KW_RELOAD:
			case KW_START:
			case KW_COMMIT:
			case KW_ROLLBACK:
			case KW_ABORT:
			case KW_MERGE:
			case KW_REPL:
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 768;
				execStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXPLAIN() { return GetToken(HiveParser.KW_EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExecStatementContext execStatement() {
			return GetRuleContext<ExecStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REWRITE() { return GetToken(HiveParser.KW_REWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryStatementExpressionContext queryStatementExpression() {
			return GetRuleContext<QueryStatementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainOptionContext[] explainOption() {
			return GetRuleContexts<ExplainOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainOptionContext explainOption(int i) {
			return GetRuleContext<ExplainOptionContext>(i);
		}
		public ExplainStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExplainStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExplainStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainStatementContext explainStatement() {
		ExplainStatementContext _localctx = new ExplainStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_explainStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 771;
			Match(KW_EXPLAIN);
			State = 781;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_DESC:
			case KW_FROM:
			case KW_SELECT:
			case KW_INSERT:
			case KW_SHOW:
			case KW_MSCK:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_IMPORT:
			case KW_CREATE:
			case KW_ALTER:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_MAP:
			case KW_REDUCE:
			case KW_KILL:
			case KW_EXTENDED:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_WITH:
			case KW_SET:
			case KW_DELETE:
			case KW_GRANT:
			case KW_REVOKE:
			case KW_LOCK:
			case KW_UNLOCK:
			case KW_ANALYZE:
			case KW_USE:
			case KW_UPDATE:
			case KW_TRUNCATE:
			case KW_AUTHORIZATION:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_START:
			case KW_COMMIT:
			case KW_ROLLBACK:
			case KW_ABORT:
			case KW_MERGE:
			case KW_REPL:
			case KW_VECTORIZATION:
			case LPAREN:
				{
				State = 775;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 772;
						explainOption();
						}
						} 
					}
					State = 777;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				State = 778;
				execStatement();
				}
				break;
			case KW_REWRITE:
				{
				State = 779;
				Match(KW_REWRITE);
				State = 780;
				queryStatementExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTENDED() { return GetToken(HiveParser.KW_EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FORMATTED() { return GetToken(HiveParser.KW_FORMATTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEPENDENCY() { return GetToken(HiveParser.KW_DEPENDENCY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOGICAL() { return GetToken(HiveParser.KW_LOGICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AUTHORIZATION() { return GetToken(HiveParser.KW_AUTHORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ANALYZE() { return GetToken(HiveParser.KW_ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REOPTIMIZATION() { return GetToken(HiveParser.KW_REOPTIMIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VECTORIZATION() { return GetToken(HiveParser.KW_VECTORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VectorizationOnlyContext vectorizationOnly() {
			return GetRuleContext<VectorizationOnlyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VectorizatonDetailContext vectorizatonDetail() {
			return GetRuleContext<VectorizatonDetailContext>(0);
		}
		public ExplainOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExplainOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExplainOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplainOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplainOptionContext explainOption() {
		ExplainOptionContext _localctx = new ExplainOptionContext(Context, State);
		EnterRule(_localctx, 10, RULE_explainOption);
		int _la;
		try {
			State = 797;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_EXTENDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 783;
				Match(KW_EXTENDED);
				}
				break;
			case KW_FORMATTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 784;
				Match(KW_FORMATTED);
				}
				break;
			case KW_DEPENDENCY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 785;
				Match(KW_DEPENDENCY);
				}
				break;
			case KW_LOGICAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 786;
				Match(KW_LOGICAL);
				}
				break;
			case KW_AUTHORIZATION:
				EnterOuterAlt(_localctx, 5);
				{
				State = 787;
				Match(KW_AUTHORIZATION);
				}
				break;
			case KW_ANALYZE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 788;
				Match(KW_ANALYZE);
				}
				break;
			case KW_REOPTIMIZATION:
				EnterOuterAlt(_localctx, 7);
				{
				State = 789;
				Match(KW_REOPTIMIZATION);
				}
				break;
			case KW_VECTORIZATION:
				EnterOuterAlt(_localctx, 8);
				{
				{
				State = 790;
				Match(KW_VECTORIZATION);
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_ONLY) {
					{
					State = 791;
					vectorizationOnly();
					}
				}

				State = 795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 307)) & ~0x3f) == 0 && ((1L << (_la - 307)) & ((1L << (KW_SUMMARY - 307)) | (1L << (KW_OPERATOR - 307)) | (1L << (KW_EXPRESSION - 307)) | (1L << (KW_DETAIL - 307)))) != 0)) {
					{
					State = 794;
					vectorizatonDetail();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorizationOnlyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ONLY() { return GetToken(HiveParser.KW_ONLY, 0); }
		public VectorizationOnlyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorizationOnly; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterVectorizationOnly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitVectorizationOnly(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorizationOnly(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorizationOnlyContext vectorizationOnly() {
		VectorizationOnlyContext _localctx = new VectorizationOnlyContext(Context, State);
		EnterRule(_localctx, 12, RULE_vectorizationOnly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799;
			Match(KW_ONLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VectorizatonDetailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUMMARY() { return GetToken(HiveParser.KW_SUMMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPERATOR() { return GetToken(HiveParser.KW_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXPRESSION() { return GetToken(HiveParser.KW_EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DETAIL() { return GetToken(HiveParser.KW_DETAIL, 0); }
		public VectorizatonDetailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vectorizatonDetail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterVectorizatonDetail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitVectorizatonDetail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVectorizatonDetail(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VectorizatonDetailContext vectorizatonDetail() {
		VectorizatonDetailContext _localctx = new VectorizatonDetailContext(Context, State);
		EnterRule(_localctx, 14, RULE_vectorizatonDetail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 801;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 307)) & ~0x3f) == 0 && ((1L << (_la - 307)) & ((1L << (KW_SUMMARY - 307)) | (1L << (KW_OPERATOR - 307)) | (1L << (KW_EXPRESSION - 307)) | (1L << (KW_DETAIL - 307)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryStatementExpressionContext queryStatementExpression() {
			return GetRuleContext<QueryStatementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadStatementContext loadStatement() {
			return GetRuleContext<LoadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExportStatementContext exportStatement() {
			return GetRuleContext<ExportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplDumpStatementContext replDumpStatement() {
			return GetRuleContext<ReplDumpStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplLoadStatementContext replLoadStatement() {
			return GetRuleContext<ReplLoadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplStatusStatementContext replStatusStatement() {
			return GetRuleContext<ReplStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DdlStatementContext ddlStatement() {
			return GetRuleContext<DdlStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlTransactionStatementContext sqlTransactionStatement() {
			return GetRuleContext<SqlTransactionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MergeStatementContext mergeStatement() {
			return GetRuleContext<MergeStatementContext>(0);
		}
		public ExecStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_execStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExecStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExecStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExecStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExecStatementContext execStatement() {
		ExecStatementContext _localctx = new ExecStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_execStatement);
		try {
			State = 815;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 803;
				queryStatementExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 804;
				loadStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 805;
				exportStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 806;
				importStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 807;
				replDumpStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 808;
				replLoadStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 809;
				replStatusStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 810;
				ddlStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 811;
				deleteStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 812;
				updateStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 813;
				sqlTransactionStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 814;
				mergeStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOAD() { return GetToken(HiveParser.KW_LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATA() { return GetToken(HiveParser.KW_DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INPATH() { return GetToken(HiveParser.KW_INPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INTO() { return GetToken(HiveParser.KW_INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableOrPartitionContext tableOrPartition() {
			return GetRuleContext<TableOrPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCAL() { return GetToken(HiveParser.KW_LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OVERWRITE() { return GetToken(HiveParser.KW_OVERWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InputFileFormatContext inputFileFormat() {
			return GetRuleContext<InputFileFormatContext>(0);
		}
		public LoadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterLoadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitLoadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStatementContext loadStatement() {
		LoadStatementContext _localctx = new LoadStatementContext(Context, State);
		EnterRule(_localctx, 18, RULE_loadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 817;
			Match(KW_LOAD);
			State = 818;
			Match(KW_DATA);
			State = 820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_LOCAL) {
				{
				State = 819;
				Match(KW_LOCAL);
				}
			}

			State = 822;
			Match(KW_INPATH);
			State = 823;
			Match(StringLiteral);
			State = 825;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_OVERWRITE) {
				{
				State = 824;
				Match(KW_OVERWRITE);
				}
			}

			State = 827;
			Match(KW_INTO);
			State = 828;
			Match(KW_TABLE);
			State = 829;
			tableOrPartition();
			State = 831;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_INPUTFORMAT) {
				{
				State = 830;
				inputFileFormat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(HiveParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPLICATION() { return GetToken(HiveParser.KW_REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_METADATA() { return GetToken(HiveParser.KW_METADATA, 0); }
		public ReplicationClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterReplicationClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitReplicationClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplicationClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationClauseContext replicationClause() {
		ReplicationClauseContext _localctx = new ReplicationClauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_replicationClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 833;
			Match(KW_FOR);
			State = 835;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_METADATA) {
				{
				State = 834;
				Match(KW_METADATA);
				}
			}

			State = 837;
			Match(KW_REPLICATION);
			State = 838;
			Match(LPAREN);
			State = 839;
			Match(StringLiteral);
			State = 840;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXPORT() { return GetToken(HiveParser.KW_EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableOrPartitionContext tableOrPartition() {
			return GetRuleContext<TableOrPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TO() { return GetToken(HiveParser.KW_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationClauseContext replicationClause() {
			return GetRuleContext<ReplicationClauseContext>(0);
		}
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_exportStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			Match(KW_EXPORT);
			State = 843;
			Match(KW_TABLE);
			State = 844;
			tableOrPartition();
			State = 845;
			Match(KW_TO);
			State = 846;
			Match(StringLiteral);
			State = 848;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_FOR) {
				{
				State = 847;
				replicationClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public IToken path;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPORT() { return GetToken(HiveParser.KW_IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FROM() { return GetToken(HiveParser.KW_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableOrPartitionContext tableOrPartition() {
			return GetRuleContext<TableOrPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableLocationContext tableLocation() {
			return GetRuleContext<TableLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTERNAL() { return GetToken(HiveParser.KW_EXTERNAL, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_importStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			Match(KW_IMPORT);
			State = 856;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_TABLE || _la==KW_EXTERNAL) {
				{
				State = 852;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_EXTERNAL) {
					{
					State = 851;
					Match(KW_EXTERNAL);
					}
				}

				State = 854;
				Match(KW_TABLE);
				State = 855;
				tableOrPartition();
				}
			}

			State = 858;
			Match(KW_FROM);
			{
			State = 859;
			_localctx.path = Match(StringLiteral);
			}
			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_LOCATION) {
				{
				State = 860;
				tableLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplDumpStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPL() { return GetToken(HiveParser.KW_REPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DUMP() { return GetToken(HiveParser.KW_DUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(HiveParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FROM() { return GetToken(HiveParser.KW_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(HiveParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(HiveParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplConfigsContext replConfigs() {
			return GetRuleContext<ReplConfigsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TO() { return GetToken(HiveParser.KW_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LIMIT() { return GetToken(HiveParser.KW_LIMIT, 0); }
		public ReplDumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replDumpStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterReplDumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitReplDumpStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplDumpStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplDumpStatementContext replDumpStatement() {
		ReplDumpStatementContext _localctx = new ReplDumpStatementContext(Context, State);
		EnterRule(_localctx, 26, RULE_replDumpStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863;
			Match(KW_REPL);
			State = 864;
			Match(KW_DUMP);
			State = 865;
			identifier();
			State = 868;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 866;
				Match(DOT);
				State = 867;
				identifier();
				}
			}

			State = 880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_FROM) {
				{
				State = 870;
				Match(KW_FROM);
				State = 871;
				Match(Number);
				State = 874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_TO) {
					{
					State = 872;
					Match(KW_TO);
					State = 873;
					Match(Number);
					}
				}

				State = 878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_LIMIT) {
					{
					State = 876;
					Match(KW_LIMIT);
					State = 877;
					Match(Number);
					}
				}

				}
			}

			State = 884;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WITH) {
				{
				State = 882;
				Match(KW_WITH);
				State = 883;
				replConfigs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplLoadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPL() { return GetToken(HiveParser.KW_REPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOAD() { return GetToken(HiveParser.KW_LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FROM() { return GetToken(HiveParser.KW_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplConfigsContext replConfigs() {
			return GetRuleContext<ReplConfigsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(HiveParser.DOT, 0); }
		public ReplLoadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replLoadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterReplLoadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitReplLoadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplLoadStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplLoadStatementContext replLoadStatement() {
		ReplLoadStatementContext _localctx = new ReplLoadStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_replLoadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 886;
			Match(KW_REPL);
			State = 887;
			Match(KW_LOAD);
			State = 893;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ASC) | (1L << KW_DESC) | (1L << KW_NULLS) | (1L << KW_LAST) | (1L << KW_OVERWRITE) | (1L << KW_PARTITIONS) | (1L << KW_TABLES) | (1L << KW_COLUMNS) | (1L << KW_INDEX) | (1L << KW_INDEXES) | (1L << KW_REBUILD) | (1L << KW_FUNCTIONS) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_REPAIR) | (1L << KW_DIRECTORY) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT) | (1L << KW_LOAD) | (1L << KW_EXPORT) | (1L << KW_REPLICATION) | (1L << KW_METADATA) | (1L << KW_DATA) | (1L << KW_INPATH))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (KW_CHANGE - 68)) | (1L << (KW_FIRST - 68)) | (1L << (KW_AFTER - 68)) | (1L << (KW_RENAME - 68)) | (1L << (KW_COMMENT - 68)) | (1L << (KW_TINYINT - 68)) | (1L << (KW_DATETIME - 68)) | (1L << (KW_ZONE - 68)) | (1L << (KW_STRING - 68)) | (1L << (KW_STRUCT - 68)) | (1L << (KW_UNIONTYPE - 68)) | (1L << (KW_PARTITIONED - 68)) | (1L << (KW_CLUSTERED - 68)) | (1L << (KW_SORTED - 68)) | (1L << (KW_BUCKETS - 68)) | (1L << (KW_FORMAT - 68)) | (1L << (KW_DELIMITED - 68)) | (1L << (KW_FIELDS - 68)) | (1L << (KW_TERMINATED - 68)) | (1L << (KW_ESCAPED - 68)) | (1L << (KW_COLLECTION - 68)) | (1L << (KW_ITEMS - 68)) | (1L << (KW_KEYS - 68)) | (1L << (KW_KEY_TYPE - 68)) | (1L << (KW_KILL - 68)) | (1L << (KW_LINES - 68)) | (1L << (KW_STORED - 68)) | (1L << (KW_FILEFORMAT - 68)) | (1L << (KW_INPUTFORMAT - 68)) | (1L << (KW_OUTPUTFORMAT - 68)) | (1L << (KW_INPUTDRIVER - 68)) | (1L << (KW_OUTPUTDRIVER - 68)) | (1L << (KW_ENABLE - 68)) | (1L << (KW_DISABLE - 68)) | (1L << (KW_LOCATION - 68)) | (1L << (KW_BUCKET - 68)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (KW_ADD - 134)) | (1L << (KW_REPLACE - 134)) | (1L << (KW_TEMPORARY - 134)) | (1L << (KW_FILE - 134)) | (1L << (KW_JAR - 134)) | (1L << (KW_EXPLAIN - 134)) | (1L << (KW_FORMATTED - 134)) | (1L << (KW_DEPENDENCY - 134)) | (1L << (KW_LOGICAL - 134)) | (1L << (KW_SERDE - 134)) | (1L << (KW_DEFERRED - 134)) | (1L << (KW_SERDEPROPERTIES - 134)) | (1L << (KW_DBPROPERTIES - 134)) | (1L << (KW_LIMIT - 134)) | (1L << (KW_OFFSET - 134)) | (1L << (KW_UNSET - 134)) | (1L << (KW_TBLPROPERTIES - 134)) | (1L << (KW_IDXPROPERTIES - 134)) | (1L << (KW_VALUE_TYPE - 134)) | (1L << (KW_ELEM_TYPE - 134)) | (1L << (KW_DEFINED - 134)) | (1L << (KW_MAPJOIN - 134)) | (1L << (KW_STREAMTABLE - 134)) | (1L << (KW_CLUSTERSTATUS - 134)) | (1L << (KW_UTC - 134)) | (1L << (KW_UTCTIMESTAMP - 134)) | (1L << (KW_LONG - 134)) | (1L << (KW_PLUS - 134)) | (1L << (KW_VIEW - 134)) | (1L << (KW_VIEWS - 134)) | (1L << (KW_DATABASES - 134)) | (1L << (KW_MATERIALIZED - 134)) | (1L << (KW_SCHEMA - 134)) | (1L << (KW_SCHEMAS - 134)) | (1L << (KW_SSL - 134)) | (1L << (KW_UNDO - 134)) | (1L << (KW_LOCK - 134)) | (1L << (KW_LOCKS - 134)) | (1L << (KW_UNLOCK - 134)) | (1L << (KW_SHARED - 134)) | (1L << (KW_EXCLUSIVE - 134)) | (1L << (KW_UNSIGNED - 134)) | (1L << (KW_WHILE - 134)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (KW_READ - 198)) | (1L << (KW_PURGE - 198)) | (1L << (KW_ANALYZE - 198)) | (1L << (KW_BEFORE - 198)) | (1L << (KW_CONTINUE - 198)) | (1L << (KW_RECORDREADER - 198)) | (1L << (KW_RECORDWRITER - 198)) | (1L << (KW_SEMI - 198)) | (1L << (KW_TOUCH - 198)) | (1L << (KW_ARCHIVE - 198)) | (1L << (KW_UNARCHIVE - 198)) | (1L << (KW_COMPUTE - 198)) | (1L << (KW_STATISTICS - 198)) | (1L << (KW_USE - 198)) | (1L << (KW_OPTION - 198)) | (1L << (KW_CONCATENATE - 198)) | (1L << (KW_SHOW_DATABASE - 198)) | (1L << (KW_RESTRICT - 198)) | (1L << (KW_CASCADE - 198)) | (1L << (KW_SKEWED - 198)) | (1L << (KW_DIRECTORIES - 198)) | (1L << (KW_SETS - 198)) | (1L << (KW_NOSCAN - 198)) | (1L << (KW_ROLE - 198)) | (1L << (KW_ROLES - 198)) | (1L << (KW_URI - 198)) | (1L << (KW_SERVER - 198)) | (1L << (KW_ADMIN - 198)) | (1L << (KW_OWNER - 198)) | (1L << (KW_PRINCIPALS - 198)) | (1L << (KW_COMPACT - 198)) | (1L << (KW_COMPACTIONS - 198)) | (1L << (KW_TRANSACTIONS - 198)) | (1L << (KW_REWRITE - 198)) | (1L << (KW_REOPTIMIZATION - 198)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (KW_RELOAD - 264)) | (1L << (KW_YEAR - 264)) | (1L << (KW_QUERY - 264)) | (1L << (KW_QUARTER - 264)) | (1L << (KW_MONTH - 264)) | (1L << (KW_WEEK - 264)) | (1L << (KW_DAY - 264)) | (1L << (KW_DOW - 264)) | (1L << (KW_HOUR - 264)) | (1L << (KW_MINUTE - 264)) | (1L << (KW_SECOND - 264)) | (1L << (KW_TRANSACTION - 264)) | (1L << (KW_WORK - 264)) | (1L << (KW_WRITE - 264)) | (1L << (KW_ISOLATION - 264)) | (1L << (KW_LEVEL - 264)) | (1L << (KW_SNAPSHOT - 264)) | (1L << (KW_AUTOCOMMIT - 264)) | (1L << (KW_CACHE - 264)) | (1L << (KW_ENFORCED - 264)) | (1L << (KW_VALIDATE - 264)) | (1L << (KW_NOVALIDATE - 264)) | (1L << (KW_RELY - 264)) | (1L << (KW_NORELY - 264)) | (1L << (KW_KEY - 264)) | (1L << (KW_ABORT - 264)) | (1L << (KW_MATCHED - 264)) | (1L << (KW_REPL - 264)) | (1L << (KW_DUMP - 264)) | (1L << (KW_STATUS - 264)) | (1L << (KW_VECTORIZATION - 264)) | (1L << (KW_SUMMARY - 264)) | (1L << (KW_OPERATOR - 264)) | (1L << (KW_EXPRESSION - 264)) | (1L << (KW_DETAIL - 264)) | (1L << (KW_WAIT - 264)) | (1L << (KW_RESOURCE - 264)) | (1L << (KW_PLAN - 264)) | (1L << (KW_QUERY_PARALLELISM - 264)) | (1L << (KW_PLANS - 264)) | (1L << (KW_ACTIVATE - 264)) | (1L << (KW_DEFAULT - 264)) | (1L << (KW_CHECK - 264)) | (1L << (KW_POOL - 264)) | (1L << (KW_MOVE - 264)) | (1L << (KW_DO - 264)) | (1L << (KW_ALLOC_FRACTION - 264)) | (1L << (KW_SCHEDULING_POLICY - 264)) | (1L << (KW_PATH - 264)) | (1L << (KW_MAPPING - 264)) | (1L << (KW_WORKLOAD - 264)) | (1L << (KW_MANAGEMENT - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (KW_ACTIVE - 328)) | (1L << (KW_UNMANAGED - 328)) | (1L << (Identifier - 328)))) != 0)) {
				{
				State = 888;
				identifier();
				State = 891;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 889;
					Match(DOT);
					State = 890;
					identifier();
					}
				}

				}
			}

			State = 895;
			Match(KW_FROM);
			State = 896;
			Match(StringLiteral);
			State = 899;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WITH) {
				{
				State = 897;
				Match(KW_WITH);
				State = 898;
				replConfigs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplConfigsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplConfigsListContext replConfigsList() {
			return GetRuleContext<ReplConfigsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public ReplConfigsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replConfigs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterReplConfigs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitReplConfigs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplConfigs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplConfigsContext replConfigs() {
		ReplConfigsContext _localctx = new ReplConfigsContext(Context, State);
		EnterRule(_localctx, 30, RULE_replConfigs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 901;
			Match(LPAREN);
			State = 902;
			replConfigsList();
			State = 903;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplConfigsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext[] keyValueProperty() {
			return GetRuleContexts<KeyValuePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext keyValueProperty(int i) {
			return GetRuleContext<KeyValuePropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ReplConfigsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replConfigsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterReplConfigsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitReplConfigsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplConfigsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplConfigsListContext replConfigsList() {
		ReplConfigsListContext _localctx = new ReplConfigsListContext(Context, State);
		EnterRule(_localctx, 32, RULE_replConfigsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 905;
			keyValueProperty();
			State = 910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 906;
				Match(COMMA);
				State = 907;
				keyValueProperty();
				}
				}
				State = 912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPL() { return GetToken(HiveParser.KW_REPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATUS() { return GetToken(HiveParser.KW_STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(HiveParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplConfigsContext replConfigs() {
			return GetRuleContext<ReplConfigsContext>(0);
		}
		public ReplStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterReplStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitReplStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplStatusStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplStatusStatementContext replStatusStatement() {
		ReplStatusStatementContext _localctx = new ReplStatusStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_replStatusStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			Match(KW_REPL);
			State = 914;
			Match(KW_STATUS);
			State = 915;
			identifier();
			State = 918;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 916;
				Match(DOT);
				State = 917;
				identifier();
				}
			}

			State = 922;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WITH) {
				{
				State = 920;
				Match(KW_WITH);
				State = 921;
				replConfigs();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdlStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseStatementContext createDatabaseStatement() {
			return GetRuleContext<CreateDatabaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SwitchDatabaseStatementContext switchDatabaseStatement() {
			return GetRuleContext<SwitchDatabaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropDatabaseStatementContext dropDatabaseStatement() {
			return GetRuleContext<DropDatabaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableStatementContext createTableStatement() {
			return GetRuleContext<CreateTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableStatementContext dropTableStatement() {
			return GetRuleContext<DropTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncateTableStatementContext truncateTableStatement() {
			return GetRuleContext<TruncateTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementContext alterStatement() {
			return GetRuleContext<AlterStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DescStatementContext descStatement() {
			return GetRuleContext<DescStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowStatementContext showStatement() {
			return GetRuleContext<ShowStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MetastoreCheckContext metastoreCheck() {
			return GetRuleContext<MetastoreCheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateViewStatementContext createViewStatement() {
			return GetRuleContext<CreateViewStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateMaterializedViewStatementContext createMaterializedViewStatement() {
			return GetRuleContext<CreateMaterializedViewStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropViewStatementContext dropViewStatement() {
			return GetRuleContext<DropViewStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropMaterializedViewStatementContext dropMaterializedViewStatement() {
			return GetRuleContext<DropMaterializedViewStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionStatementContext createFunctionStatement() {
			return GetRuleContext<CreateFunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateMacroStatementContext createMacroStatement() {
			return GetRuleContext<CreateMacroStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropFunctionStatementContext dropFunctionStatement() {
			return GetRuleContext<DropFunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReloadFunctionStatementContext reloadFunctionStatement() {
			return GetRuleContext<ReloadFunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropMacroStatementContext dropMacroStatement() {
			return GetRuleContext<DropMacroStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnalyzeStatementContext analyzeStatement() {
			return GetRuleContext<AnalyzeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockStatementContext lockStatement() {
			return GetRuleContext<LockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlockStatementContext unlockStatement() {
			return GetRuleContext<UnlockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockDatabaseContext lockDatabase() {
			return GetRuleContext<LockDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlockDatabaseContext unlockDatabase() {
			return GetRuleContext<UnlockDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateRoleStatementContext createRoleStatement() {
			return GetRuleContext<CreateRoleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropRoleStatementContext dropRoleStatement() {
			return GetRuleContext<DropRoleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantPrivilegesContext grantPrivileges() {
			return GetRuleContext<GrantPrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokePrivilegesContext revokePrivileges() {
			return GetRuleContext<RevokePrivilegesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowGrantsContext showGrants() {
			return GetRuleContext<ShowGrantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowRoleGrantsContext showRoleGrants() {
			return GetRuleContext<ShowRoleGrantsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowRolePrincipalsContext showRolePrincipals() {
			return GetRuleContext<ShowRolePrincipalsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowRolesContext showRoles() {
			return GetRuleContext<ShowRolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantRoleContext grantRole() {
			return GetRuleContext<GrantRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeRoleContext revokeRole() {
			return GetRuleContext<RevokeRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetRoleContext setRole() {
			return GetRuleContext<SetRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCurrentRoleContext showCurrentRole() {
			return GetRuleContext<ShowCurrentRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbortTransactionStatementContext abortTransactionStatement() {
			return GetRuleContext<AbortTransactionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KillQueryStatementContext killQueryStatement() {
			return GetRuleContext<KillQueryStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexStatementContext createIndexStatement() {
			return GetRuleContext<CreateIndexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropIndexStatementContext dropIndexStatement() {
			return GetRuleContext<DropIndexStatementContext>(0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ddlStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDdlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDdlStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDdlStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdlStatementContext ddlStatement() {
		DdlStatementContext _localctx = new DdlStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_ddlStatement);
		try {
			State = 964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 924;
				createDatabaseStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 925;
				switchDatabaseStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 926;
				dropDatabaseStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 927;
				createTableStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 928;
				dropTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 929;
				truncateTableStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 930;
				alterStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 931;
				descStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 932;
				showStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 933;
				metastoreCheck();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 934;
				createViewStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 935;
				createMaterializedViewStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 936;
				dropViewStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 937;
				dropMaterializedViewStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 938;
				createFunctionStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 939;
				createMacroStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 940;
				dropFunctionStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 941;
				reloadFunctionStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 942;
				dropMacroStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 943;
				analyzeStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 944;
				lockStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 945;
				unlockStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 946;
				lockDatabase();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 947;
				unlockDatabase();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 948;
				createRoleStatement();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 949;
				dropRoleStatement();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 950;
				grantPrivileges();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 951;
				revokePrivileges();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 952;
				showGrants();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 953;
				showRoleGrants();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 954;
				showRolePrincipals();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 955;
				showRoles();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 956;
				grantRole();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 957;
				revokeRole();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 958;
				setRole();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 959;
				showCurrentRole();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 960;
				abortTransactionStatement();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 961;
				killQueryStatement();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 962;
				createIndexStatement();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 963;
				dropIndexStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(HiveParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXISTS() { return GetToken(HiveParser.KW_EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966;
			Match(KW_IF);
			State = 967;
			Match(KW_EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestrictOrCascadeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RESTRICT() { return GetToken(HiveParser.KW_RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CASCADE() { return GetToken(HiveParser.KW_CASCADE, 0); }
		public RestrictOrCascadeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restrictOrCascade; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRestrictOrCascade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRestrictOrCascade(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRestrictOrCascade(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RestrictOrCascadeContext restrictOrCascade() {
		RestrictOrCascadeContext _localctx = new RestrictOrCascadeContext(Context, State);
		EnterRule(_localctx, 40, RULE_restrictOrCascade);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 969;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_RESTRICT || _la==KW_CASCADE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(HiveParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(HiveParser.KW_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXISTS() { return GetToken(HiveParser.KW_EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfNotExists(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 42, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971;
			Match(KW_IF);
			State = 972;
			Match(KW_NOT);
			State = 973;
			Match(KW_EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RewriteEnabledContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENABLE() { return GetToken(HiveParser.KW_ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REWRITE() { return GetToken(HiveParser.KW_REWRITE, 0); }
		public RewriteEnabledContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewriteEnabled; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRewriteEnabled(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRewriteEnabled(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRewriteEnabled(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RewriteEnabledContext rewriteEnabled() {
		RewriteEnabledContext _localctx = new RewriteEnabledContext(Context, State);
		EnterRule(_localctx, 44, RULE_rewriteEnabled);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975;
			Match(KW_ENABLE);
			State = 976;
			Match(KW_REWRITE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RewriteDisabledContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISABLE() { return GetToken(HiveParser.KW_DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REWRITE() { return GetToken(HiveParser.KW_REWRITE, 0); }
		public RewriteDisabledContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewriteDisabled; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRewriteDisabled(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRewriteDisabled(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRewriteDisabled(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RewriteDisabledContext rewriteDisabled() {
		RewriteDisabledContext _localctx = new RewriteDisabledContext(Context, State);
		EnterRule(_localctx, 46, RULE_rewriteDisabled);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			Match(KW_DISABLE);
			State = 979;
			Match(KW_REWRITE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoredAsDirsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STORED() { return GetToken(HiveParser.KW_STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DIRECTORIES() { return GetToken(HiveParser.KW_DIRECTORIES, 0); }
		public StoredAsDirsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storedAsDirs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterStoredAsDirs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitStoredAsDirs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStoredAsDirs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StoredAsDirsContext storedAsDirs() {
		StoredAsDirsContext _localctx = new StoredAsDirsContext(Context, State);
		EnterRule(_localctx, 48, RULE_storedAsDirs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981;
			Match(KW_STORED);
			State = 982;
			Match(KW_AS);
			State = 983;
			Match(KW_DIRECTORIES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrReplaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OR() { return GetToken(HiveParser.KW_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPLACE() { return GetToken(HiveParser.KW_REPLACE, 0); }
		public OrReplaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orReplace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterOrReplace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitOrReplace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrReplace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrReplaceContext orReplace() {
		OrReplaceContext _localctx = new OrReplaceContext(Context, State);
		EnterRule(_localctx, 50, RULE_orReplace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985;
			Match(KW_OR);
			State = 986;
			Match(KW_REPLACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CREATE() { return GetToken(HiveParser.KW_CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATABASE() { return GetToken(HiveParser.KW_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMA() { return GetToken(HiveParser.KW_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DatabaseCommentContext databaseComment() {
			return GetRuleContext<DatabaseCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DbLocationContext dbLocation() {
			return GetRuleContext<DbLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DBPROPERTIES() { return GetToken(HiveParser.KW_DBPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DbPropertiesContext dbProperties() {
			return GetRuleContext<DbPropertiesContext>(0);
		}
		public CreateDatabaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateDatabaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseStatementContext createDatabaseStatement() {
		CreateDatabaseStatementContext _localctx = new CreateDatabaseStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_createDatabaseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 988;
			Match(KW_CREATE);
			State = 989;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_DATABASE || _la==KW_SCHEMA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 990;
				ifNotExists();
				}
			}

			State = 993;
			identifier();
			State = 995;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COMMENT) {
				{
				State = 994;
				databaseComment();
				}
			}

			State = 998;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_LOCATION) {
				{
				State = 997;
				dbLocation();
				}
			}

			State = 1003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WITH) {
				{
				State = 1000;
				Match(KW_WITH);
				State = 1001;
				Match(KW_DBPROPERTIES);
				State = 1002;
				dbProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DbLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCATION() { return GetToken(HiveParser.KW_LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public DbLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDbLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDbLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DbLocationContext dbLocation() {
		DbLocationContext _localctx = new DbLocationContext(Context, State);
		EnterRule(_localctx, 54, RULE_dbLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005;
			Match(KW_LOCATION);
			State = 1006;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DbPropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DbPropertiesListContext dbPropertiesList() {
			return GetRuleContext<DbPropertiesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public DbPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbProperties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDbProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDbProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DbPropertiesContext dbProperties() {
		DbPropertiesContext _localctx = new DbPropertiesContext(Context, State);
		EnterRule(_localctx, 56, RULE_dbProperties);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			Match(LPAREN);
			State = 1009;
			dbPropertiesList();
			State = 1010;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DbPropertiesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext[] keyValueProperty() {
			return GetRuleContexts<KeyValuePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext keyValueProperty(int i) {
			return GetRuleContext<KeyValuePropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public DbPropertiesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dbPropertiesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDbPropertiesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDbPropertiesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDbPropertiesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DbPropertiesListContext dbPropertiesList() {
		DbPropertiesListContext _localctx = new DbPropertiesListContext(Context, State);
		EnterRule(_localctx, 58, RULE_dbPropertiesList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012;
			keyValueProperty();
			State = 1017;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1013;
				Match(COMMA);
				State = 1014;
				keyValueProperty();
				}
				}
				State = 1019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchDatabaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USE() { return GetToken(HiveParser.KW_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SwitchDatabaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchDatabaseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSwitchDatabaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSwitchDatabaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchDatabaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchDatabaseStatementContext switchDatabaseStatement() {
		SwitchDatabaseStatementContext _localctx = new SwitchDatabaseStatementContext(Context, State);
		EnterRule(_localctx, 60, RULE_switchDatabaseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			Match(KW_USE);
			State = 1021;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATABASE() { return GetToken(HiveParser.KW_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMA() { return GetToken(HiveParser.KW_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestrictOrCascadeContext restrictOrCascade() {
			return GetRuleContext<RestrictOrCascadeContext>(0);
		}
		public DropDatabaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabaseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDropDatabaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDropDatabaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropDatabaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseStatementContext dropDatabaseStatement() {
		DropDatabaseStatementContext _localctx = new DropDatabaseStatementContext(Context, State);
		EnterRule(_localctx, 62, RULE_dropDatabaseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1023;
			Match(KW_DROP);
			State = 1024;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_DATABASE || _la==KW_SCHEMA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 1025;
				ifExists();
				}
			}

			State = 1028;
			identifier();
			State = 1030;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RESTRICT || _la==KW_CASCADE) {
				{
				State = 1029;
				restrictOrCascade();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatabaseCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMMENT() { return GetToken(HiveParser.KW_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public DatabaseCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_databaseComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDatabaseComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDatabaseComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatabaseComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DatabaseCommentContext databaseComment() {
		DatabaseCommentContext _localctx = new DatabaseCommentContext(Context, State);
		EnterRule(_localctx, 64, RULE_databaseComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032;
			Match(KW_COMMENT);
			State = 1033;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CREATE() { return GetToken(HiveParser.KW_CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LIKE() { return GetToken(HiveParser.KW_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TEMPORARY() { return GetToken(HiveParser.KW_TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTERNAL() { return GetToken(HiveParser.KW_EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRowFormatContext tableRowFormat() {
			return GetRuleContext<TableRowFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFileFormatContext tableFileFormat() {
			return GetRuleContext<TableFileFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableLocationContext tableLocation() {
			return GetRuleContext<TableLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
			return GetRuleContext<TablePropertiesPrefixedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeOrConstraintListContext columnNameTypeOrConstraintList() {
			return GetRuleContext<ColumnNameTypeOrConstraintListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableCommentContext tableComment() {
			return GetRuleContext<TableCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablePartitionContext tablePartition() {
			return GetRuleContext<TablePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableBucketsContext tableBuckets() {
			return GetRuleContext<TableBucketsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableSkewedContext tableSkewed() {
			return GetRuleContext<TableSkewedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementWithCTEContext selectStatementWithCTE() {
			return GetRuleContext<SelectStatementWithCTEContext>(0);
		}
		public CreateTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCreateTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCreateTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableStatementContext createTableStatement() {
		CreateTableStatementContext _localctx = new CreateTableStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_createTableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			Match(KW_CREATE);
			State = 1037;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_TEMPORARY) {
				{
				State = 1036;
				Match(KW_TEMPORARY);
				}
			}

			State = 1040;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_EXTERNAL) {
				{
				State = 1039;
				Match(KW_EXTERNAL);
				}
			}

			State = 1042;
			Match(KW_TABLE);
			State = 1044;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 1043;
				ifNotExists();
				}
			}

			State = 1046;
			tableName();
			State = 1095;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_LIKE:
				{
				State = 1047;
				Match(KW_LIKE);
				State = 1048;
				tableName();
				State = 1050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_ROW) {
					{
					State = 1049;
					tableRowFormat();
					}
				}

				State = 1053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_STORED) {
					{
					State = 1052;
					tableFileFormat();
					}
				}

				State = 1056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_LOCATION) {
					{
					State = 1055;
					tableLocation();
					}
				}

				State = 1059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_TBLPROPERTIES) {
					{
					State = 1058;
					tablePropertiesPrefixed();
					}
				}

				}
				break;
			case KW_AS:
			case KW_COMMENT:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_ROW:
			case KW_STORED:
			case KW_LOCATION:
			case KW_TBLPROPERTIES:
			case KW_SKEWED:
			case SEMICOLON:
			case LPAREN:
				{
				State = 1065;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 1061;
					Match(LPAREN);
					State = 1062;
					columnNameTypeOrConstraintList();
					State = 1063;
					Match(RPAREN);
					}
				}

				State = 1068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_COMMENT) {
					{
					State = 1067;
					tableComment();
					}
				}

				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PARTITIONED) {
					{
					State = 1070;
					tablePartition();
					}
				}

				State = 1074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_CLUSTERED) {
					{
					State = 1073;
					tableBuckets();
					}
				}

				State = 1077;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_SKEWED) {
					{
					State = 1076;
					tableSkewed();
					}
				}

				State = 1080;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_ROW) {
					{
					State = 1079;
					tableRowFormat();
					}
				}

				State = 1083;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_STORED) {
					{
					State = 1082;
					tableFileFormat();
					}
				}

				State = 1086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_LOCATION) {
					{
					State = 1085;
					tableLocation();
					}
				}

				State = 1089;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_TBLPROPERTIES) {
					{
					State = 1088;
					tablePropertiesPrefixed();
					}
				}

				State = 1093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_AS) {
					{
					State = 1091;
					Match(KW_AS);
					State = 1092;
					selectStatementWithCTE();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRUNCATE() { return GetToken(HiveParser.KW_TRUNCATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePartitionPrefixContext tablePartitionPrefix() {
			return GetRuleContext<TablePartitionPrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COLUMNS() { return GetToken(HiveParser.KW_COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameListContext columnNameList() {
			return GetRuleContext<ColumnNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTruncateTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTruncateTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTruncateTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableStatementContext truncateTableStatement() {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_truncateTableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097;
			Match(KW_TRUNCATE);
			State = 1098;
			Match(KW_TABLE);
			State = 1099;
			tablePartitionPrefix();
			State = 1105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COLUMNS) {
				{
				State = 1100;
				Match(KW_COLUMNS);
				State = 1101;
				Match(LPAREN);
				State = 1102;
				columnNameList();
				State = 1103;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PURGE() { return GetToken(HiveParser.KW_PURGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationClauseContext replicationClause() {
			return GetRuleContext<ReplicationClauseContext>(0);
		}
		public DropTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDropTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDropTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropTableStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropTableStatementContext dropTableStatement() {
		DropTableStatementContext _localctx = new DropTableStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_dropTableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1107;
			Match(KW_DROP);
			State = 1108;
			Match(KW_TABLE);
			State = 1110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 1109;
				ifExists();
				}
			}

			State = 1112;
			tableName();
			State = 1114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PURGE) {
				{
				State = 1113;
				Match(KW_PURGE);
				}
			}

			State = 1117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_FOR) {
				{
				State = 1116;
				replicationClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALTER() { return GetToken(HiveParser.KW_ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableStatementSuffixContext alterTableStatementSuffix() {
			return GetRuleContext<AlterTableStatementSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VIEW() { return GetToken(HiveParser.KW_VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterViewStatementSuffixContext alterViewStatementSuffix() {
			return GetRuleContext<AlterViewStatementSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MATERIALIZED() { return GetToken(HiveParser.KW_MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterMaterializedViewStatementSuffixContext alterMaterializedViewStatementSuffix() {
			return GetRuleContext<AlterMaterializedViewStatementSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseStatementSuffixContext alterDatabaseStatementSuffix() {
			return GetRuleContext<AlterDatabaseStatementSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATABASE() { return GetToken(HiveParser.KW_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMA() { return GetToken(HiveParser.KW_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INDEX() { return GetToken(HiveParser.KW_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterIndexStatementSuffixContext alterIndexStatementSuffix() {
			return GetRuleContext<AlterIndexStatementSuffixContext>(0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementContext alterStatement() {
		AlterStatementContext _localctx = new AlterStatementContext(Context, State);
		EnterRule(_localctx, 72, RULE_alterStatement);
		int _la;
		try {
			State = 1144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1119;
				Match(KW_ALTER);
				State = 1120;
				Match(KW_TABLE);
				State = 1121;
				tableName();
				State = 1122;
				alterTableStatementSuffix();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1124;
				Match(KW_ALTER);
				State = 1125;
				Match(KW_VIEW);
				State = 1126;
				tableName();
				State = 1128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_AS) {
					{
					State = 1127;
					Match(KW_AS);
					}
				}

				State = 1130;
				alterViewStatementSuffix();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1132;
				Match(KW_ALTER);
				State = 1133;
				Match(KW_MATERIALIZED);
				State = 1134;
				Match(KW_VIEW);
				State = 1135;
				tableName();
				State = 1136;
				alterMaterializedViewStatementSuffix();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1138;
				Match(KW_ALTER);
				State = 1139;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_DATABASE || _la==KW_SCHEMA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1140;
				alterDatabaseStatementSuffix();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1141;
				Match(KW_ALTER);
				State = 1142;
				Match(KW_INDEX);
				State = 1143;
				alterIndexStatementSuffix();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableStatementSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixRenameContext alterStatementSuffixRename() {
			return GetRuleContext<AlterStatementSuffixRenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixDropPartitionsContext alterStatementSuffixDropPartitions() {
			return GetRuleContext<AlterStatementSuffixDropPartitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixAddPartitionsContext alterStatementSuffixAddPartitions() {
			return GetRuleContext<AlterStatementSuffixAddPartitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixTouchContext alterStatementSuffixTouch() {
			return GetRuleContext<AlterStatementSuffixTouchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixArchiveContext alterStatementSuffixArchive() {
			return GetRuleContext<AlterStatementSuffixArchiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixUnArchiveContext alterStatementSuffixUnArchive() {
			return GetRuleContext<AlterStatementSuffixUnArchiveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixPropertiesContext alterStatementSuffixProperties() {
			return GetRuleContext<AlterStatementSuffixPropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixSkewedbyContext alterStatementSuffixSkewedby() {
			return GetRuleContext<AlterStatementSuffixSkewedbyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixExchangePartitionContext alterStatementSuffixExchangePartition() {
			return GetRuleContext<AlterStatementSuffixExchangePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementPartitionKeyTypeContext alterStatementPartitionKeyType() {
			return GetRuleContext<AlterStatementPartitionKeyTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixDropConstraintContext alterStatementSuffixDropConstraint() {
			return GetRuleContext<AlterStatementSuffixDropConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixAddConstraintContext alterStatementSuffixAddConstraint() {
			return GetRuleContext<AlterStatementSuffixAddConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTblPartitionStatementSuffixContext alterTblPartitionStatementSuffix() {
			return GetRuleContext<AlterTblPartitionStatementSuffixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixSetOwnerContext alterStatementSuffixSetOwner() {
			return GetRuleContext<AlterStatementSuffixSetOwnerContext>(0);
		}
		public AlterTableStatementSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableStatementSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterTableStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterTableStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTableStatementSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableStatementSuffixContext alterTableStatementSuffix() {
		AlterTableStatementSuffixContext _localctx = new AlterTableStatementSuffixContext(Context, State);
		EnterRule(_localctx, 74, RULE_alterTableStatementSuffix);
		int _la;
		try {
			State = 1163;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1146;
				alterStatementSuffixRename();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1147;
				alterStatementSuffixDropPartitions();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1148;
				alterStatementSuffixAddPartitions();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1149;
				alterStatementSuffixTouch();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1150;
				alterStatementSuffixArchive();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1151;
				alterStatementSuffixUnArchive();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1152;
				alterStatementSuffixProperties();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1153;
				alterStatementSuffixSkewedby();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1154;
				alterStatementSuffixExchangePartition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1155;
				alterStatementPartitionKeyType();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1156;
				alterStatementSuffixDropConstraint();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1157;
				alterStatementSuffixAddConstraint();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PARTITION) {
					{
					State = 1158;
					partitionSpec();
					}
				}

				State = 1161;
				alterTblPartitionStatementSuffix();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1162;
				alterStatementSuffixSetOwner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTblPartitionStatementSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixFileFormatContext alterStatementSuffixFileFormat() {
			return GetRuleContext<AlterStatementSuffixFileFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixLocationContext alterStatementSuffixLocation() {
			return GetRuleContext<AlterStatementSuffixLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixMergeFilesContext alterStatementSuffixMergeFiles() {
			return GetRuleContext<AlterStatementSuffixMergeFilesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixSerdePropertiesContext alterStatementSuffixSerdeProperties() {
			return GetRuleContext<AlterStatementSuffixSerdePropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixRenamePartContext alterStatementSuffixRenamePart() {
			return GetRuleContext<AlterStatementSuffixRenamePartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixBucketNumContext alterStatementSuffixBucketNum() {
			return GetRuleContext<AlterStatementSuffixBucketNumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTblPartitionStatementSuffixSkewedLocationContext alterTblPartitionStatementSuffixSkewedLocation() {
			return GetRuleContext<AlterTblPartitionStatementSuffixSkewedLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixClusterbySortbyContext alterStatementSuffixClusterbySortby() {
			return GetRuleContext<AlterStatementSuffixClusterbySortbyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixCompactContext alterStatementSuffixCompact() {
			return GetRuleContext<AlterStatementSuffixCompactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixUpdateStatsColContext alterStatementSuffixUpdateStatsCol() {
			return GetRuleContext<AlterStatementSuffixUpdateStatsColContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixUpdateStatsContext alterStatementSuffixUpdateStats() {
			return GetRuleContext<AlterStatementSuffixUpdateStatsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixRenameColContext alterStatementSuffixRenameCol() {
			return GetRuleContext<AlterStatementSuffixRenameColContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixAddColContext alterStatementSuffixAddCol() {
			return GetRuleContext<AlterStatementSuffixAddColContext>(0);
		}
		public AlterTblPartitionStatementSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTblPartitionStatementSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterTblPartitionStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterTblPartitionStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTblPartitionStatementSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTblPartitionStatementSuffixContext alterTblPartitionStatementSuffix() {
		AlterTblPartitionStatementSuffixContext _localctx = new AlterTblPartitionStatementSuffixContext(Context, State);
		EnterRule(_localctx, 76, RULE_alterTblPartitionStatementSuffix);
		try {
			State = 1178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1165;
				alterStatementSuffixFileFormat();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1166;
				alterStatementSuffixLocation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1167;
				alterStatementSuffixMergeFiles();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1168;
				alterStatementSuffixSerdeProperties();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1169;
				alterStatementSuffixRenamePart();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1170;
				alterStatementSuffixBucketNum();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1171;
				alterTblPartitionStatementSuffixSkewedLocation();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1172;
				alterStatementSuffixClusterbySortby();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1173;
				alterStatementSuffixCompact();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1174;
				alterStatementSuffixUpdateStatsCol();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1175;
				alterStatementSuffixUpdateStats();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1176;
				alterStatementSuffixRenameCol();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1177;
				alterStatementSuffixAddCol();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementPartitionKeyTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARTITION() { return GetToken(HiveParser.KW_PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COLUMN() { return GetToken(HiveParser.KW_COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeContext columnNameType() {
			return GetRuleContext<ColumnNameTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public AlterStatementPartitionKeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementPartitionKeyType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementPartitionKeyType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementPartitionKeyType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementPartitionKeyType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementPartitionKeyTypeContext alterStatementPartitionKeyType() {
		AlterStatementPartitionKeyTypeContext _localctx = new AlterStatementPartitionKeyTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_alterStatementPartitionKeyType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180;
			Match(KW_PARTITION);
			State = 1181;
			Match(KW_COLUMN);
			State = 1182;
			Match(LPAREN);
			State = 1183;
			columnNameType();
			State = 1184;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewStatementSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterViewSuffixPropertiesContext alterViewSuffixProperties() {
			return GetRuleContext<AlterViewSuffixPropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixRenameContext alterStatementSuffixRename() {
			return GetRuleContext<AlterStatementSuffixRenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixAddPartitionsContext alterStatementSuffixAddPartitions() {
			return GetRuleContext<AlterStatementSuffixAddPartitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixDropPartitionsContext alterStatementSuffixDropPartitions() {
			return GetRuleContext<AlterStatementSuffixDropPartitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementWithCTEContext selectStatementWithCTE() {
			return GetRuleContext<SelectStatementWithCTEContext>(0);
		}
		public AlterViewStatementSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterViewStatementSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterViewStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterViewStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterViewStatementSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewStatementSuffixContext alterViewStatementSuffix() {
		AlterViewStatementSuffixContext _localctx = new AlterViewStatementSuffixContext(Context, State);
		EnterRule(_localctx, 80, RULE_alterViewStatementSuffix);
		try {
			State = 1191;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_SET:
			case KW_UNSET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1186;
				alterViewSuffixProperties();
				}
				break;
			case KW_RENAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1187;
				alterStatementSuffixRename();
				}
				break;
			case KW_ADD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1188;
				alterStatementSuffixAddPartitions();
				}
				break;
			case KW_DROP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1189;
				alterStatementSuffixDropPartitions();
				}
				break;
			case KW_SELECT:
			case KW_MAP:
			case KW_REDUCE:
			case KW_WITH:
			case LPAREN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1190;
				selectStatementWithCTE();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterMaterializedViewStatementSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterMaterializedViewSuffixRewriteContext alterMaterializedViewSuffixRewrite() {
			return GetRuleContext<AlterMaterializedViewSuffixRewriteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterMaterializedViewSuffixRebuildContext alterMaterializedViewSuffixRebuild() {
			return GetRuleContext<AlterMaterializedViewSuffixRebuildContext>(0);
		}
		public AlterMaterializedViewStatementSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterMaterializedViewStatementSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterMaterializedViewStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterMaterializedViewStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterMaterializedViewStatementSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterMaterializedViewStatementSuffixContext alterMaterializedViewStatementSuffix() {
		AlterMaterializedViewStatementSuffixContext _localctx = new AlterMaterializedViewStatementSuffixContext(Context, State);
		EnterRule(_localctx, 82, RULE_alterMaterializedViewStatementSuffix);
		try {
			State = 1195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ENABLE:
			case KW_DISABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1193;
				alterMaterializedViewSuffixRewrite();
				}
				break;
			case KW_REBUILD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1194;
				alterMaterializedViewSuffixRebuild();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseStatementSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseSuffixPropertiesContext alterDatabaseSuffixProperties() {
			return GetRuleContext<AlterDatabaseSuffixPropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseSuffixSetOwnerContext alterDatabaseSuffixSetOwner() {
			return GetRuleContext<AlterDatabaseSuffixSetOwnerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseSuffixSetLocationContext alterDatabaseSuffixSetLocation() {
			return GetRuleContext<AlterDatabaseSuffixSetLocationContext>(0);
		}
		public AlterDatabaseStatementSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabaseStatementSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterDatabaseStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterDatabaseStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterDatabaseStatementSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseStatementSuffixContext alterDatabaseStatementSuffix() {
		AlterDatabaseStatementSuffixContext _localctx = new AlterDatabaseStatementSuffixContext(Context, State);
		EnterRule(_localctx, 84, RULE_alterDatabaseStatementSuffix);
		try {
			State = 1200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1197;
				alterDatabaseSuffixProperties();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1198;
				alterDatabaseSuffixSetOwner();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1199;
				alterDatabaseSuffixSetLocation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseSuffixPropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DBPROPERTIES() { return GetToken(HiveParser.KW_DBPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DbPropertiesContext dbProperties() {
			return GetRuleContext<DbPropertiesContext>(0);
		}
		public AlterDatabaseSuffixPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabaseSuffixProperties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterDatabaseSuffixProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterDatabaseSuffixProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterDatabaseSuffixProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseSuffixPropertiesContext alterDatabaseSuffixProperties() {
		AlterDatabaseSuffixPropertiesContext _localctx = new AlterDatabaseSuffixPropertiesContext(Context, State);
		EnterRule(_localctx, 86, RULE_alterDatabaseSuffixProperties);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1202;
			identifier();
			State = 1203;
			Match(KW_SET);
			State = 1204;
			Match(KW_DBPROPERTIES);
			State = 1205;
			dbProperties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseSuffixSetOwnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OWNER() { return GetToken(HiveParser.KW_OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalNameContext principalName() {
			return GetRuleContext<PrincipalNameContext>(0);
		}
		public AlterDatabaseSuffixSetOwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabaseSuffixSetOwner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterDatabaseSuffixSetOwner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterDatabaseSuffixSetOwner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterDatabaseSuffixSetOwner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseSuffixSetOwnerContext alterDatabaseSuffixSetOwner() {
		AlterDatabaseSuffixSetOwnerContext _localctx = new AlterDatabaseSuffixSetOwnerContext(Context, State);
		EnterRule(_localctx, 88, RULE_alterDatabaseSuffixSetOwner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1207;
			identifier();
			State = 1208;
			Match(KW_SET);
			State = 1209;
			Match(KW_OWNER);
			State = 1210;
			principalName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseSuffixSetLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCATION() { return GetToken(HiveParser.KW_LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public AlterDatabaseSuffixSetLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabaseSuffixSetLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterDatabaseSuffixSetLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterDatabaseSuffixSetLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterDatabaseSuffixSetLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseSuffixSetLocationContext alterDatabaseSuffixSetLocation() {
		AlterDatabaseSuffixSetLocationContext _localctx = new AlterDatabaseSuffixSetLocationContext(Context, State);
		EnterRule(_localctx, 90, RULE_alterDatabaseSuffixSetLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1212;
			identifier();
			State = 1213;
			Match(KW_SET);
			State = 1214;
			Match(KW_LOCATION);
			State = 1215;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixRenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RENAME() { return GetToken(HiveParser.KW_RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TO() { return GetToken(HiveParser.KW_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public AlterStatementSuffixRenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixRename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixRename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixRename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixRename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixRenameContext alterStatementSuffixRename() {
		AlterStatementSuffixRenameContext _localctx = new AlterStatementSuffixRenameContext(Context, State);
		EnterRule(_localctx, 92, RULE_alterStatementSuffixRename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1217;
			Match(KW_RENAME);
			State = 1218;
			Match(KW_TO);
			State = 1219;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixAddColContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COLUMNS() { return GetToken(HiveParser.KW_COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeListContext columnNameTypeList() {
			return GetRuleContext<ColumnNameTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ADD() { return GetToken(HiveParser.KW_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPLACE() { return GetToken(HiveParser.KW_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RestrictOrCascadeContext restrictOrCascade() {
			return GetRuleContext<RestrictOrCascadeContext>(0);
		}
		public AlterStatementSuffixAddColContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixAddCol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixAddCol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixAddCol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixAddCol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixAddColContext alterStatementSuffixAddCol() {
		AlterStatementSuffixAddColContext _localctx = new AlterStatementSuffixAddColContext(Context, State);
		EnterRule(_localctx, 94, RULE_alterStatementSuffixAddCol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1221;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_ADD || _la==KW_REPLACE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1222;
			Match(KW_COLUMNS);
			State = 1223;
			Match(LPAREN);
			State = 1224;
			columnNameTypeList();
			State = 1225;
			Match(RPAREN);
			State = 1227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RESTRICT || _la==KW_CASCADE) {
				{
				State = 1226;
				restrictOrCascade();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixAddConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ADD() { return GetToken(HiveParser.KW_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterForeignKeyWithNameContext alterForeignKeyWithName() {
			return GetRuleContext<AlterForeignKeyWithNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterConstraintWithNameContext alterConstraintWithName() {
			return GetRuleContext<AlterConstraintWithNameContext>(0);
		}
		public AlterStatementSuffixAddConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixAddConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixAddConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixAddConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixAddConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixAddConstraintContext alterStatementSuffixAddConstraint() {
		AlterStatementSuffixAddConstraintContext _localctx = new AlterStatementSuffixAddConstraintContext(Context, State);
		EnterRule(_localctx, 96, RULE_alterStatementSuffixAddConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1229;
			Match(KW_ADD);
			State = 1232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 1230;
				alterForeignKeyWithName();
				}
				break;
			case 2:
				{
				State = 1231;
				alterConstraintWithName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixDropConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTRAINT() { return GetToken(HiveParser.KW_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AlterStatementSuffixDropConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixDropConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixDropConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixDropConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixDropConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixDropConstraintContext alterStatementSuffixDropConstraint() {
		AlterStatementSuffixDropConstraintContext _localctx = new AlterStatementSuffixDropConstraintContext(Context, State);
		EnterRule(_localctx, 98, RULE_alterStatementSuffixDropConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1234;
			Match(KW_DROP);
			State = 1235;
			Match(KW_CONSTRAINT);
			State = 1236;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixRenameColContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CHANGE() { return GetToken(HiveParser.KW_CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColTypeContext colType() {
			return GetRuleContext<ColTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COLUMN() { return GetToken(HiveParser.KW_COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterColumnConstraintContext alterColumnConstraint() {
			return GetRuleContext<AlterColumnConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMMENT() { return GetToken(HiveParser.KW_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementChangeColPositionContext alterStatementChangeColPosition() {
			return GetRuleContext<AlterStatementChangeColPositionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestrictOrCascadeContext restrictOrCascade() {
			return GetRuleContext<RestrictOrCascadeContext>(0);
		}
		public AlterStatementSuffixRenameColContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixRenameCol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixRenameCol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixRenameCol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixRenameCol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixRenameColContext alterStatementSuffixRenameCol() {
		AlterStatementSuffixRenameColContext _localctx = new AlterStatementSuffixRenameColContext(Context, State);
		EnterRule(_localctx, 100, RULE_alterStatementSuffixRenameCol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1238;
			Match(KW_CHANGE);
			State = 1240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COLUMN) {
				{
				State = 1239;
				Match(KW_COLUMN);
				}
			}

			State = 1242;
			identifier();
			State = 1243;
			identifier();
			State = 1244;
			colType();
			State = 1246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (KW_PRIMARY - 287)) | (1L << (KW_REFERENCES - 287)) | (1L << (KW_CONSTRAINT - 287)))) != 0)) {
				{
				State = 1245;
				alterColumnConstraint();
				}
			}

			State = 1250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COMMENT) {
				{
				State = 1248;
				Match(KW_COMMENT);
				State = 1249;
				Match(StringLiteral);
				}
			}

			State = 1253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_FIRST || _la==KW_AFTER) {
				{
				State = 1252;
				alterStatementChangeColPosition();
				}
			}

			State = 1256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RESTRICT || _la==KW_CASCADE) {
				{
				State = 1255;
				restrictOrCascade();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixUpdateStatsColContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UPDATE() { return GetToken(HiveParser.KW_UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATISTICS() { return GetToken(HiveParser.KW_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(HiveParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COLUMN() { return GetToken(HiveParser.KW_COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMMENT() { return GetToken(HiveParser.KW_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public AlterStatementSuffixUpdateStatsColContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixUpdateStatsCol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixUpdateStatsCol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixUpdateStatsCol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixUpdateStatsCol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixUpdateStatsColContext alterStatementSuffixUpdateStatsCol() {
		AlterStatementSuffixUpdateStatsColContext _localctx = new AlterStatementSuffixUpdateStatsColContext(Context, State);
		EnterRule(_localctx, 102, RULE_alterStatementSuffixUpdateStatsCol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258;
			Match(KW_UPDATE);
			State = 1259;
			Match(KW_STATISTICS);
			State = 1260;
			Match(KW_FOR);
			State = 1262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COLUMN) {
				{
				State = 1261;
				Match(KW_COLUMN);
				}
			}

			State = 1264;
			identifier();
			State = 1265;
			Match(KW_SET);
			State = 1266;
			tableProperties();
			State = 1269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COMMENT) {
				{
				State = 1267;
				Match(KW_COMMENT);
				State = 1268;
				Match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixUpdateStatsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UPDATE() { return GetToken(HiveParser.KW_UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATISTICS() { return GetToken(HiveParser.KW_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		public AlterStatementSuffixUpdateStatsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixUpdateStats; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixUpdateStats(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixUpdateStats(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixUpdateStats(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixUpdateStatsContext alterStatementSuffixUpdateStats() {
		AlterStatementSuffixUpdateStatsContext _localctx = new AlterStatementSuffixUpdateStatsContext(Context, State);
		EnterRule(_localctx, 104, RULE_alterStatementSuffixUpdateStats);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1271;
			Match(KW_UPDATE);
			State = 1272;
			Match(KW_STATISTICS);
			State = 1273;
			Match(KW_SET);
			State = 1274;
			tableProperties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementChangeColPositionContext : ParserRuleContext {
		public IToken first;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FIRST() { return GetToken(HiveParser.KW_FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AFTER() { return GetToken(HiveParser.KW_AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AlterStatementChangeColPositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementChangeColPosition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementChangeColPosition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementChangeColPosition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementChangeColPosition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementChangeColPositionContext alterStatementChangeColPosition() {
		AlterStatementChangeColPositionContext _localctx = new AlterStatementChangeColPositionContext(Context, State);
		EnterRule(_localctx, 106, RULE_alterStatementChangeColPosition);
		try {
			State = 1279;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_FIRST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1276;
				_localctx.first = Match(KW_FIRST);
				}
				break;
			case KW_AFTER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1277;
				Match(KW_AFTER);
				State = 1278;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixAddPartitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ADD() { return GetToken(HiveParser.KW_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixAddPartitionsElementContext[] alterStatementSuffixAddPartitionsElement() {
			return GetRuleContexts<AlterStatementSuffixAddPartitionsElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementSuffixAddPartitionsElementContext alterStatementSuffixAddPartitionsElement(int i) {
			return GetRuleContext<AlterStatementSuffixAddPartitionsElementContext>(i);
		}
		public AlterStatementSuffixAddPartitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixAddPartitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixAddPartitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixAddPartitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixAddPartitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixAddPartitionsContext alterStatementSuffixAddPartitions() {
		AlterStatementSuffixAddPartitionsContext _localctx = new AlterStatementSuffixAddPartitionsContext(Context, State);
		EnterRule(_localctx, 108, RULE_alterStatementSuffixAddPartitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1281;
			Match(KW_ADD);
			State = 1283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 1282;
				ifNotExists();
				}
			}

			State = 1286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1285;
				alterStatementSuffixAddPartitionsElement();
				}
				}
				State = 1288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KW_PARTITION );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixAddPartitionsElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionLocationContext partitionLocation() {
			return GetRuleContext<PartitionLocationContext>(0);
		}
		public AlterStatementSuffixAddPartitionsElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixAddPartitionsElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixAddPartitionsElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixAddPartitionsElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixAddPartitionsElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixAddPartitionsElementContext alterStatementSuffixAddPartitionsElement() {
		AlterStatementSuffixAddPartitionsElementContext _localctx = new AlterStatementSuffixAddPartitionsElementContext(Context, State);
		EnterRule(_localctx, 110, RULE_alterStatementSuffixAddPartitionsElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1290;
			partitionSpec();
			State = 1292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_LOCATION) {
				{
				State = 1291;
				partitionLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixTouchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TOUCH() { return GetToken(HiveParser.KW_TOUCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext[] partitionSpec() {
			return GetRuleContexts<PartitionSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec(int i) {
			return GetRuleContext<PartitionSpecContext>(i);
		}
		public AlterStatementSuffixTouchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixTouch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixTouch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixTouch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixTouch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixTouchContext alterStatementSuffixTouch() {
		AlterStatementSuffixTouchContext _localctx = new AlterStatementSuffixTouchContext(Context, State);
		EnterRule(_localctx, 112, RULE_alterStatementSuffixTouch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1294;
			Match(KW_TOUCH);
			State = 1298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_PARTITION) {
				{
				{
				State = 1295;
				partitionSpec();
				}
				}
				State = 1300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixArchiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARCHIVE() { return GetToken(HiveParser.KW_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext[] partitionSpec() {
			return GetRuleContexts<PartitionSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec(int i) {
			return GetRuleContext<PartitionSpecContext>(i);
		}
		public AlterStatementSuffixArchiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixArchive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixArchive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixArchive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixArchive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixArchiveContext alterStatementSuffixArchive() {
		AlterStatementSuffixArchiveContext _localctx = new AlterStatementSuffixArchiveContext(Context, State);
		EnterRule(_localctx, 114, RULE_alterStatementSuffixArchive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1301;
			Match(KW_ARCHIVE);
			State = 1305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_PARTITION) {
				{
				{
				State = 1302;
				partitionSpec();
				}
				}
				State = 1307;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixUnArchiveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNARCHIVE() { return GetToken(HiveParser.KW_UNARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext[] partitionSpec() {
			return GetRuleContexts<PartitionSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec(int i) {
			return GetRuleContext<PartitionSpecContext>(i);
		}
		public AlterStatementSuffixUnArchiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixUnArchive; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixUnArchive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixUnArchive(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixUnArchive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixUnArchiveContext alterStatementSuffixUnArchive() {
		AlterStatementSuffixUnArchiveContext _localctx = new AlterStatementSuffixUnArchiveContext(Context, State);
		EnterRule(_localctx, 116, RULE_alterStatementSuffixUnArchive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1308;
			Match(KW_UNARCHIVE);
			State = 1312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_PARTITION) {
				{
				{
				State = 1309;
				partitionSpec();
				}
				}
				State = 1314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCATION() { return GetToken(HiveParser.KW_LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public PartitionLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPartitionLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPartitionLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionLocationContext partitionLocation() {
		PartitionLocationContext _localctx = new PartitionLocationContext(Context, State);
		EnterRule(_localctx, 118, RULE_partitionLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1315;
			Match(KW_LOCATION);
			State = 1316;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixDropPartitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DropPartitionSpecContext[] dropPartitionSpec() {
			return GetRuleContexts<DropPartitionSpecContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropPartitionSpecContext dropPartitionSpec(int i) {
			return GetRuleContext<DropPartitionSpecContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PURGE() { return GetToken(HiveParser.KW_PURGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationClauseContext replicationClause() {
			return GetRuleContext<ReplicationClauseContext>(0);
		}
		public AlterStatementSuffixDropPartitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixDropPartitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixDropPartitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixDropPartitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixDropPartitions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixDropPartitionsContext alterStatementSuffixDropPartitions() {
		AlterStatementSuffixDropPartitionsContext _localctx = new AlterStatementSuffixDropPartitionsContext(Context, State);
		EnterRule(_localctx, 120, RULE_alterStatementSuffixDropPartitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1318;
			Match(KW_DROP);
			State = 1320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 1319;
				ifExists();
				}
			}

			State = 1322;
			dropPartitionSpec();
			State = 1327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1323;
				Match(COMMA);
				State = 1324;
				dropPartitionSpec();
				}
				}
				State = 1329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PURGE) {
				{
				State = 1330;
				Match(KW_PURGE);
				}
			}

			State = 1334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_FOR) {
				{
				State = 1333;
				replicationClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixPropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TBLPROPERTIES() { return GetToken(HiveParser.KW_TBLPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSET() { return GetToken(HiveParser.KW_UNSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterStatementSuffixPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixProperties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixPropertiesContext alterStatementSuffixProperties() {
		AlterStatementSuffixPropertiesContext _localctx = new AlterStatementSuffixPropertiesContext(Context, State);
		EnterRule(_localctx, 122, RULE_alterStatementSuffixProperties);
		int _la;
		try {
			State = 1345;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1336;
				Match(KW_SET);
				State = 1337;
				Match(KW_TBLPROPERTIES);
				State = 1338;
				tableProperties();
				}
				break;
			case KW_UNSET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1339;
				Match(KW_UNSET);
				State = 1340;
				Match(KW_TBLPROPERTIES);
				State = 1342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_IF) {
					{
					State = 1341;
					ifExists();
					}
				}

				State = 1344;
				tableProperties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewSuffixPropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TBLPROPERTIES() { return GetToken(HiveParser.KW_TBLPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSET() { return GetToken(HiveParser.KW_UNSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public AlterViewSuffixPropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterViewSuffixProperties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterViewSuffixProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterViewSuffixProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterViewSuffixProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewSuffixPropertiesContext alterViewSuffixProperties() {
		AlterViewSuffixPropertiesContext _localctx = new AlterViewSuffixPropertiesContext(Context, State);
		EnterRule(_localctx, 124, RULE_alterViewSuffixProperties);
		int _la;
		try {
			State = 1356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1347;
				Match(KW_SET);
				State = 1348;
				Match(KW_TBLPROPERTIES);
				State = 1349;
				tableProperties();
				}
				break;
			case KW_UNSET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1350;
				Match(KW_UNSET);
				State = 1351;
				Match(KW_TBLPROPERTIES);
				State = 1353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_IF) {
					{
					State = 1352;
					ifExists();
					}
				}

				State = 1355;
				tableProperties();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterMaterializedViewSuffixRewriteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RewriteEnabledContext rewriteEnabled() {
			return GetRuleContext<RewriteEnabledContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RewriteDisabledContext rewriteDisabled() {
			return GetRuleContext<RewriteDisabledContext>(0);
		}
		public AlterMaterializedViewSuffixRewriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterMaterializedViewSuffixRewrite; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterMaterializedViewSuffixRewrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterMaterializedViewSuffixRewrite(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterMaterializedViewSuffixRewrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterMaterializedViewSuffixRewriteContext alterMaterializedViewSuffixRewrite() {
		AlterMaterializedViewSuffixRewriteContext _localctx = new AlterMaterializedViewSuffixRewriteContext(Context, State);
		EnterRule(_localctx, 126, RULE_alterMaterializedViewSuffixRewrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ENABLE:
				{
				State = 1358;
				rewriteEnabled();
				}
				break;
			case KW_DISABLE:
				{
				State = 1359;
				rewriteDisabled();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterMaterializedViewSuffixRebuildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REBUILD() { return GetToken(HiveParser.KW_REBUILD, 0); }
		public AlterMaterializedViewSuffixRebuildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterMaterializedViewSuffixRebuild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterMaterializedViewSuffixRebuild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterMaterializedViewSuffixRebuild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterMaterializedViewSuffixRebuild(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterMaterializedViewSuffixRebuildContext alterMaterializedViewSuffixRebuild() {
		AlterMaterializedViewSuffixRebuildContext _localctx = new AlterMaterializedViewSuffixRebuildContext(Context, State);
		EnterRule(_localctx, 128, RULE_alterMaterializedViewSuffixRebuild);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1362;
			Match(KW_REBUILD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixSerdePropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERDE() { return GetToken(HiveParser.KW_SERDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERDEPROPERTIES() { return GetToken(HiveParser.KW_SERDEPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		public AlterStatementSuffixSerdePropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixSerdeProperties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixSerdeProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixSerdeProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixSerdeProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixSerdePropertiesContext alterStatementSuffixSerdeProperties() {
		AlterStatementSuffixSerdePropertiesContext _localctx = new AlterStatementSuffixSerdePropertiesContext(Context, State);
		EnterRule(_localctx, 130, RULE_alterStatementSuffixSerdeProperties);
		int _la;
		try {
			State = 1375;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,92,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1364;
				Match(KW_SET);
				State = 1365;
				Match(KW_SERDE);
				State = 1366;
				Match(StringLiteral);
				State = 1370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_WITH) {
					{
					State = 1367;
					Match(KW_WITH);
					State = 1368;
					Match(KW_SERDEPROPERTIES);
					State = 1369;
					tableProperties();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1372;
				Match(KW_SET);
				State = 1373;
				Match(KW_SERDEPROPERTIES);
				State = 1374;
				tableProperties();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterIndexStatementSuffixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(HiveParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REBUILD() { return GetToken(HiveParser.KW_REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		public AlterIndexStatementSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterIndexStatementSuffix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterIndexStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterIndexStatementSuffix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterIndexStatementSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterIndexStatementSuffixContext alterIndexStatementSuffix() {
		AlterIndexStatementSuffixContext _localctx = new AlterIndexStatementSuffixContext(Context, State);
		EnterRule(_localctx, 132, RULE_alterIndexStatementSuffix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1377;
			identifier();
			State = 1378;
			Match(KW_ON);
			State = 1379;
			tableName();
			State = 1381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARTITION) {
				{
				State = 1380;
				partitionSpec();
				}
			}

			State = 1383;
			Match(KW_REBUILD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixFileFormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FILEFORMAT() { return GetToken(HiveParser.KW_FILEFORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FileFormatContext fileFormat() {
			return GetRuleContext<FileFormatContext>(0);
		}
		public AlterStatementSuffixFileFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixFileFormat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixFileFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixFileFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixFileFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixFileFormatContext alterStatementSuffixFileFormat() {
		AlterStatementSuffixFileFormatContext _localctx = new AlterStatementSuffixFileFormatContext(Context, State);
		EnterRule(_localctx, 134, RULE_alterStatementSuffixFileFormat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1385;
			Match(KW_SET);
			State = 1386;
			Match(KW_FILEFORMAT);
			State = 1387;
			fileFormat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixClusterbySortbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(HiveParser.KW_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CLUSTERED() { return GetToken(HiveParser.KW_CLUSTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SORTED() { return GetToken(HiveParser.KW_SORTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableBucketsContext tableBuckets() {
			return GetRuleContext<TableBucketsContext>(0);
		}
		public AlterStatementSuffixClusterbySortbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixClusterbySortby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixClusterbySortby(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixClusterbySortby(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixClusterbySortby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixClusterbySortbyContext alterStatementSuffixClusterbySortby() {
		AlterStatementSuffixClusterbySortbyContext _localctx = new AlterStatementSuffixClusterbySortbyContext(Context, State);
		EnterRule(_localctx, 136, RULE_alterStatementSuffixClusterbySortby);
		try {
			State = 1394;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1389;
				Match(KW_NOT);
				State = 1390;
				Match(KW_CLUSTERED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1391;
				Match(KW_NOT);
				State = 1392;
				Match(KW_SORTED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1393;
				tableBuckets();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTblPartitionStatementSuffixSkewedLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SKEWED() { return GetToken(HiveParser.KW_SKEWED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCATION() { return GetToken(HiveParser.KW_LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SkewedLocationsContext skewedLocations() {
			return GetRuleContext<SkewedLocationsContext>(0);
		}
		public AlterTblPartitionStatementSuffixSkewedLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTblPartitionStatementSuffixSkewedLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterTblPartitionStatementSuffixSkewedLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterTblPartitionStatementSuffixSkewedLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterTblPartitionStatementSuffixSkewedLocationContext alterTblPartitionStatementSuffixSkewedLocation() {
		AlterTblPartitionStatementSuffixSkewedLocationContext _localctx = new AlterTblPartitionStatementSuffixSkewedLocationContext(Context, State);
		EnterRule(_localctx, 138, RULE_alterTblPartitionStatementSuffixSkewedLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1396;
			Match(KW_SET);
			State = 1397;
			Match(KW_SKEWED);
			State = 1398;
			Match(KW_LOCATION);
			State = 1399;
			skewedLocations();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkewedLocationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SkewedLocationsListContext skewedLocationsList() {
			return GetRuleContext<SkewedLocationsListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public SkewedLocationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skewedLocations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSkewedLocations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSkewedLocations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkewedLocations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkewedLocationsContext skewedLocations() {
		SkewedLocationsContext _localctx = new SkewedLocationsContext(Context, State);
		EnterRule(_localctx, 140, RULE_skewedLocations);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1401;
			Match(LPAREN);
			State = 1402;
			skewedLocationsList();
			State = 1403;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkewedLocationsListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SkewedLocationMapContext[] skewedLocationMap() {
			return GetRuleContexts<SkewedLocationMapContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkewedLocationMapContext skewedLocationMap(int i) {
			return GetRuleContext<SkewedLocationMapContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public SkewedLocationsListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skewedLocationsList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSkewedLocationsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSkewedLocationsList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkewedLocationsList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkewedLocationsListContext skewedLocationsList() {
		SkewedLocationsListContext _localctx = new SkewedLocationsListContext(Context, State);
		EnterRule(_localctx, 142, RULE_skewedLocationsList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1405;
			skewedLocationMap();
			State = 1410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1406;
				Match(COMMA);
				State = 1407;
				skewedLocationMap();
				}
				}
				State = 1412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkewedLocationMapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SkewedValueLocationElementContext skewedValueLocationElement() {
			return GetRuleContext<SkewedValueLocationElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HiveParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public SkewedLocationMapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skewedLocationMap; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSkewedLocationMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSkewedLocationMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkewedLocationMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkewedLocationMapContext skewedLocationMap() {
		SkewedLocationMapContext _localctx = new SkewedLocationMapContext(Context, State);
		EnterRule(_localctx, 144, RULE_skewedLocationMap);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1413;
			skewedValueLocationElement();
			State = 1414;
			Match(EQUAL);
			State = 1415;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCATION() { return GetToken(HiveParser.KW_LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public AlterStatementSuffixLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixLocationContext alterStatementSuffixLocation() {
		AlterStatementSuffixLocationContext _localctx = new AlterStatementSuffixLocationContext(Context, State);
		EnterRule(_localctx, 146, RULE_alterStatementSuffixLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1417;
			Match(KW_SET);
			State = 1418;
			Match(KW_LOCATION);
			State = 1419;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixSkewedbyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSkewedContext tableSkewed() {
			return GetRuleContext<TableSkewedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(HiveParser.KW_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SKEWED() { return GetToken(HiveParser.KW_SKEWED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StoredAsDirsContext storedAsDirs() {
			return GetRuleContext<StoredAsDirsContext>(0);
		}
		public AlterStatementSuffixSkewedbyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixSkewedby; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixSkewedby(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixSkewedby(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixSkewedby(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixSkewedbyContext alterStatementSuffixSkewedby() {
		AlterStatementSuffixSkewedbyContext _localctx = new AlterStatementSuffixSkewedbyContext(Context, State);
		EnterRule(_localctx, 148, RULE_alterStatementSuffixSkewedby);
		try {
			State = 1426;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1421;
				tableSkewed();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1422;
				Match(KW_NOT);
				State = 1423;
				Match(KW_SKEWED);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1424;
				Match(KW_NOT);
				State = 1425;
				storedAsDirs();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixExchangePartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXCHANGE() { return GetToken(HiveParser.KW_EXCHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public AlterStatementSuffixExchangePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixExchangePartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixExchangePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixExchangePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixExchangePartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixExchangePartitionContext alterStatementSuffixExchangePartition() {
		AlterStatementSuffixExchangePartitionContext _localctx = new AlterStatementSuffixExchangePartitionContext(Context, State);
		EnterRule(_localctx, 150, RULE_alterStatementSuffixExchangePartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1428;
			Match(KW_EXCHANGE);
			State = 1429;
			partitionSpec();
			State = 1430;
			Match(KW_WITH);
			State = 1431;
			Match(KW_TABLE);
			State = 1432;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixRenamePartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RENAME() { return GetToken(HiveParser.KW_RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TO() { return GetToken(HiveParser.KW_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		public AlterStatementSuffixRenamePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixRenamePart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixRenamePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixRenamePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixRenamePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixRenamePartContext alterStatementSuffixRenamePart() {
		AlterStatementSuffixRenamePartContext _localctx = new AlterStatementSuffixRenamePartContext(Context, State);
		EnterRule(_localctx, 152, RULE_alterStatementSuffixRenamePart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1434;
			Match(KW_RENAME);
			State = 1435;
			Match(KW_TO);
			State = 1436;
			partitionSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixStatsPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UPDATE() { return GetToken(HiveParser.KW_UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATISTICS() { return GetToken(HiveParser.KW_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(HiveParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COLUMN() { return GetToken(HiveParser.KW_COLUMN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMMENT() { return GetToken(HiveParser.KW_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public AlterStatementSuffixStatsPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixStatsPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixStatsPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixStatsPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixStatsPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixStatsPartContext alterStatementSuffixStatsPart() {
		AlterStatementSuffixStatsPartContext _localctx = new AlterStatementSuffixStatsPartContext(Context, State);
		EnterRule(_localctx, 154, RULE_alterStatementSuffixStatsPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1438;
			Match(KW_UPDATE);
			State = 1439;
			Match(KW_STATISTICS);
			State = 1440;
			Match(KW_FOR);
			State = 1442;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COLUMN) {
				{
				State = 1441;
				Match(KW_COLUMN);
				}
			}

			State = 1444;
			identifier();
			State = 1445;
			Match(KW_SET);
			State = 1446;
			tableProperties();
			State = 1449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COMMENT) {
				{
				State = 1447;
				Match(KW_COMMENT);
				State = 1448;
				Match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixMergeFilesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONCATENATE() { return GetToken(HiveParser.KW_CONCATENATE, 0); }
		public AlterStatementSuffixMergeFilesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixMergeFiles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixMergeFiles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixMergeFiles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixMergeFiles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixMergeFilesContext alterStatementSuffixMergeFiles() {
		AlterStatementSuffixMergeFilesContext _localctx = new AlterStatementSuffixMergeFilesContext(Context, State);
		EnterRule(_localctx, 156, RULE_alterStatementSuffixMergeFiles);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1451;
			Match(KW_CONCATENATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixBucketNumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INTO() { return GetToken(HiveParser.KW_INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(HiveParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BUCKETS() { return GetToken(HiveParser.KW_BUCKETS, 0); }
		public AlterStatementSuffixBucketNumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixBucketNum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixBucketNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixBucketNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixBucketNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixBucketNumContext alterStatementSuffixBucketNum() {
		AlterStatementSuffixBucketNumContext _localctx = new AlterStatementSuffixBucketNumContext(Context, State);
		EnterRule(_localctx, 158, RULE_alterStatementSuffixBucketNum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1453;
			Match(KW_INTO);
			State = 1454;
			Match(Number);
			State = 1455;
			Match(KW_BUCKETS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CREATE() { return GetToken(HiveParser.KW_CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INDEX() { return GetToken(HiveParser.KW_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(HiveParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_TABLE() { return GetTokens(HiveParser.KW_TABLE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE(int i) {
			return GetToken(HiveParser.KW_TABLE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext[] tableName() {
			return GetRuleContexts<TableNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName(int i) {
			return GetRuleContext<TableNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnParenthesesListContext[] columnParenthesesList() {
			return GetRuleContexts<ColumnParenthesesListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnParenthesesListContext columnParenthesesList(int i) {
			return GetRuleContext<ColumnParenthesesListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFERRED() { return GetToken(HiveParser.KW_DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REBUILD() { return GetToken(HiveParser.KW_REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IDXPROPERTIES() { return GetToken(HiveParser.KW_IDXPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(HiveParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARTITIONED() { return GetToken(HiveParser.KW_PARTITIONED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableFileFormatContext tableFileFormat() {
			return GetRuleContext<TableFileFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCATION() { return GetToken(HiveParser.KW_LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LocationPathContext locationPath() {
			return GetRuleContext<LocationPathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
			return GetRuleContext<TablePropertiesPrefixedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableCommentContext tableComment() {
			return GetRuleContext<TableCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRowFormatContext tableRowFormat() {
			return GetRuleContext<TableRowFormatContext>(0);
		}
		public CreateIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCreateIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCreateIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexStatementContext createIndexStatement() {
		CreateIndexStatementContext _localctx = new CreateIndexStatementContext(Context, State);
		EnterRule(_localctx, 160, RULE_createIndexStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457;
			Match(KW_CREATE);
			State = 1458;
			Match(KW_INDEX);
			State = 1459;
			identifier();
			State = 1460;
			Match(KW_ON);
			State = 1461;
			Match(KW_TABLE);
			State = 1462;
			tableName();
			State = 1463;
			columnParenthesesList();
			State = 1464;
			Match(KW_AS);
			State = 1465;
			Match(StringLiteral);
			State = 1469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WITH) {
				{
				State = 1466;
				Match(KW_WITH);
				State = 1467;
				Match(KW_DEFERRED);
				State = 1468;
				Match(KW_REBUILD);
				}
			}

			State = 1473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IDXPROPERTIES) {
				{
				State = 1471;
				Match(KW_IDXPROPERTIES);
				State = 1472;
				tableProperties();
				}
			}

			State = 1478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IN) {
				{
				State = 1475;
				Match(KW_IN);
				State = 1476;
				Match(KW_TABLE);
				State = 1477;
				tableName();
				}
			}

			State = 1483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARTITIONED) {
				{
				State = 1480;
				Match(KW_PARTITIONED);
				State = 1481;
				Match(KW_BY);
				State = 1482;
				columnParenthesesList();
				}
			}

			State = 1489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ROW || _la==KW_STORED) {
				{
				State = 1486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_ROW) {
					{
					State = 1485;
					tableRowFormat();
					}
				}

				State = 1488;
				tableFileFormat();
				}
			}

			State = 1493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_LOCATION) {
				{
				State = 1491;
				Match(KW_LOCATION);
				State = 1492;
				locationPath();
				}
			}

			State = 1496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_TBLPROPERTIES) {
				{
				State = 1495;
				tablePropertiesPrefixed();
				}
			}

			State = 1499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COMMENT) {
				{
				State = 1498;
				tableComment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationPathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(HiveParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(HiveParser.DOT, i);
		}
		public LocationPathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locationPath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterLocationPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitLocationPath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocationPath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationPathContext locationPath() {
		LocationPathContext _localctx = new LocationPathContext(Context, State);
		EnterRule(_localctx, 162, RULE_locationPath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1501;
			identifier();
			State = 1506;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1502;
				Match(DOT);
				State = 1503;
				identifier();
				}
				}
				State = 1508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INDEX() { return GetToken(HiveParser.KW_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(HiveParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public DropIndexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDropIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDropIndexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropIndexStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexStatementContext dropIndexStatement() {
		DropIndexStatementContext _localctx = new DropIndexStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_dropIndexStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1509;
			Match(KW_DROP);
			State = 1510;
			Match(KW_INDEX);
			State = 1511;
			identifier();
			State = 1512;
			Match(KW_ON);
			State = 1513;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePartitionPrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		public TablePartitionPrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePartitionPrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTablePartitionPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTablePartitionPrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablePartitionPrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablePartitionPrefixContext tablePartitionPrefix() {
		TablePartitionPrefixContext _localctx = new TablePartitionPrefixContext(Context, State);
		EnterRule(_localctx, 166, RULE_tablePartitionPrefix);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1515;
			tableName();
			State = 1517;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARTITION) {
				{
				State = 1516;
				partitionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AND() { return GetToken(HiveParser.KW_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WAIT() { return GetToken(HiveParser.KW_WAIT, 0); }
		public BlockingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blocking; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterBlocking(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitBlocking(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlocking(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockingContext blocking() {
		BlockingContext _localctx = new BlockingContext(Context, State);
		EnterRule(_localctx, 168, RULE_blocking);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1519;
			Match(KW_AND);
			State = 1520;
			Match(KW_WAIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixCompactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPACT() { return GetToken(HiveParser.KW_COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockingContext blocking() {
			return GetRuleContext<BlockingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OVERWRITE() { return GetToken(HiveParser.KW_OVERWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TBLPROPERTIES() { return GetToken(HiveParser.KW_TBLPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		public AlterStatementSuffixCompactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixCompact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixCompact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixCompact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixCompact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixCompactContext alterStatementSuffixCompact() {
		AlterStatementSuffixCompactContext _localctx = new AlterStatementSuffixCompactContext(Context, State);
		EnterRule(_localctx, 170, RULE_alterStatementSuffixCompact);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522;
			Match(KW_COMPACT);
			State = 1523;
			Match(StringLiteral);
			State = 1525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AND) {
				{
				State = 1524;
				blocking();
				}
			}

			State = 1531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WITH) {
				{
				State = 1527;
				Match(KW_WITH);
				State = 1528;
				Match(KW_OVERWRITE);
				State = 1529;
				Match(KW_TBLPROPERTIES);
				State = 1530;
				tableProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementSuffixSetOwnerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OWNER() { return GetToken(HiveParser.KW_OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalNameContext principalName() {
			return GetRuleContext<PrincipalNameContext>(0);
		}
		public AlterStatementSuffixSetOwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatementSuffixSetOwner; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterStatementSuffixSetOwner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterStatementSuffixSetOwner(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterStatementSuffixSetOwner(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementSuffixSetOwnerContext alterStatementSuffixSetOwner() {
		AlterStatementSuffixSetOwnerContext _localctx = new AlterStatementSuffixSetOwnerContext(Context, State);
		EnterRule(_localctx, 172, RULE_alterStatementSuffixSetOwner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533;
			Match(KW_SET);
			State = 1534;
			Match(KW_OWNER);
			State = 1535;
			principalName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileFormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INPUTFORMAT() { return GetToken(HiveParser.KW_INPUTFORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(HiveParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(HiveParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUTPUTFORMAT() { return GetToken(HiveParser.KW_OUTPUTFORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERDE() { return GetToken(HiveParser.KW_SERDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INPUTDRIVER() { return GetToken(HiveParser.KW_INPUTDRIVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUTPUTDRIVER() { return GetToken(HiveParser.KW_OUTPUTDRIVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FileFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileFormat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterFileFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitFileFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileFormatContext fileFormat() {
		FileFormatContext _localctx = new FileFormatContext(Context, State);
		EnterRule(_localctx, 174, RULE_fileFormat);
		int _la;
		try {
			State = 1550;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1537;
				Match(KW_INPUTFORMAT);
				State = 1538;
				Match(StringLiteral);
				State = 1539;
				Match(KW_OUTPUTFORMAT);
				State = 1540;
				Match(StringLiteral);
				State = 1541;
				Match(KW_SERDE);
				State = 1542;
				Match(StringLiteral);
				State = 1547;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_INPUTDRIVER) {
					{
					State = 1543;
					Match(KW_INPUTDRIVER);
					State = 1544;
					Match(StringLiteral);
					State = 1545;
					Match(KW_OUTPUTDRIVER);
					State = 1546;
					Match(StringLiteral);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1549;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputFileFormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INPUTFORMAT() { return GetToken(HiveParser.KW_INPUTFORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(HiveParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(HiveParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERDE() { return GetToken(HiveParser.KW_SERDE, 0); }
		public InputFileFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputFileFormat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterInputFileFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitInputFileFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputFileFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputFileFormatContext inputFileFormat() {
		InputFileFormatContext _localctx = new InputFileFormatContext(Context, State);
		EnterRule(_localctx, 176, RULE_inputFileFormat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1552;
			Match(KW_INPUTFORMAT);
			State = 1553;
			Match(StringLiteral);
			State = 1554;
			Match(KW_SERDE);
			State = 1555;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabTypeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(HiveParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(HiveParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_ELEM_TYPE() { return GetTokens(HiveParser.KW_ELEM_TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELEM_TYPE(int i) {
			return GetToken(HiveParser.KW_ELEM_TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_KEY_TYPE() { return GetTokens(HiveParser.KW_KEY_TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_KEY_TYPE(int i) {
			return GetToken(HiveParser.KW_KEY_TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_VALUE_TYPE() { return GetTokens(HiveParser.KW_VALUE_TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALUE_TYPE(int i) {
			return GetToken(HiveParser.KW_VALUE_TYPE, i);
		}
		public TabTypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabTypeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTabTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTabTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabTypeExprContext tabTypeExpr() {
		TabTypeExprContext _localctx = new TabTypeExprContext(Context, State);
		EnterRule(_localctx, 178, RULE_tabTypeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1557;
			identifier();
			State = 1560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 1558;
				Match(DOT);
				State = 1559;
				identifier();
				}
			}

			State = 1575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ASC) | (1L << KW_DESC) | (1L << KW_NULLS) | (1L << KW_LAST) | (1L << KW_OVERWRITE) | (1L << KW_PARTITIONS) | (1L << KW_TABLES) | (1L << KW_COLUMNS) | (1L << KW_INDEX) | (1L << KW_INDEXES) | (1L << KW_REBUILD) | (1L << KW_FUNCTIONS) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_REPAIR) | (1L << KW_DIRECTORY) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT) | (1L << KW_LOAD) | (1L << KW_EXPORT) | (1L << KW_REPLICATION) | (1L << KW_METADATA) | (1L << KW_DATA) | (1L << KW_INPATH))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (KW_CHANGE - 68)) | (1L << (KW_FIRST - 68)) | (1L << (KW_AFTER - 68)) | (1L << (KW_RENAME - 68)) | (1L << (KW_COMMENT - 68)) | (1L << (KW_TINYINT - 68)) | (1L << (KW_DATETIME - 68)) | (1L << (KW_ZONE - 68)) | (1L << (KW_STRING - 68)) | (1L << (KW_STRUCT - 68)) | (1L << (KW_UNIONTYPE - 68)) | (1L << (KW_PARTITIONED - 68)) | (1L << (KW_CLUSTERED - 68)) | (1L << (KW_SORTED - 68)) | (1L << (KW_BUCKETS - 68)) | (1L << (KW_FORMAT - 68)) | (1L << (KW_DELIMITED - 68)) | (1L << (KW_FIELDS - 68)) | (1L << (KW_TERMINATED - 68)) | (1L << (KW_ESCAPED - 68)) | (1L << (KW_COLLECTION - 68)) | (1L << (KW_ITEMS - 68)) | (1L << (KW_KEYS - 68)) | (1L << (KW_KEY_TYPE - 68)) | (1L << (KW_KILL - 68)) | (1L << (KW_LINES - 68)) | (1L << (KW_STORED - 68)) | (1L << (KW_FILEFORMAT - 68)) | (1L << (KW_INPUTFORMAT - 68)) | (1L << (KW_OUTPUTFORMAT - 68)) | (1L << (KW_INPUTDRIVER - 68)) | (1L << (KW_OUTPUTDRIVER - 68)) | (1L << (KW_ENABLE - 68)) | (1L << (KW_DISABLE - 68)) | (1L << (KW_LOCATION - 68)) | (1L << (KW_BUCKET - 68)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (KW_ADD - 134)) | (1L << (KW_REPLACE - 134)) | (1L << (KW_TEMPORARY - 134)) | (1L << (KW_FILE - 134)) | (1L << (KW_JAR - 134)) | (1L << (KW_EXPLAIN - 134)) | (1L << (KW_FORMATTED - 134)) | (1L << (KW_DEPENDENCY - 134)) | (1L << (KW_LOGICAL - 134)) | (1L << (KW_SERDE - 134)) | (1L << (KW_DEFERRED - 134)) | (1L << (KW_SERDEPROPERTIES - 134)) | (1L << (KW_DBPROPERTIES - 134)) | (1L << (KW_LIMIT - 134)) | (1L << (KW_OFFSET - 134)) | (1L << (KW_UNSET - 134)) | (1L << (KW_TBLPROPERTIES - 134)) | (1L << (KW_IDXPROPERTIES - 134)) | (1L << (KW_VALUE_TYPE - 134)) | (1L << (KW_ELEM_TYPE - 134)) | (1L << (KW_DEFINED - 134)) | (1L << (KW_MAPJOIN - 134)) | (1L << (KW_STREAMTABLE - 134)) | (1L << (KW_CLUSTERSTATUS - 134)) | (1L << (KW_UTC - 134)) | (1L << (KW_UTCTIMESTAMP - 134)) | (1L << (KW_LONG - 134)) | (1L << (KW_PLUS - 134)) | (1L << (KW_VIEW - 134)) | (1L << (KW_VIEWS - 134)) | (1L << (KW_DATABASES - 134)) | (1L << (KW_MATERIALIZED - 134)) | (1L << (KW_SCHEMA - 134)) | (1L << (KW_SCHEMAS - 134)) | (1L << (KW_SSL - 134)) | (1L << (KW_UNDO - 134)) | (1L << (KW_LOCK - 134)) | (1L << (KW_LOCKS - 134)) | (1L << (KW_UNLOCK - 134)) | (1L << (KW_SHARED - 134)) | (1L << (KW_EXCLUSIVE - 134)) | (1L << (KW_UNSIGNED - 134)) | (1L << (KW_WHILE - 134)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (KW_READ - 198)) | (1L << (KW_PURGE - 198)) | (1L << (KW_ANALYZE - 198)) | (1L << (KW_BEFORE - 198)) | (1L << (KW_CONTINUE - 198)) | (1L << (KW_RECORDREADER - 198)) | (1L << (KW_RECORDWRITER - 198)) | (1L << (KW_SEMI - 198)) | (1L << (KW_TOUCH - 198)) | (1L << (KW_ARCHIVE - 198)) | (1L << (KW_UNARCHIVE - 198)) | (1L << (KW_COMPUTE - 198)) | (1L << (KW_STATISTICS - 198)) | (1L << (KW_USE - 198)) | (1L << (KW_OPTION - 198)) | (1L << (KW_CONCATENATE - 198)) | (1L << (KW_SHOW_DATABASE - 198)) | (1L << (KW_RESTRICT - 198)) | (1L << (KW_CASCADE - 198)) | (1L << (KW_SKEWED - 198)) | (1L << (KW_DIRECTORIES - 198)) | (1L << (KW_SETS - 198)) | (1L << (KW_NOSCAN - 198)) | (1L << (KW_ROLE - 198)) | (1L << (KW_ROLES - 198)) | (1L << (KW_URI - 198)) | (1L << (KW_SERVER - 198)) | (1L << (KW_ADMIN - 198)) | (1L << (KW_OWNER - 198)) | (1L << (KW_PRINCIPALS - 198)) | (1L << (KW_COMPACT - 198)) | (1L << (KW_COMPACTIONS - 198)) | (1L << (KW_TRANSACTIONS - 198)) | (1L << (KW_REWRITE - 198)) | (1L << (KW_REOPTIMIZATION - 198)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (KW_RELOAD - 264)) | (1L << (KW_YEAR - 264)) | (1L << (KW_QUERY - 264)) | (1L << (KW_QUARTER - 264)) | (1L << (KW_MONTH - 264)) | (1L << (KW_WEEK - 264)) | (1L << (KW_DAY - 264)) | (1L << (KW_DOW - 264)) | (1L << (KW_HOUR - 264)) | (1L << (KW_MINUTE - 264)) | (1L << (KW_SECOND - 264)) | (1L << (KW_TRANSACTION - 264)) | (1L << (KW_WORK - 264)) | (1L << (KW_WRITE - 264)) | (1L << (KW_ISOLATION - 264)) | (1L << (KW_LEVEL - 264)) | (1L << (KW_SNAPSHOT - 264)) | (1L << (KW_AUTOCOMMIT - 264)) | (1L << (KW_CACHE - 264)) | (1L << (KW_ENFORCED - 264)) | (1L << (KW_VALIDATE - 264)) | (1L << (KW_NOVALIDATE - 264)) | (1L << (KW_RELY - 264)) | (1L << (KW_NORELY - 264)) | (1L << (KW_KEY - 264)) | (1L << (KW_ABORT - 264)) | (1L << (KW_MATCHED - 264)) | (1L << (KW_REPL - 264)) | (1L << (KW_DUMP - 264)) | (1L << (KW_STATUS - 264)) | (1L << (KW_VECTORIZATION - 264)) | (1L << (KW_SUMMARY - 264)) | (1L << (KW_OPERATOR - 264)) | (1L << (KW_EXPRESSION - 264)) | (1L << (KW_DETAIL - 264)) | (1L << (KW_WAIT - 264)) | (1L << (KW_RESOURCE - 264)) | (1L << (KW_PLAN - 264)) | (1L << (KW_QUERY_PARALLELISM - 264)) | (1L << (KW_PLANS - 264)) | (1L << (KW_ACTIVATE - 264)) | (1L << (KW_DEFAULT - 264)) | (1L << (KW_CHECK - 264)) | (1L << (KW_POOL - 264)) | (1L << (KW_MOVE - 264)) | (1L << (KW_DO - 264)) | (1L << (KW_ALLOC_FRACTION - 264)) | (1L << (KW_SCHEDULING_POLICY - 264)) | (1L << (KW_PATH - 264)) | (1L << (KW_MAPPING - 264)) | (1L << (KW_WORKLOAD - 264)) | (1L << (KW_MANAGEMENT - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (KW_ACTIVE - 328)) | (1L << (KW_UNMANAGED - 328)) | (1L << (Identifier - 328)))) != 0)) {
				{
				State = 1562;
				identifier();
				State = 1572;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 1563;
					Match(DOT);
					State = 1568;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
					case 1:
						{
						State = 1564;
						Match(KW_ELEM_TYPE);
						}
						break;
					case 2:
						{
						State = 1565;
						Match(KW_KEY_TYPE);
						}
						break;
					case 3:
						{
						State = 1566;
						Match(KW_VALUE_TYPE);
						}
						break;
					case 4:
						{
						State = 1567;
						identifier();
						}
						break;
					}
					}
					}
					State = 1574;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartTypeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TabTypeExprContext tabTypeExpr() {
			return GetRuleContext<TabTypeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		public PartTypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partTypeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPartTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPartTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartTypeExprContext partTypeExpr() {
		PartTypeExprContext _localctx = new PartTypeExprContext(Context, State);
		EnterRule(_localctx, 180, RULE_partTypeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1577;
			tabTypeExpr();
			State = 1579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARTITION) {
				{
				State = 1578;
				partitionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TabPartColTypeExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtColumnNameContext extColumnName() {
			return GetRuleContext<ExtColumnNameContext>(0);
		}
		public TabPartColTypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tabPartColTypeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTabPartColTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTabPartColTypeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTabPartColTypeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TabPartColTypeExprContext tabPartColTypeExpr() {
		TabPartColTypeExprContext _localctx = new TabPartColTypeExprContext(Context, State);
		EnterRule(_localctx, 182, RULE_tabPartColTypeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			tableName();
			State = 1583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARTITION) {
				{
				State = 1582;
				partitionSpec();
				}
			}

			State = 1586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ASC) | (1L << KW_DESC) | (1L << KW_NULLS) | (1L << KW_LAST) | (1L << KW_OVERWRITE) | (1L << KW_PARTITIONS) | (1L << KW_TABLES) | (1L << KW_COLUMNS) | (1L << KW_INDEX) | (1L << KW_INDEXES) | (1L << KW_REBUILD) | (1L << KW_FUNCTIONS) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_REPAIR) | (1L << KW_DIRECTORY) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT) | (1L << KW_LOAD) | (1L << KW_EXPORT) | (1L << KW_REPLICATION) | (1L << KW_METADATA) | (1L << KW_DATA) | (1L << KW_INPATH))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (KW_CHANGE - 68)) | (1L << (KW_FIRST - 68)) | (1L << (KW_AFTER - 68)) | (1L << (KW_RENAME - 68)) | (1L << (KW_COMMENT - 68)) | (1L << (KW_TINYINT - 68)) | (1L << (KW_DATETIME - 68)) | (1L << (KW_ZONE - 68)) | (1L << (KW_STRING - 68)) | (1L << (KW_STRUCT - 68)) | (1L << (KW_UNIONTYPE - 68)) | (1L << (KW_PARTITIONED - 68)) | (1L << (KW_CLUSTERED - 68)) | (1L << (KW_SORTED - 68)) | (1L << (KW_BUCKETS - 68)) | (1L << (KW_FORMAT - 68)) | (1L << (KW_DELIMITED - 68)) | (1L << (KW_FIELDS - 68)) | (1L << (KW_TERMINATED - 68)) | (1L << (KW_ESCAPED - 68)) | (1L << (KW_COLLECTION - 68)) | (1L << (KW_ITEMS - 68)) | (1L << (KW_KEYS - 68)) | (1L << (KW_KEY_TYPE - 68)) | (1L << (KW_KILL - 68)) | (1L << (KW_LINES - 68)) | (1L << (KW_STORED - 68)) | (1L << (KW_FILEFORMAT - 68)) | (1L << (KW_INPUTFORMAT - 68)) | (1L << (KW_OUTPUTFORMAT - 68)) | (1L << (KW_INPUTDRIVER - 68)) | (1L << (KW_OUTPUTDRIVER - 68)) | (1L << (KW_ENABLE - 68)) | (1L << (KW_DISABLE - 68)) | (1L << (KW_LOCATION - 68)) | (1L << (KW_BUCKET - 68)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (KW_ADD - 134)) | (1L << (KW_REPLACE - 134)) | (1L << (KW_TEMPORARY - 134)) | (1L << (KW_FILE - 134)) | (1L << (KW_JAR - 134)) | (1L << (KW_EXPLAIN - 134)) | (1L << (KW_FORMATTED - 134)) | (1L << (KW_DEPENDENCY - 134)) | (1L << (KW_LOGICAL - 134)) | (1L << (KW_SERDE - 134)) | (1L << (KW_DEFERRED - 134)) | (1L << (KW_SERDEPROPERTIES - 134)) | (1L << (KW_DBPROPERTIES - 134)) | (1L << (KW_LIMIT - 134)) | (1L << (KW_OFFSET - 134)) | (1L << (KW_UNSET - 134)) | (1L << (KW_TBLPROPERTIES - 134)) | (1L << (KW_IDXPROPERTIES - 134)) | (1L << (KW_VALUE_TYPE - 134)) | (1L << (KW_ELEM_TYPE - 134)) | (1L << (KW_DEFINED - 134)) | (1L << (KW_MAPJOIN - 134)) | (1L << (KW_STREAMTABLE - 134)) | (1L << (KW_CLUSTERSTATUS - 134)) | (1L << (KW_UTC - 134)) | (1L << (KW_UTCTIMESTAMP - 134)) | (1L << (KW_LONG - 134)) | (1L << (KW_PLUS - 134)) | (1L << (KW_VIEW - 134)) | (1L << (KW_VIEWS - 134)) | (1L << (KW_DATABASES - 134)) | (1L << (KW_MATERIALIZED - 134)) | (1L << (KW_SCHEMA - 134)) | (1L << (KW_SCHEMAS - 134)) | (1L << (KW_SSL - 134)) | (1L << (KW_UNDO - 134)) | (1L << (KW_LOCK - 134)) | (1L << (KW_LOCKS - 134)) | (1L << (KW_UNLOCK - 134)) | (1L << (KW_SHARED - 134)) | (1L << (KW_EXCLUSIVE - 134)) | (1L << (KW_UNSIGNED - 134)) | (1L << (KW_WHILE - 134)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (KW_READ - 198)) | (1L << (KW_PURGE - 198)) | (1L << (KW_ANALYZE - 198)) | (1L << (KW_BEFORE - 198)) | (1L << (KW_CONTINUE - 198)) | (1L << (KW_RECORDREADER - 198)) | (1L << (KW_RECORDWRITER - 198)) | (1L << (KW_SEMI - 198)) | (1L << (KW_TOUCH - 198)) | (1L << (KW_ARCHIVE - 198)) | (1L << (KW_UNARCHIVE - 198)) | (1L << (KW_COMPUTE - 198)) | (1L << (KW_STATISTICS - 198)) | (1L << (KW_USE - 198)) | (1L << (KW_OPTION - 198)) | (1L << (KW_CONCATENATE - 198)) | (1L << (KW_SHOW_DATABASE - 198)) | (1L << (KW_RESTRICT - 198)) | (1L << (KW_CASCADE - 198)) | (1L << (KW_SKEWED - 198)) | (1L << (KW_DIRECTORIES - 198)) | (1L << (KW_SETS - 198)) | (1L << (KW_NOSCAN - 198)) | (1L << (KW_ROLE - 198)) | (1L << (KW_ROLES - 198)) | (1L << (KW_URI - 198)) | (1L << (KW_SERVER - 198)) | (1L << (KW_ADMIN - 198)) | (1L << (KW_OWNER - 198)) | (1L << (KW_PRINCIPALS - 198)) | (1L << (KW_COMPACT - 198)) | (1L << (KW_COMPACTIONS - 198)) | (1L << (KW_TRANSACTIONS - 198)) | (1L << (KW_REWRITE - 198)) | (1L << (KW_REOPTIMIZATION - 198)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (KW_RELOAD - 264)) | (1L << (KW_YEAR - 264)) | (1L << (KW_QUERY - 264)) | (1L << (KW_QUARTER - 264)) | (1L << (KW_MONTH - 264)) | (1L << (KW_WEEK - 264)) | (1L << (KW_DAY - 264)) | (1L << (KW_DOW - 264)) | (1L << (KW_HOUR - 264)) | (1L << (KW_MINUTE - 264)) | (1L << (KW_SECOND - 264)) | (1L << (KW_TRANSACTION - 264)) | (1L << (KW_WORK - 264)) | (1L << (KW_WRITE - 264)) | (1L << (KW_ISOLATION - 264)) | (1L << (KW_LEVEL - 264)) | (1L << (KW_SNAPSHOT - 264)) | (1L << (KW_AUTOCOMMIT - 264)) | (1L << (KW_CACHE - 264)) | (1L << (KW_ENFORCED - 264)) | (1L << (KW_VALIDATE - 264)) | (1L << (KW_NOVALIDATE - 264)) | (1L << (KW_RELY - 264)) | (1L << (KW_NORELY - 264)) | (1L << (KW_KEY - 264)) | (1L << (KW_ABORT - 264)) | (1L << (KW_MATCHED - 264)) | (1L << (KW_REPL - 264)) | (1L << (KW_DUMP - 264)) | (1L << (KW_STATUS - 264)) | (1L << (KW_VECTORIZATION - 264)) | (1L << (KW_SUMMARY - 264)) | (1L << (KW_OPERATOR - 264)) | (1L << (KW_EXPRESSION - 264)) | (1L << (KW_DETAIL - 264)) | (1L << (KW_WAIT - 264)) | (1L << (KW_RESOURCE - 264)) | (1L << (KW_PLAN - 264)) | (1L << (KW_QUERY_PARALLELISM - 264)) | (1L << (KW_PLANS - 264)) | (1L << (KW_ACTIVATE - 264)) | (1L << (KW_DEFAULT - 264)) | (1L << (KW_CHECK - 264)) | (1L << (KW_POOL - 264)) | (1L << (KW_MOVE - 264)) | (1L << (KW_DO - 264)) | (1L << (KW_ALLOC_FRACTION - 264)) | (1L << (KW_SCHEDULING_POLICY - 264)) | (1L << (KW_PATH - 264)) | (1L << (KW_MAPPING - 264)) | (1L << (KW_WORKLOAD - 264)) | (1L << (KW_MANAGEMENT - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (KW_ACTIVE - 328)) | (1L << (KW_UNMANAGED - 328)) | (1L << (Identifier - 328)))) != 0)) {
				{
				State = 1585;
				extColumnName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DESCRIBE() { return GetToken(HiveParser.KW_DESCRIBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DESC() { return GetToken(HiveParser.KW_DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FUNCTION() { return GetToken(HiveParser.KW_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DescFuncNamesContext descFuncNames() {
			return GetRuleContext<DescFuncNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TabPartColTypeExprContext tabPartColTypeExpr() {
			return GetRuleContext<TabPartColTypeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATABASE() { return GetToken(HiveParser.KW_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMA() { return GetToken(HiveParser.KW_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTENDED() { return GetToken(HiveParser.KW_EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FORMATTED() { return GetToken(HiveParser.KW_FORMATTED, 0); }
		public DescStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDescStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDescStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescStatementContext descStatement() {
		DescStatementContext _localctx = new DescStatementContext(Context, State);
		EnterRule(_localctx, 184, RULE_descStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1588;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_DESC || _la==KW_DESCRIBE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				{
				State = 1589;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_DATABASE || _la==KW_SCHEMA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1591;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_EXTENDED) {
					{
					State = 1590;
					Match(KW_EXTENDED);
					}
				}

				State = 1593;
				identifier();
				}
				break;
			case 2:
				{
				State = 1594;
				Match(KW_FUNCTION);
				State = 1596;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_EXTENDED) {
					{
					State = 1595;
					Match(KW_EXTENDED);
					}
				}

				State = 1598;
				descFuncNames();
				}
				break;
			case 3:
				{
				{
				State = 1599;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_EXTENDED || _la==KW_FORMATTED) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1600;
				tabPartColTypeExpr();
				}
				}
				break;
			case 4:
				{
				State = 1601;
				tabPartColTypeExpr();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnalyzeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ANALYZE() { return GetToken(HiveParser.KW_ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableOrPartitionContext tableOrPartition() {
			return GetRuleContext<TableOrPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPUTE() { return GetToken(HiveParser.KW_COMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATISTICS() { return GetToken(HiveParser.KW_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CACHE() { return GetToken(HiveParser.KW_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_METADATA() { return GetToken(HiveParser.KW_METADATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOSCAN() { return GetToken(HiveParser.KW_NOSCAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(HiveParser.KW_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COLUMNS() { return GetToken(HiveParser.KW_COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameListContext columnNameList() {
			return GetRuleContext<ColumnNameListContext>(0);
		}
		public AnalyzeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_analyzeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAnalyzeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAnalyzeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnalyzeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnalyzeStatementContext analyzeStatement() {
		AnalyzeStatementContext _localctx = new AnalyzeStatementContext(Context, State);
		EnterRule(_localctx, 186, RULE_analyzeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604;
			Match(KW_ANALYZE);
			State = 1605;
			Match(KW_TABLE);
			{
			State = 1606;
			tableOrPartition();
			}
			State = 1619;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_COMPUTE:
				{
				State = 1607;
				Match(KW_COMPUTE);
				State = 1608;
				Match(KW_STATISTICS);
				State = 1615;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_NOSCAN:
					{
					State = 1609;
					Match(KW_NOSCAN);
					}
					break;
				case KW_FOR:
					{
					{
					State = 1610;
					Match(KW_FOR);
					State = 1611;
					Match(KW_COLUMNS);
					State = 1613;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ASC) | (1L << KW_DESC) | (1L << KW_NULLS) | (1L << KW_LAST) | (1L << KW_OVERWRITE) | (1L << KW_PARTITIONS) | (1L << KW_TABLES) | (1L << KW_COLUMNS) | (1L << KW_INDEX) | (1L << KW_INDEXES) | (1L << KW_REBUILD) | (1L << KW_FUNCTIONS) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_REPAIR) | (1L << KW_DIRECTORY) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT) | (1L << KW_LOAD) | (1L << KW_EXPORT) | (1L << KW_REPLICATION) | (1L << KW_METADATA) | (1L << KW_DATA) | (1L << KW_INPATH))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (KW_CHANGE - 68)) | (1L << (KW_FIRST - 68)) | (1L << (KW_AFTER - 68)) | (1L << (KW_RENAME - 68)) | (1L << (KW_COMMENT - 68)) | (1L << (KW_TINYINT - 68)) | (1L << (KW_DATETIME - 68)) | (1L << (KW_ZONE - 68)) | (1L << (KW_STRING - 68)) | (1L << (KW_STRUCT - 68)) | (1L << (KW_UNIONTYPE - 68)) | (1L << (KW_PARTITIONED - 68)) | (1L << (KW_CLUSTERED - 68)) | (1L << (KW_SORTED - 68)) | (1L << (KW_BUCKETS - 68)) | (1L << (KW_FORMAT - 68)) | (1L << (KW_DELIMITED - 68)) | (1L << (KW_FIELDS - 68)) | (1L << (KW_TERMINATED - 68)) | (1L << (KW_ESCAPED - 68)) | (1L << (KW_COLLECTION - 68)) | (1L << (KW_ITEMS - 68)) | (1L << (KW_KEYS - 68)) | (1L << (KW_KEY_TYPE - 68)) | (1L << (KW_KILL - 68)) | (1L << (KW_LINES - 68)) | (1L << (KW_STORED - 68)) | (1L << (KW_FILEFORMAT - 68)) | (1L << (KW_INPUTFORMAT - 68)) | (1L << (KW_OUTPUTFORMAT - 68)) | (1L << (KW_INPUTDRIVER - 68)) | (1L << (KW_OUTPUTDRIVER - 68)) | (1L << (KW_ENABLE - 68)) | (1L << (KW_DISABLE - 68)) | (1L << (KW_LOCATION - 68)) | (1L << (KW_BUCKET - 68)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (KW_ADD - 134)) | (1L << (KW_REPLACE - 134)) | (1L << (KW_TEMPORARY - 134)) | (1L << (KW_FILE - 134)) | (1L << (KW_JAR - 134)) | (1L << (KW_EXPLAIN - 134)) | (1L << (KW_FORMATTED - 134)) | (1L << (KW_DEPENDENCY - 134)) | (1L << (KW_LOGICAL - 134)) | (1L << (KW_SERDE - 134)) | (1L << (KW_DEFERRED - 134)) | (1L << (KW_SERDEPROPERTIES - 134)) | (1L << (KW_DBPROPERTIES - 134)) | (1L << (KW_LIMIT - 134)) | (1L << (KW_OFFSET - 134)) | (1L << (KW_UNSET - 134)) | (1L << (KW_TBLPROPERTIES - 134)) | (1L << (KW_IDXPROPERTIES - 134)) | (1L << (KW_VALUE_TYPE - 134)) | (1L << (KW_ELEM_TYPE - 134)) | (1L << (KW_DEFINED - 134)) | (1L << (KW_MAPJOIN - 134)) | (1L << (KW_STREAMTABLE - 134)) | (1L << (KW_CLUSTERSTATUS - 134)) | (1L << (KW_UTC - 134)) | (1L << (KW_UTCTIMESTAMP - 134)) | (1L << (KW_LONG - 134)) | (1L << (KW_PLUS - 134)) | (1L << (KW_VIEW - 134)) | (1L << (KW_VIEWS - 134)) | (1L << (KW_DATABASES - 134)) | (1L << (KW_MATERIALIZED - 134)) | (1L << (KW_SCHEMA - 134)) | (1L << (KW_SCHEMAS - 134)) | (1L << (KW_SSL - 134)) | (1L << (KW_UNDO - 134)) | (1L << (KW_LOCK - 134)) | (1L << (KW_LOCKS - 134)) | (1L << (KW_UNLOCK - 134)) | (1L << (KW_SHARED - 134)) | (1L << (KW_EXCLUSIVE - 134)) | (1L << (KW_UNSIGNED - 134)) | (1L << (KW_WHILE - 134)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (KW_READ - 198)) | (1L << (KW_PURGE - 198)) | (1L << (KW_ANALYZE - 198)) | (1L << (KW_BEFORE - 198)) | (1L << (KW_CONTINUE - 198)) | (1L << (KW_RECORDREADER - 198)) | (1L << (KW_RECORDWRITER - 198)) | (1L << (KW_SEMI - 198)) | (1L << (KW_TOUCH - 198)) | (1L << (KW_ARCHIVE - 198)) | (1L << (KW_UNARCHIVE - 198)) | (1L << (KW_COMPUTE - 198)) | (1L << (KW_STATISTICS - 198)) | (1L << (KW_USE - 198)) | (1L << (KW_OPTION - 198)) | (1L << (KW_CONCATENATE - 198)) | (1L << (KW_SHOW_DATABASE - 198)) | (1L << (KW_RESTRICT - 198)) | (1L << (KW_CASCADE - 198)) | (1L << (KW_SKEWED - 198)) | (1L << (KW_DIRECTORIES - 198)) | (1L << (KW_SETS - 198)) | (1L << (KW_NOSCAN - 198)) | (1L << (KW_ROLE - 198)) | (1L << (KW_ROLES - 198)) | (1L << (KW_URI - 198)) | (1L << (KW_SERVER - 198)) | (1L << (KW_ADMIN - 198)) | (1L << (KW_OWNER - 198)) | (1L << (KW_PRINCIPALS - 198)) | (1L << (KW_COMPACT - 198)) | (1L << (KW_COMPACTIONS - 198)) | (1L << (KW_TRANSACTIONS - 198)) | (1L << (KW_REWRITE - 198)) | (1L << (KW_REOPTIMIZATION - 198)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (KW_RELOAD - 264)) | (1L << (KW_YEAR - 264)) | (1L << (KW_QUERY - 264)) | (1L << (KW_QUARTER - 264)) | (1L << (KW_MONTH - 264)) | (1L << (KW_WEEK - 264)) | (1L << (KW_DAY - 264)) | (1L << (KW_DOW - 264)) | (1L << (KW_HOUR - 264)) | (1L << (KW_MINUTE - 264)) | (1L << (KW_SECOND - 264)) | (1L << (KW_TRANSACTION - 264)) | (1L << (KW_WORK - 264)) | (1L << (KW_WRITE - 264)) | (1L << (KW_ISOLATION - 264)) | (1L << (KW_LEVEL - 264)) | (1L << (KW_SNAPSHOT - 264)) | (1L << (KW_AUTOCOMMIT - 264)) | (1L << (KW_CACHE - 264)) | (1L << (KW_ENFORCED - 264)) | (1L << (KW_VALIDATE - 264)) | (1L << (KW_NOVALIDATE - 264)) | (1L << (KW_RELY - 264)) | (1L << (KW_NORELY - 264)) | (1L << (KW_KEY - 264)) | (1L << (KW_ABORT - 264)) | (1L << (KW_MATCHED - 264)) | (1L << (KW_REPL - 264)) | (1L << (KW_DUMP - 264)) | (1L << (KW_STATUS - 264)) | (1L << (KW_VECTORIZATION - 264)) | (1L << (KW_SUMMARY - 264)) | (1L << (KW_OPERATOR - 264)) | (1L << (KW_EXPRESSION - 264)) | (1L << (KW_DETAIL - 264)) | (1L << (KW_WAIT - 264)) | (1L << (KW_RESOURCE - 264)) | (1L << (KW_PLAN - 264)) | (1L << (KW_QUERY_PARALLELISM - 264)) | (1L << (KW_PLANS - 264)) | (1L << (KW_ACTIVATE - 264)) | (1L << (KW_DEFAULT - 264)) | (1L << (KW_CHECK - 264)) | (1L << (KW_POOL - 264)) | (1L << (KW_MOVE - 264)) | (1L << (KW_DO - 264)) | (1L << (KW_ALLOC_FRACTION - 264)) | (1L << (KW_SCHEDULING_POLICY - 264)) | (1L << (KW_PATH - 264)) | (1L << (KW_MAPPING - 264)) | (1L << (KW_WORKLOAD - 264)) | (1L << (KW_MANAGEMENT - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (KW_ACTIVE - 328)) | (1L << (KW_UNMANAGED - 328)) | (1L << (Identifier - 328)))) != 0)) {
						{
						State = 1612;
						columnNameList();
						}
					}

					}
					}
					break;
				case SEMICOLON:
					break;
				default:
					break;
				}
				}
				break;
			case KW_CACHE:
				{
				State = 1617;
				Match(KW_CACHE);
				State = 1618;
				Match(KW_METADATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHOW() { return GetToken(HiveParser.KW_SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATABASES() { return GetToken(HiveParser.KW_DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMAS() { return GetToken(HiveParser.KW_SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LIKE() { return GetToken(HiveParser.KW_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowStmtIdentifierContext showStmtIdentifier() {
			return GetRuleContext<ShowStmtIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLES() { return GetToken(HiveParser.KW_TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_FROM() { return GetTokens(HiveParser.KW_FROM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FROM(int i) {
			return GetToken(HiveParser.KW_FROM, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_IN() { return GetTokens(HiveParser.KW_IN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN(int i) {
			return GetToken(HiveParser.KW_IN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VIEWS() { return GetToken(HiveParser.KW_VIEWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MATERIALIZED() { return GetToken(HiveParser.KW_MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COLUMNS() { return GetToken(HiveParser.KW_COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FUNCTIONS() { return GetToken(HiveParser.KW_FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowFunctionIdentifierContext showFunctionIdentifier() {
			return GetRuleContext<ShowFunctionIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARTITIONS() { return GetToken(HiveParser.KW_PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CREATE() { return GetToken(HiveParser.KW_CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATABASE() { return GetToken(HiveParser.KW_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMA() { return GetToken(HiveParser.KW_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTENDED() { return GetToken(HiveParser.KW_EXTENDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TBLPROPERTIES() { return GetToken(HiveParser.KW_TBLPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCKS() { return GetToken(HiveParser.KW_LOCKS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartTypeExprContext partTypeExpr() {
			return GetRuleContext<PartTypeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPACTIONS() { return GetToken(HiveParser.KW_COMPACTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRANSACTIONS() { return GetToken(HiveParser.KW_TRANSACTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONF() { return GetToken(HiveParser.KW_CONF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RESOURCE() { return GetToken(HiveParser.KW_RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PLANS() { return GetToken(HiveParser.KW_PLANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PLAN() { return GetToken(HiveParser.KW_PLAN, 0); }
		public ShowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterShowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitShowStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatementContext showStatement() {
		ShowStatementContext _localctx = new ShowStatementContext(Context, State);
		EnterRule(_localctx, 188, RULE_showStatement);
		int _la;
		try {
			State = 1744;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1621;
				Match(KW_SHOW);
				State = 1622;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_DATABASES || _la==KW_SCHEMAS) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_LIKE) {
					{
					State = 1623;
					Match(KW_LIKE);
					State = 1624;
					showStmtIdentifier();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1627;
				Match(KW_SHOW);
				State = 1628;
				Match(KW_TABLES);
				State = 1631;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_FROM || _la==KW_IN) {
					{
					State = 1629;
					_la = TokenStream.LA(1);
					if ( !(_la==KW_FROM || _la==KW_IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1630;
					identifier();
					}
				}

				State = 1636;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_LIKE:
					{
					State = 1633;
					Match(KW_LIKE);
					State = 1634;
					showStmtIdentifier();
					}
					break;
				case KW_ASC:
				case KW_DESC:
				case KW_NULLS:
				case KW_LAST:
				case KW_OVERWRITE:
				case KW_PARTITIONS:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_LOAD:
				case KW_EXPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_AFTER:
				case KW_RENAME:
				case KW_COMMENT:
				case KW_TINYINT:
				case KW_DATETIME:
				case KW_ZONE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_UNIONTYPE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_BUCKETS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_LOCATION:
				case KW_BUCKET:
				case KW_ADD:
				case KW_REPLACE:
				case KW_TEMPORARY:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_STREAMTABLE:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_PLUS:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_PURGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_CONTINUE:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_DIRECTORIES:
				case KW_SETS:
				case KW_NOSCAN:
				case KW_ROLE:
				case KW_ROLES:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_REOPTIMIZATION:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_QUERY:
				case KW_QUARTER:
				case KW_MONTH:
				case KW_WEEK:
				case KW_DAY:
				case KW_DOW:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_TRANSACTION:
				case KW_WORK:
				case KW_WRITE:
				case KW_ISOLATION:
				case KW_LEVEL:
				case KW_SNAPSHOT:
				case KW_AUTOCOMMIT:
				case KW_CACHE:
				case KW_ENFORCED:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_KEY:
				case KW_ABORT:
				case KW_MATCHED:
				case KW_REPL:
				case KW_DUMP:
				case KW_STATUS:
				case KW_VECTORIZATION:
				case KW_SUMMARY:
				case KW_OPERATOR:
				case KW_EXPRESSION:
				case KW_DETAIL:
				case KW_WAIT:
				case KW_RESOURCE:
				case KW_PLAN:
				case KW_QUERY_PARALLELISM:
				case KW_PLANS:
				case KW_ACTIVATE:
				case KW_DEFAULT:
				case KW_CHECK:
				case KW_POOL:
				case KW_MOVE:
				case KW_DO:
				case KW_ALLOC_FRACTION:
				case KW_SCHEDULING_POLICY:
				case KW_PATH:
				case KW_MAPPING:
				case KW_WORKLOAD:
				case KW_MANAGEMENT:
				case KW_ACTIVE:
				case KW_UNMANAGED:
				case StringLiteral:
				case Identifier:
					{
					State = 1635;
					showStmtIdentifier();
					}
					break;
				case SEMICOLON:
					break;
				default:
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1638;
				Match(KW_SHOW);
				State = 1639;
				Match(KW_VIEWS);
				State = 1642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_FROM || _la==KW_IN) {
					{
					State = 1640;
					_la = TokenStream.LA(1);
					if ( !(_la==KW_FROM || _la==KW_IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1641;
					identifier();
					}
				}

				State = 1647;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_LIKE:
					{
					State = 1644;
					Match(KW_LIKE);
					State = 1645;
					showStmtIdentifier();
					}
					break;
				case KW_ASC:
				case KW_DESC:
				case KW_NULLS:
				case KW_LAST:
				case KW_OVERWRITE:
				case KW_PARTITIONS:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_LOAD:
				case KW_EXPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_AFTER:
				case KW_RENAME:
				case KW_COMMENT:
				case KW_TINYINT:
				case KW_DATETIME:
				case KW_ZONE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_UNIONTYPE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_BUCKETS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_LOCATION:
				case KW_BUCKET:
				case KW_ADD:
				case KW_REPLACE:
				case KW_TEMPORARY:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_STREAMTABLE:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_PLUS:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_PURGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_CONTINUE:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_DIRECTORIES:
				case KW_SETS:
				case KW_NOSCAN:
				case KW_ROLE:
				case KW_ROLES:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_REOPTIMIZATION:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_QUERY:
				case KW_QUARTER:
				case KW_MONTH:
				case KW_WEEK:
				case KW_DAY:
				case KW_DOW:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_TRANSACTION:
				case KW_WORK:
				case KW_WRITE:
				case KW_ISOLATION:
				case KW_LEVEL:
				case KW_SNAPSHOT:
				case KW_AUTOCOMMIT:
				case KW_CACHE:
				case KW_ENFORCED:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_KEY:
				case KW_ABORT:
				case KW_MATCHED:
				case KW_REPL:
				case KW_DUMP:
				case KW_STATUS:
				case KW_VECTORIZATION:
				case KW_SUMMARY:
				case KW_OPERATOR:
				case KW_EXPRESSION:
				case KW_DETAIL:
				case KW_WAIT:
				case KW_RESOURCE:
				case KW_PLAN:
				case KW_QUERY_PARALLELISM:
				case KW_PLANS:
				case KW_ACTIVATE:
				case KW_DEFAULT:
				case KW_CHECK:
				case KW_POOL:
				case KW_MOVE:
				case KW_DO:
				case KW_ALLOC_FRACTION:
				case KW_SCHEDULING_POLICY:
				case KW_PATH:
				case KW_MAPPING:
				case KW_WORKLOAD:
				case KW_MANAGEMENT:
				case KW_ACTIVE:
				case KW_UNMANAGED:
				case StringLiteral:
				case Identifier:
					{
					State = 1646;
					showStmtIdentifier();
					}
					break;
				case SEMICOLON:
					break;
				default:
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1649;
				Match(KW_SHOW);
				State = 1650;
				Match(KW_MATERIALIZED);
				State = 1651;
				Match(KW_VIEWS);
				State = 1654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_FROM || _la==KW_IN) {
					{
					State = 1652;
					_la = TokenStream.LA(1);
					if ( !(_la==KW_FROM || _la==KW_IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1653;
					identifier();
					}
				}

				State = 1659;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_LIKE:
					{
					State = 1656;
					Match(KW_LIKE);
					State = 1657;
					showStmtIdentifier();
					}
					break;
				case KW_ASC:
				case KW_DESC:
				case KW_NULLS:
				case KW_LAST:
				case KW_OVERWRITE:
				case KW_PARTITIONS:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_LOAD:
				case KW_EXPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_AFTER:
				case KW_RENAME:
				case KW_COMMENT:
				case KW_TINYINT:
				case KW_DATETIME:
				case KW_ZONE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_UNIONTYPE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_BUCKETS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_LOCATION:
				case KW_BUCKET:
				case KW_ADD:
				case KW_REPLACE:
				case KW_TEMPORARY:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_STREAMTABLE:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_PLUS:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_PURGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_CONTINUE:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_DIRECTORIES:
				case KW_SETS:
				case KW_NOSCAN:
				case KW_ROLE:
				case KW_ROLES:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_REOPTIMIZATION:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_QUERY:
				case KW_QUARTER:
				case KW_MONTH:
				case KW_WEEK:
				case KW_DAY:
				case KW_DOW:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_TRANSACTION:
				case KW_WORK:
				case KW_WRITE:
				case KW_ISOLATION:
				case KW_LEVEL:
				case KW_SNAPSHOT:
				case KW_AUTOCOMMIT:
				case KW_CACHE:
				case KW_ENFORCED:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_KEY:
				case KW_ABORT:
				case KW_MATCHED:
				case KW_REPL:
				case KW_DUMP:
				case KW_STATUS:
				case KW_VECTORIZATION:
				case KW_SUMMARY:
				case KW_OPERATOR:
				case KW_EXPRESSION:
				case KW_DETAIL:
				case KW_WAIT:
				case KW_RESOURCE:
				case KW_PLAN:
				case KW_QUERY_PARALLELISM:
				case KW_PLANS:
				case KW_ACTIVATE:
				case KW_DEFAULT:
				case KW_CHECK:
				case KW_POOL:
				case KW_MOVE:
				case KW_DO:
				case KW_ALLOC_FRACTION:
				case KW_SCHEDULING_POLICY:
				case KW_PATH:
				case KW_MAPPING:
				case KW_WORKLOAD:
				case KW_MANAGEMENT:
				case KW_ACTIVE:
				case KW_UNMANAGED:
				case StringLiteral:
				case Identifier:
					{
					State = 1658;
					showStmtIdentifier();
					}
					break;
				case SEMICOLON:
					break;
				default:
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1661;
				Match(KW_SHOW);
				State = 1662;
				Match(KW_COLUMNS);
				State = 1663;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_FROM || _la==KW_IN) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1664;
				tableName();
				State = 1667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_FROM || _la==KW_IN) {
					{
					State = 1665;
					_la = TokenStream.LA(1);
					if ( !(_la==KW_FROM || _la==KW_IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1666;
					identifier();
					}
				}

				State = 1672;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_LIKE:
					{
					State = 1669;
					Match(KW_LIKE);
					State = 1670;
					showStmtIdentifier();
					}
					break;
				case KW_ASC:
				case KW_DESC:
				case KW_NULLS:
				case KW_LAST:
				case KW_OVERWRITE:
				case KW_PARTITIONS:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_LOAD:
				case KW_EXPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_AFTER:
				case KW_RENAME:
				case KW_COMMENT:
				case KW_TINYINT:
				case KW_DATETIME:
				case KW_ZONE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_UNIONTYPE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_BUCKETS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_LOCATION:
				case KW_BUCKET:
				case KW_ADD:
				case KW_REPLACE:
				case KW_TEMPORARY:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_STREAMTABLE:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_PLUS:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_PURGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_CONTINUE:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_DIRECTORIES:
				case KW_SETS:
				case KW_NOSCAN:
				case KW_ROLE:
				case KW_ROLES:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_REOPTIMIZATION:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_QUERY:
				case KW_QUARTER:
				case KW_MONTH:
				case KW_WEEK:
				case KW_DAY:
				case KW_DOW:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_TRANSACTION:
				case KW_WORK:
				case KW_WRITE:
				case KW_ISOLATION:
				case KW_LEVEL:
				case KW_SNAPSHOT:
				case KW_AUTOCOMMIT:
				case KW_CACHE:
				case KW_ENFORCED:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_KEY:
				case KW_ABORT:
				case KW_MATCHED:
				case KW_REPL:
				case KW_DUMP:
				case KW_STATUS:
				case KW_VECTORIZATION:
				case KW_SUMMARY:
				case KW_OPERATOR:
				case KW_EXPRESSION:
				case KW_DETAIL:
				case KW_WAIT:
				case KW_RESOURCE:
				case KW_PLAN:
				case KW_QUERY_PARALLELISM:
				case KW_PLANS:
				case KW_ACTIVATE:
				case KW_DEFAULT:
				case KW_CHECK:
				case KW_POOL:
				case KW_MOVE:
				case KW_DO:
				case KW_ALLOC_FRACTION:
				case KW_SCHEDULING_POLICY:
				case KW_PATH:
				case KW_MAPPING:
				case KW_WORKLOAD:
				case KW_MANAGEMENT:
				case KW_ACTIVE:
				case KW_UNMANAGED:
				case StringLiteral:
				case Identifier:
					{
					State = 1671;
					showStmtIdentifier();
					}
					break;
				case SEMICOLON:
					break;
				default:
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1674;
				Match(KW_SHOW);
				State = 1675;
				Match(KW_FUNCTIONS);
				State = 1679;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_LIKE:
					{
					State = 1676;
					Match(KW_LIKE);
					State = 1677;
					showFunctionIdentifier();
					}
					break;
				case KW_ASC:
				case KW_DESC:
				case KW_NULLS:
				case KW_LAST:
				case KW_OVERWRITE:
				case KW_PARTITIONS:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_LOAD:
				case KW_EXPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_AFTER:
				case KW_RENAME:
				case KW_COMMENT:
				case KW_TINYINT:
				case KW_DATETIME:
				case KW_ZONE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_UNIONTYPE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_BUCKETS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_LOCATION:
				case KW_BUCKET:
				case KW_ADD:
				case KW_REPLACE:
				case KW_TEMPORARY:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_STREAMTABLE:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_PLUS:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_PURGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_CONTINUE:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_DIRECTORIES:
				case KW_SETS:
				case KW_NOSCAN:
				case KW_ROLE:
				case KW_ROLES:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_REOPTIMIZATION:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_QUERY:
				case KW_QUARTER:
				case KW_MONTH:
				case KW_WEEK:
				case KW_DAY:
				case KW_DOW:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_TRANSACTION:
				case KW_WORK:
				case KW_WRITE:
				case KW_ISOLATION:
				case KW_LEVEL:
				case KW_SNAPSHOT:
				case KW_AUTOCOMMIT:
				case KW_CACHE:
				case KW_ENFORCED:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_KEY:
				case KW_ABORT:
				case KW_MATCHED:
				case KW_REPL:
				case KW_DUMP:
				case KW_STATUS:
				case KW_VECTORIZATION:
				case KW_SUMMARY:
				case KW_OPERATOR:
				case KW_EXPRESSION:
				case KW_DETAIL:
				case KW_WAIT:
				case KW_RESOURCE:
				case KW_PLAN:
				case KW_QUERY_PARALLELISM:
				case KW_PLANS:
				case KW_ACTIVATE:
				case KW_DEFAULT:
				case KW_CHECK:
				case KW_POOL:
				case KW_MOVE:
				case KW_DO:
				case KW_ALLOC_FRACTION:
				case KW_SCHEDULING_POLICY:
				case KW_PATH:
				case KW_MAPPING:
				case KW_WORKLOAD:
				case KW_MANAGEMENT:
				case KW_ACTIVE:
				case KW_UNMANAGED:
				case StringLiteral:
				case Identifier:
					{
					State = 1678;
					showFunctionIdentifier();
					}
					break;
				case SEMICOLON:
					break;
				default:
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1681;
				Match(KW_SHOW);
				State = 1682;
				Match(KW_PARTITIONS);
				State = 1683;
				tableName();
				State = 1685;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PARTITION) {
					{
					State = 1684;
					partitionSpec();
					}
				}

				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1687;
				Match(KW_SHOW);
				State = 1688;
				Match(KW_CREATE);
				State = 1693;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_DATABASE:
				case KW_SCHEMA:
					{
					State = 1689;
					_la = TokenStream.LA(1);
					if ( !(_la==KW_DATABASE || _la==KW_SCHEMA) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1690;
					identifier();
					}
					break;
				case KW_TABLE:
					{
					State = 1691;
					Match(KW_TABLE);
					State = 1692;
					tableName();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1695;
				Match(KW_SHOW);
				State = 1696;
				Match(KW_TABLE);
				State = 1697;
				Match(KW_EXTENDED);
				State = 1700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_FROM || _la==KW_IN) {
					{
					State = 1698;
					_la = TokenStream.LA(1);
					if ( !(_la==KW_FROM || _la==KW_IN) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1699;
					identifier();
					}
				}

				State = 1702;
				Match(KW_LIKE);
				State = 1703;
				showStmtIdentifier();
				State = 1705;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PARTITION) {
					{
					State = 1704;
					partitionSpec();
					}
				}

				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1707;
				Match(KW_SHOW);
				State = 1708;
				Match(KW_TBLPROPERTIES);
				State = 1709;
				tableName();
				State = 1713;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 1710;
					Match(LPAREN);
					State = 1711;
					Match(StringLiteral);
					State = 1712;
					Match(RPAREN);
					}
				}

				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1715;
				Match(KW_SHOW);
				State = 1716;
				Match(KW_LOCKS);
				State = 1728;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
				case 1:
					{
					State = 1717;
					_la = TokenStream.LA(1);
					if ( !(_la==KW_DATABASE || _la==KW_SCHEMA) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1718;
					identifier();
					State = 1720;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==KW_EXTENDED) {
						{
						State = 1719;
						Match(KW_EXTENDED);
						}
					}

					}
					break;
				case 2:
					{
					State = 1723;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ASC) | (1L << KW_DESC) | (1L << KW_NULLS) | (1L << KW_LAST) | (1L << KW_OVERWRITE) | (1L << KW_PARTITIONS) | (1L << KW_TABLES) | (1L << KW_COLUMNS) | (1L << KW_INDEX) | (1L << KW_INDEXES) | (1L << KW_REBUILD) | (1L << KW_FUNCTIONS) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_REPAIR) | (1L << KW_DIRECTORY) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT) | (1L << KW_LOAD) | (1L << KW_EXPORT) | (1L << KW_REPLICATION) | (1L << KW_METADATA) | (1L << KW_DATA) | (1L << KW_INPATH))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (KW_CHANGE - 68)) | (1L << (KW_FIRST - 68)) | (1L << (KW_AFTER - 68)) | (1L << (KW_RENAME - 68)) | (1L << (KW_COMMENT - 68)) | (1L << (KW_TINYINT - 68)) | (1L << (KW_DATETIME - 68)) | (1L << (KW_ZONE - 68)) | (1L << (KW_STRING - 68)) | (1L << (KW_STRUCT - 68)) | (1L << (KW_UNIONTYPE - 68)) | (1L << (KW_PARTITIONED - 68)) | (1L << (KW_CLUSTERED - 68)) | (1L << (KW_SORTED - 68)) | (1L << (KW_BUCKETS - 68)) | (1L << (KW_FORMAT - 68)) | (1L << (KW_DELIMITED - 68)) | (1L << (KW_FIELDS - 68)) | (1L << (KW_TERMINATED - 68)) | (1L << (KW_ESCAPED - 68)) | (1L << (KW_COLLECTION - 68)) | (1L << (KW_ITEMS - 68)) | (1L << (KW_KEYS - 68)) | (1L << (KW_KEY_TYPE - 68)) | (1L << (KW_KILL - 68)) | (1L << (KW_LINES - 68)) | (1L << (KW_STORED - 68)) | (1L << (KW_FILEFORMAT - 68)) | (1L << (KW_INPUTFORMAT - 68)) | (1L << (KW_OUTPUTFORMAT - 68)) | (1L << (KW_INPUTDRIVER - 68)) | (1L << (KW_OUTPUTDRIVER - 68)) | (1L << (KW_ENABLE - 68)) | (1L << (KW_DISABLE - 68)) | (1L << (KW_LOCATION - 68)) | (1L << (KW_BUCKET - 68)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (KW_ADD - 134)) | (1L << (KW_REPLACE - 134)) | (1L << (KW_TEMPORARY - 134)) | (1L << (KW_FILE - 134)) | (1L << (KW_JAR - 134)) | (1L << (KW_EXPLAIN - 134)) | (1L << (KW_FORMATTED - 134)) | (1L << (KW_DEPENDENCY - 134)) | (1L << (KW_LOGICAL - 134)) | (1L << (KW_SERDE - 134)) | (1L << (KW_DEFERRED - 134)) | (1L << (KW_SERDEPROPERTIES - 134)) | (1L << (KW_DBPROPERTIES - 134)) | (1L << (KW_LIMIT - 134)) | (1L << (KW_OFFSET - 134)) | (1L << (KW_UNSET - 134)) | (1L << (KW_TBLPROPERTIES - 134)) | (1L << (KW_IDXPROPERTIES - 134)) | (1L << (KW_VALUE_TYPE - 134)) | (1L << (KW_ELEM_TYPE - 134)) | (1L << (KW_DEFINED - 134)) | (1L << (KW_MAPJOIN - 134)) | (1L << (KW_STREAMTABLE - 134)) | (1L << (KW_CLUSTERSTATUS - 134)) | (1L << (KW_UTC - 134)) | (1L << (KW_UTCTIMESTAMP - 134)) | (1L << (KW_LONG - 134)) | (1L << (KW_PLUS - 134)) | (1L << (KW_VIEW - 134)) | (1L << (KW_VIEWS - 134)) | (1L << (KW_DATABASES - 134)) | (1L << (KW_MATERIALIZED - 134)) | (1L << (KW_SCHEMA - 134)) | (1L << (KW_SCHEMAS - 134)) | (1L << (KW_SSL - 134)) | (1L << (KW_UNDO - 134)) | (1L << (KW_LOCK - 134)) | (1L << (KW_LOCKS - 134)) | (1L << (KW_UNLOCK - 134)) | (1L << (KW_SHARED - 134)) | (1L << (KW_EXCLUSIVE - 134)) | (1L << (KW_UNSIGNED - 134)) | (1L << (KW_WHILE - 134)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (KW_READ - 198)) | (1L << (KW_PURGE - 198)) | (1L << (KW_ANALYZE - 198)) | (1L << (KW_BEFORE - 198)) | (1L << (KW_CONTINUE - 198)) | (1L << (KW_RECORDREADER - 198)) | (1L << (KW_RECORDWRITER - 198)) | (1L << (KW_SEMI - 198)) | (1L << (KW_TOUCH - 198)) | (1L << (KW_ARCHIVE - 198)) | (1L << (KW_UNARCHIVE - 198)) | (1L << (KW_COMPUTE - 198)) | (1L << (KW_STATISTICS - 198)) | (1L << (KW_USE - 198)) | (1L << (KW_OPTION - 198)) | (1L << (KW_CONCATENATE - 198)) | (1L << (KW_SHOW_DATABASE - 198)) | (1L << (KW_RESTRICT - 198)) | (1L << (KW_CASCADE - 198)) | (1L << (KW_SKEWED - 198)) | (1L << (KW_DIRECTORIES - 198)) | (1L << (KW_SETS - 198)) | (1L << (KW_NOSCAN - 198)) | (1L << (KW_ROLE - 198)) | (1L << (KW_ROLES - 198)) | (1L << (KW_URI - 198)) | (1L << (KW_SERVER - 198)) | (1L << (KW_ADMIN - 198)) | (1L << (KW_OWNER - 198)) | (1L << (KW_PRINCIPALS - 198)) | (1L << (KW_COMPACT - 198)) | (1L << (KW_COMPACTIONS - 198)) | (1L << (KW_TRANSACTIONS - 198)) | (1L << (KW_REWRITE - 198)) | (1L << (KW_REOPTIMIZATION - 198)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (KW_RELOAD - 264)) | (1L << (KW_YEAR - 264)) | (1L << (KW_QUERY - 264)) | (1L << (KW_QUARTER - 264)) | (1L << (KW_MONTH - 264)) | (1L << (KW_WEEK - 264)) | (1L << (KW_DAY - 264)) | (1L << (KW_DOW - 264)) | (1L << (KW_HOUR - 264)) | (1L << (KW_MINUTE - 264)) | (1L << (KW_SECOND - 264)) | (1L << (KW_TRANSACTION - 264)) | (1L << (KW_WORK - 264)) | (1L << (KW_WRITE - 264)) | (1L << (KW_ISOLATION - 264)) | (1L << (KW_LEVEL - 264)) | (1L << (KW_SNAPSHOT - 264)) | (1L << (KW_AUTOCOMMIT - 264)) | (1L << (KW_CACHE - 264)) | (1L << (KW_ENFORCED - 264)) | (1L << (KW_VALIDATE - 264)) | (1L << (KW_NOVALIDATE - 264)) | (1L << (KW_RELY - 264)) | (1L << (KW_NORELY - 264)) | (1L << (KW_KEY - 264)) | (1L << (KW_ABORT - 264)) | (1L << (KW_MATCHED - 264)) | (1L << (KW_REPL - 264)) | (1L << (KW_DUMP - 264)) | (1L << (KW_STATUS - 264)) | (1L << (KW_VECTORIZATION - 264)) | (1L << (KW_SUMMARY - 264)) | (1L << (KW_OPERATOR - 264)) | (1L << (KW_EXPRESSION - 264)) | (1L << (KW_DETAIL - 264)) | (1L << (KW_WAIT - 264)) | (1L << (KW_RESOURCE - 264)) | (1L << (KW_PLAN - 264)) | (1L << (KW_QUERY_PARALLELISM - 264)) | (1L << (KW_PLANS - 264)) | (1L << (KW_ACTIVATE - 264)) | (1L << (KW_DEFAULT - 264)) | (1L << (KW_CHECK - 264)) | (1L << (KW_POOL - 264)) | (1L << (KW_MOVE - 264)) | (1L << (KW_DO - 264)) | (1L << (KW_ALLOC_FRACTION - 264)) | (1L << (KW_SCHEDULING_POLICY - 264)) | (1L << (KW_PATH - 264)) | (1L << (KW_MAPPING - 264)) | (1L << (KW_WORKLOAD - 264)) | (1L << (KW_MANAGEMENT - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (KW_ACTIVE - 328)) | (1L << (KW_UNMANAGED - 328)) | (1L << (Identifier - 328)))) != 0)) {
						{
						State = 1722;
						partTypeExpr();
						}
					}

					State = 1726;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==KW_EXTENDED) {
						{
						State = 1725;
						Match(KW_EXTENDED);
						}
					}

					}
					break;
				}
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1730;
				Match(KW_SHOW);
				State = 1731;
				Match(KW_COMPACTIONS);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1732;
				Match(KW_SHOW);
				State = 1733;
				Match(KW_TRANSACTIONS);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1734;
				Match(KW_SHOW);
				State = 1735;
				Match(KW_CONF);
				State = 1736;
				Match(StringLiteral);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1737;
				Match(KW_SHOW);
				State = 1738;
				Match(KW_RESOURCE);
				State = 1742;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_PLAN:
					{
					{
					State = 1739;
					Match(KW_PLAN);
					State = 1740;
					identifier();
					}
					}
					break;
				case KW_PLANS:
					{
					State = 1741;
					Match(KW_PLANS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCK() { return GetToken(HiveParser.KW_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockModeContext lockMode() {
			return GetRuleContext<LockModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		public LockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterLockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitLockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStatementContext lockStatement() {
		LockStatementContext _localctx = new LockStatementContext(Context, State);
		EnterRule(_localctx, 190, RULE_lockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1746;
			Match(KW_LOCK);
			State = 1747;
			Match(KW_TABLE);
			State = 1748;
			tableName();
			State = 1750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARTITION) {
				{
				State = 1749;
				partitionSpec();
				}
			}

			State = 1752;
			lockMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockDatabaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCK() { return GetToken(HiveParser.KW_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockModeContext lockMode() {
			return GetRuleContext<LockModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATABASE() { return GetToken(HiveParser.KW_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMA() { return GetToken(HiveParser.KW_SCHEMA, 0); }
		public LockDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterLockDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitLockDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockDatabaseContext lockDatabase() {
		LockDatabaseContext _localctx = new LockDatabaseContext(Context, State);
		EnterRule(_localctx, 192, RULE_lockDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1754;
			Match(KW_LOCK);
			State = 1755;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_DATABASE || _la==KW_SCHEMA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1756;
			identifier();
			State = 1757;
			lockMode();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHARED() { return GetToken(HiveParser.KW_SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXCLUSIVE() { return GetToken(HiveParser.KW_EXCLUSIVE, 0); }
		public LockModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterLockMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitLockMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockModeContext lockMode() {
		LockModeContext _localctx = new LockModeContext(Context, State);
		EnterRule(_localctx, 194, RULE_lockMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1759;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_SHARED || _la==KW_EXCLUSIVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNLOCK() { return GetToken(HiveParser.KW_UNLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		public UnlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterUnlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitUnlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStatementContext unlockStatement() {
		UnlockStatementContext _localctx = new UnlockStatementContext(Context, State);
		EnterRule(_localctx, 196, RULE_unlockStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1761;
			Match(KW_UNLOCK);
			State = 1762;
			Match(KW_TABLE);
			State = 1763;
			tableName();
			State = 1765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARTITION) {
				{
				State = 1764;
				partitionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockDatabaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNLOCK() { return GetToken(HiveParser.KW_UNLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATABASE() { return GetToken(HiveParser.KW_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMA() { return GetToken(HiveParser.KW_SCHEMA, 0); }
		public UnlockDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterUnlockDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitUnlockDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockDatabase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockDatabaseContext unlockDatabase() {
		UnlockDatabaseContext _localctx = new UnlockDatabaseContext(Context, State);
		EnterRule(_localctx, 198, RULE_unlockDatabase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1767;
			Match(KW_UNLOCK);
			State = 1768;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_DATABASE || _la==KW_SCHEMA) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1769;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CREATE() { return GetToken(HiveParser.KW_CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLE() { return GetToken(HiveParser.KW_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CreateRoleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRoleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCreateRoleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCreateRoleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateRoleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoleStatementContext createRoleStatement() {
		CreateRoleStatementContext _localctx = new CreateRoleStatementContext(Context, State);
		EnterRule(_localctx, 200, RULE_createRoleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1771;
			Match(KW_CREATE);
			State = 1772;
			Match(KW_ROLE);
			State = 1773;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropRoleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLE() { return GetToken(HiveParser.KW_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DropRoleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropRoleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDropRoleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDropRoleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropRoleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropRoleStatementContext dropRoleStatement() {
		DropRoleStatementContext _localctx = new DropRoleStatementContext(Context, State);
		EnterRule(_localctx, 202, RULE_dropRoleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1775;
			Match(KW_DROP);
			State = 1776;
			Match(KW_ROLE);
			State = 1777;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantPrivilegesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GRANT() { return GetToken(HiveParser.KW_GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeListContext privilegeList() {
			return GetRuleContext<PrivilegeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TO() { return GetToken(HiveParser.KW_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalSpecificationContext principalSpecification() {
			return GetRuleContext<PrincipalSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeObjectContext privilegeObject() {
			return GetRuleContext<PrivilegeObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithGrantOptionContext withGrantOption() {
			return GetRuleContext<WithGrantOptionContext>(0);
		}
		public GrantPrivilegesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantPrivileges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterGrantPrivileges(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitGrantPrivileges(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantPrivileges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantPrivilegesContext grantPrivileges() {
		GrantPrivilegesContext _localctx = new GrantPrivilegesContext(Context, State);
		EnterRule(_localctx, 204, RULE_grantPrivileges);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1779;
			Match(KW_GRANT);
			State = 1780;
			privilegeList();
			State = 1782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ON) {
				{
				State = 1781;
				privilegeObject();
				}
			}

			State = 1784;
			Match(KW_TO);
			State = 1785;
			principalSpecification();
			State = 1787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WITH) {
				{
				State = 1786;
				withGrantOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokePrivilegesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REVOKE() { return GetToken(HiveParser.KW_REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeListContext privilegeList() {
			return GetRuleContext<PrivilegeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FROM() { return GetToken(HiveParser.KW_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalSpecificationContext principalSpecification() {
			return GetRuleContext<PrincipalSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantOptionForContext grantOptionFor() {
			return GetRuleContext<GrantOptionForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeObjectContext privilegeObject() {
			return GetRuleContext<PrivilegeObjectContext>(0);
		}
		public RevokePrivilegesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokePrivileges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRevokePrivileges(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRevokePrivileges(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevokePrivileges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokePrivilegesContext revokePrivileges() {
		RevokePrivilegesContext _localctx = new RevokePrivilegesContext(Context, State);
		EnterRule(_localctx, 206, RULE_revokePrivileges);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1789;
			Match(KW_REVOKE);
			State = 1791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GRANT) {
				{
				State = 1790;
				grantOptionFor();
				}
			}

			State = 1793;
			privilegeList();
			State = 1795;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ON) {
				{
				State = 1794;
				privilegeObject();
				}
			}

			State = 1797;
			Match(KW_FROM);
			State = 1798;
			principalSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GRANT() { return GetToken(HiveParser.KW_GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TO() { return GetToken(HiveParser.KW_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalSpecificationContext principalSpecification() {
			return GetRuleContext<PrincipalSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLE() { return GetToken(HiveParser.KW_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithAdminOptionContext withAdminOption() {
			return GetRuleContext<WithAdminOptionContext>(0);
		}
		public GrantRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterGrantRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitGrantRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantRoleContext grantRole() {
		GrantRoleContext _localctx = new GrantRoleContext(Context, State);
		EnterRule(_localctx, 208, RULE_grantRole);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1800;
			Match(KW_GRANT);
			State = 1802;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 1801;
				Match(KW_ROLE);
				}
				break;
			}
			State = 1804;
			identifier();
			State = 1809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1805;
				Match(COMMA);
				State = 1806;
				identifier();
				}
				}
				State = 1811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1812;
			Match(KW_TO);
			State = 1813;
			principalSpecification();
			State = 1815;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WITH) {
				{
				State = 1814;
				withAdminOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REVOKE() { return GetToken(HiveParser.KW_REVOKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FROM() { return GetToken(HiveParser.KW_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalSpecificationContext principalSpecification() {
			return GetRuleContext<PrincipalSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdminOptionForContext adminOptionFor() {
			return GetRuleContext<AdminOptionForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLE() { return GetToken(HiveParser.KW_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public RevokeRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRevokeRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRevokeRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRevokeRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RevokeRoleContext revokeRole() {
		RevokeRoleContext _localctx = new RevokeRoleContext(Context, State);
		EnterRule(_localctx, 210, RULE_revokeRole);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1817;
			Match(KW_REVOKE);
			State = 1819;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				{
				State = 1818;
				adminOptionFor();
				}
				break;
			}
			State = 1822;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
			case 1:
				{
				State = 1821;
				Match(KW_ROLE);
				}
				break;
			}
			State = 1824;
			identifier();
			State = 1829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1825;
				Match(COMMA);
				State = 1826;
				identifier();
				}
				}
				State = 1831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1832;
			Match(KW_FROM);
			State = 1833;
			principalSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowRoleGrantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHOW() { return GetToken(HiveParser.KW_SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLE() { return GetToken(HiveParser.KW_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GRANT() { return GetToken(HiveParser.KW_GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalNameContext principalName() {
			return GetRuleContext<PrincipalNameContext>(0);
		}
		public ShowRoleGrantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showRoleGrants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterShowRoleGrants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitShowRoleGrants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRoleGrants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowRoleGrantsContext showRoleGrants() {
		ShowRoleGrantsContext _localctx = new ShowRoleGrantsContext(Context, State);
		EnterRule(_localctx, 212, RULE_showRoleGrants);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1835;
			Match(KW_SHOW);
			State = 1836;
			Match(KW_ROLE);
			State = 1837;
			Match(KW_GRANT);
			State = 1838;
			principalName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowRolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHOW() { return GetToken(HiveParser.KW_SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLES() { return GetToken(HiveParser.KW_ROLES, 0); }
		public ShowRolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showRoles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterShowRoles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitShowRoles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRoles(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowRolesContext showRoles() {
		ShowRolesContext _localctx = new ShowRolesContext(Context, State);
		EnterRule(_localctx, 214, RULE_showRoles);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1840;
			Match(KW_SHOW);
			State = 1841;
			Match(KW_ROLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCurrentRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHOW() { return GetToken(HiveParser.KW_SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CURRENT() { return GetToken(HiveParser.KW_CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLES() { return GetToken(HiveParser.KW_ROLES, 0); }
		public ShowCurrentRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCurrentRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterShowCurrentRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitShowCurrentRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowCurrentRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowCurrentRoleContext showCurrentRole() {
		ShowCurrentRoleContext _localctx = new ShowCurrentRoleContext(Context, State);
		EnterRule(_localctx, 216, RULE_showCurrentRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1843;
			Match(KW_SHOW);
			State = 1844;
			Match(KW_CURRENT);
			State = 1845;
			Match(KW_ROLES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLE() { return GetToken(HiveParser.KW_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(HiveParser.KW_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NONE() { return GetToken(HiveParser.KW_NONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SetRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSetRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSetRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetRole(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetRoleContext setRole() {
		SetRoleContext _localctx = new SetRoleContext(Context, State);
		EnterRule(_localctx, 218, RULE_setRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1847;
			Match(KW_SET);
			State = 1848;
			Match(KW_ROLE);
			State = 1852;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ALL:
				{
				State = 1849;
				Match(KW_ALL);
				}
				break;
			case KW_NONE:
				{
				State = 1850;
				Match(KW_NONE);
				}
				break;
			case KW_ASC:
			case KW_DESC:
			case KW_NULLS:
			case KW_LAST:
			case KW_OVERWRITE:
			case KW_PARTITIONS:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_AFTER:
			case KW_RENAME:
			case KW_COMMENT:
			case KW_TINYINT:
			case KW_DATETIME:
			case KW_ZONE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_UNIONTYPE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_BUCKETS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_LOCATION:
			case KW_BUCKET:
			case KW_ADD:
			case KW_REPLACE:
			case KW_TEMPORARY:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_STREAMTABLE:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_PLUS:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_PURGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_CONTINUE:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_DIRECTORIES:
			case KW_SETS:
			case KW_NOSCAN:
			case KW_ROLE:
			case KW_ROLES:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_QUERY:
			case KW_QUARTER:
			case KW_MONTH:
			case KW_WEEK:
			case KW_DAY:
			case KW_DOW:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_TRANSACTION:
			case KW_WORK:
			case KW_WRITE:
			case KW_ISOLATION:
			case KW_LEVEL:
			case KW_SNAPSHOT:
			case KW_AUTOCOMMIT:
			case KW_CACHE:
			case KW_ENFORCED:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_KEY:
			case KW_ABORT:
			case KW_MATCHED:
			case KW_REPL:
			case KW_DUMP:
			case KW_STATUS:
			case KW_VECTORIZATION:
			case KW_SUMMARY:
			case KW_OPERATOR:
			case KW_EXPRESSION:
			case KW_DETAIL:
			case KW_WAIT:
			case KW_RESOURCE:
			case KW_PLAN:
			case KW_QUERY_PARALLELISM:
			case KW_PLANS:
			case KW_ACTIVATE:
			case KW_DEFAULT:
			case KW_CHECK:
			case KW_POOL:
			case KW_MOVE:
			case KW_DO:
			case KW_ALLOC_FRACTION:
			case KW_SCHEDULING_POLICY:
			case KW_PATH:
			case KW_MAPPING:
			case KW_WORKLOAD:
			case KW_MANAGEMENT:
			case KW_ACTIVE:
			case KW_UNMANAGED:
			case Identifier:
				{
				State = 1851;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowGrantsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHOW() { return GetToken(HiveParser.KW_SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GRANT() { return GetToken(HiveParser.KW_GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalNameContext principalName() {
			return GetRuleContext<PrincipalNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(HiveParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeIncludeColObjectContext privilegeIncludeColObject() {
			return GetRuleContext<PrivilegeIncludeColObjectContext>(0);
		}
		public ShowGrantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showGrants; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterShowGrants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitShowGrants(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowGrants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowGrantsContext showGrants() {
		ShowGrantsContext _localctx = new ShowGrantsContext(Context, State);
		EnterRule(_localctx, 220, RULE_showGrants);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1854;
			Match(KW_SHOW);
			State = 1855;
			Match(KW_GRANT);
			State = 1857;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GROUP || _la==KW_USER || _la==KW_ROLE) {
				{
				State = 1856;
				principalName();
				}
			}

			State = 1861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ON) {
				{
				State = 1859;
				Match(KW_ON);
				State = 1860;
				privilegeIncludeColObject();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowRolePrincipalsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHOW() { return GetToken(HiveParser.KW_SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRINCIPALS() { return GetToken(HiveParser.KW_PRINCIPALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ShowRolePrincipalsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showRolePrincipals; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterShowRolePrincipals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitShowRolePrincipals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowRolePrincipals(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowRolePrincipalsContext showRolePrincipals() {
		ShowRolePrincipalsContext _localctx = new ShowRolePrincipalsContext(Context, State);
		EnterRule(_localctx, 222, RULE_showRolePrincipals);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1863;
			Match(KW_SHOW);
			State = 1864;
			Match(KW_PRINCIPALS);
			State = 1865;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeIncludeColObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(HiveParser.KW_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivObjectColsContext privObjectCols() {
			return GetRuleContext<PrivObjectColsContext>(0);
		}
		public PrivilegeIncludeColObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeIncludeColObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrivilegeIncludeColObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrivilegeIncludeColObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilegeIncludeColObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeIncludeColObjectContext privilegeIncludeColObject() {
		PrivilegeIncludeColObjectContext _localctx = new PrivilegeIncludeColObjectContext(Context, State);
		EnterRule(_localctx, 224, RULE_privilegeIncludeColObject);
		try {
			State = 1869;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1867;
				Match(KW_ALL);
				}
				break;
			case KW_ASC:
			case KW_DESC:
			case KW_NULLS:
			case KW_LAST:
			case KW_OVERWRITE:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_AFTER:
			case KW_RENAME:
			case KW_COMMENT:
			case KW_TINYINT:
			case KW_DATETIME:
			case KW_ZONE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_UNIONTYPE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_BUCKETS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_LOCATION:
			case KW_BUCKET:
			case KW_ADD:
			case KW_REPLACE:
			case KW_TEMPORARY:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_STREAMTABLE:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_PLUS:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_DATABASE:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_PURGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_CONTINUE:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_DIRECTORIES:
			case KW_SETS:
			case KW_NOSCAN:
			case KW_ROLE:
			case KW_ROLES:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_QUERY:
			case KW_QUARTER:
			case KW_MONTH:
			case KW_WEEK:
			case KW_DAY:
			case KW_DOW:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_TRANSACTION:
			case KW_WORK:
			case KW_WRITE:
			case KW_ISOLATION:
			case KW_LEVEL:
			case KW_SNAPSHOT:
			case KW_AUTOCOMMIT:
			case KW_CACHE:
			case KW_ENFORCED:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_KEY:
			case KW_ABORT:
			case KW_MATCHED:
			case KW_REPL:
			case KW_DUMP:
			case KW_STATUS:
			case KW_VECTORIZATION:
			case KW_SUMMARY:
			case KW_OPERATOR:
			case KW_EXPRESSION:
			case KW_DETAIL:
			case KW_WAIT:
			case KW_RESOURCE:
			case KW_PLAN:
			case KW_QUERY_PARALLELISM:
			case KW_PLANS:
			case KW_ACTIVATE:
			case KW_DEFAULT:
			case KW_CHECK:
			case KW_POOL:
			case KW_MOVE:
			case KW_DO:
			case KW_ALLOC_FRACTION:
			case KW_SCHEDULING_POLICY:
			case KW_PATH:
			case KW_MAPPING:
			case KW_WORKLOAD:
			case KW_MANAGEMENT:
			case KW_ACTIVE:
			case KW_UNMANAGED:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1868;
				privObjectCols();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(HiveParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivObjectContext privObject() {
			return GetRuleContext<PrivObjectContext>(0);
		}
		public PrivilegeObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrivilegeObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrivilegeObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilegeObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeObjectContext privilegeObject() {
		PrivilegeObjectContext _localctx = new PrivilegeObjectContext(Context, State);
		EnterRule(_localctx, 226, RULE_privilegeObject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1871;
			Match(KW_ON);
			State = 1872;
			privObject();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATABASE() { return GetToken(HiveParser.KW_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMA() { return GetToken(HiveParser.KW_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_URI() { return GetToken(HiveParser.KW_URI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERVER() { return GetToken(HiveParser.KW_SERVER, 0); }
		public PrivObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrivObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrivObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivObjectContext privObject() {
		PrivObjectContext _localctx = new PrivObjectContext(Context, State);
		EnterRule(_localctx, 228, RULE_privObject);
		int _la;
		try {
			State = 1887;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1874;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_DATABASE || _la==KW_SCHEMA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1875;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1877;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_TABLE) {
					{
					State = 1876;
					Match(KW_TABLE);
					}
				}

				State = 1879;
				tableName();
				State = 1881;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PARTITION) {
					{
					State = 1880;
					partitionSpec();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1883;
				Match(KW_URI);
				State = 1884;
				Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1885;
				Match(KW_SERVER);
				State = 1886;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivObjectColsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATABASE() { return GetToken(HiveParser.KW_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMA() { return GetToken(HiveParser.KW_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameListContext columnNameList() {
			return GetRuleContext<ColumnNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_URI() { return GetToken(HiveParser.KW_URI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERVER() { return GetToken(HiveParser.KW_SERVER, 0); }
		public PrivObjectColsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privObjectCols; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrivObjectCols(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrivObjectCols(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivObjectCols(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivObjectColsContext privObjectCols() {
		PrivObjectColsContext _localctx = new PrivObjectColsContext(Context, State);
		EnterRule(_localctx, 230, RULE_privObjectCols);
		int _la;
		try {
			State = 1908;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1889;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_DATABASE || _la==KW_SCHEMA) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1890;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1892;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_TABLE) {
					{
					State = 1891;
					Match(KW_TABLE);
					}
				}

				State = 1894;
				tableName();
				State = 1899;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 1895;
					Match(LPAREN);
					State = 1896;
					columnNameList();
					State = 1897;
					Match(RPAREN);
					}
				}

				State = 1902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PARTITION) {
					{
					State = 1901;
					partitionSpec();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1904;
				Match(KW_URI);
				State = 1905;
				Match(StringLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1906;
				Match(KW_SERVER);
				State = 1907;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivlegeDefContext[] privlegeDef() {
			return GetRuleContexts<PrivlegeDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrivlegeDefContext privlegeDef(int i) {
			return GetRuleContext<PrivlegeDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public PrivilegeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrivilegeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrivilegeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilegeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeListContext privilegeList() {
		PrivilegeListContext _localctx = new PrivilegeListContext(Context, State);
		EnterRule(_localctx, 232, RULE_privilegeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1910;
			privlegeDef();
			State = 1915;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1911;
				Match(COMMA);
				State = 1912;
				privlegeDef();
				}
				}
				State = 1917;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivlegeDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeTypeContext privilegeType() {
			return GetRuleContext<PrivilegeTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameListContext columnNameList() {
			return GetRuleContext<ColumnNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public PrivlegeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privlegeDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrivlegeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrivlegeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivlegeDef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivlegeDefContext privlegeDef() {
		PrivlegeDefContext _localctx = new PrivlegeDefContext(Context, State);
		EnterRule(_localctx, 234, RULE_privlegeDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1918;
			privilegeType();
			State = 1923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 1919;
				Match(LPAREN);
				State = 1920;
				columnNameList();
				State = 1921;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(HiveParser.KW_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALTER() { return GetToken(HiveParser.KW_ALTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UPDATE() { return GetToken(HiveParser.KW_UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CREATE() { return GetToken(HiveParser.KW_CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCK() { return GetToken(HiveParser.KW_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELECT() { return GetToken(HiveParser.KW_SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHOW_DATABASE() { return GetToken(HiveParser.KW_SHOW_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INSERT() { return GetToken(HiveParser.KW_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DELETE() { return GetToken(HiveParser.KW_DELETE, 0); }
		public PrivilegeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrivilegeType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrivilegeType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrivilegeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeTypeContext privilegeType() {
		PrivilegeTypeContext _localctx = new PrivilegeTypeContext(Context, State);
		EnterRule(_localctx, 236, RULE_privilegeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1925;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ALL) | (1L << KW_SELECT) | (1L << KW_INSERT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (KW_CREATE - 65)) | (1L << (KW_ALTER - 65)) | (1L << (KW_DROP - 65)))) != 0) || ((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & ((1L << (KW_DELETE - 173)) | (1L << (KW_LOCK - 173)) | (1L << (KW_SHOW_DATABASE - 173)) | (1L << (KW_UPDATE - 173)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrincipalSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalNameContext[] principalName() {
			return GetRuleContexts<PrincipalNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalNameContext principalName(int i) {
			return GetRuleContext<PrincipalNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public PrincipalSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principalSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrincipalSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrincipalSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrincipalSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrincipalSpecificationContext principalSpecification() {
		PrincipalSpecificationContext _localctx = new PrincipalSpecificationContext(Context, State);
		EnterRule(_localctx, 238, RULE_principalSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1927;
			principalName();
			State = 1932;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1928;
				Match(COMMA);
				State = 1929;
				principalName();
				}
				}
				State = 1934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrincipalNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USER() { return GetToken(HiveParser.KW_USER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrincipalIdentifierContext principalIdentifier() {
			return GetRuleContext<PrincipalIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GROUP() { return GetToken(HiveParser.KW_GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLE() { return GetToken(HiveParser.KW_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PrincipalNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principalName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrincipalName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrincipalName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrincipalName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrincipalNameContext principalName() {
		PrincipalNameContext _localctx = new PrincipalNameContext(Context, State);
		EnterRule(_localctx, 240, RULE_principalName);
		try {
			State = 1941;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_USER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1935;
				Match(KW_USER);
				State = 1936;
				principalIdentifier();
				}
				break;
			case KW_GROUP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1937;
				Match(KW_GROUP);
				State = 1938;
				principalIdentifier();
				}
				break;
			case KW_ROLE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1939;
				Match(KW_ROLE);
				State = 1940;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithGrantOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GRANT() { return GetToken(HiveParser.KW_GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPTION() { return GetToken(HiveParser.KW_OPTION, 0); }
		public WithGrantOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withGrantOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWithGrantOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWithGrantOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithGrantOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithGrantOptionContext withGrantOption() {
		WithGrantOptionContext _localctx = new WithGrantOptionContext(Context, State);
		EnterRule(_localctx, 242, RULE_withGrantOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1943;
			Match(KW_WITH);
			State = 1944;
			Match(KW_GRANT);
			State = 1945;
			Match(KW_OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantOptionForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GRANT() { return GetToken(HiveParser.KW_GRANT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPTION() { return GetToken(HiveParser.KW_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(HiveParser.KW_FOR, 0); }
		public GrantOptionForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantOptionFor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterGrantOptionFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitGrantOptionFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGrantOptionFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GrantOptionForContext grantOptionFor() {
		GrantOptionForContext _localctx = new GrantOptionForContext(Context, State);
		EnterRule(_localctx, 244, RULE_grantOptionFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1947;
			Match(KW_GRANT);
			State = 1948;
			Match(KW_OPTION);
			State = 1949;
			Match(KW_FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdminOptionForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ADMIN() { return GetToken(HiveParser.KW_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPTION() { return GetToken(HiveParser.KW_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOR() { return GetToken(HiveParser.KW_FOR, 0); }
		public AdminOptionForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adminOptionFor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAdminOptionFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAdminOptionFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdminOptionFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdminOptionForContext adminOptionFor() {
		AdminOptionForContext _localctx = new AdminOptionForContext(Context, State);
		EnterRule(_localctx, 246, RULE_adminOptionFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1951;
			Match(KW_ADMIN);
			State = 1952;
			Match(KW_OPTION);
			State = 1953;
			Match(KW_FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithAdminOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ADMIN() { return GetToken(HiveParser.KW_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPTION() { return GetToken(HiveParser.KW_OPTION, 0); }
		public WithAdminOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withAdminOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWithAdminOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWithAdminOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithAdminOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithAdminOptionContext withAdminOption() {
		WithAdminOptionContext _localctx = new WithAdminOptionContext(Context, State);
		EnterRule(_localctx, 248, RULE_withAdminOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1955;
			Match(KW_WITH);
			State = 1956;
			Match(KW_ADMIN);
			State = 1957;
			Match(KW_OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetastoreCheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MSCK() { return GetToken(HiveParser.KW_MSCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPAIR() { return GetToken(HiveParser.KW_REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARTITIONS() { return GetToken(HiveParser.KW_PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ADD() { return GetToken(HiveParser.KW_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SYNC() { return GetToken(HiveParser.KW_SYNC, 0); }
		public MetastoreCheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metastoreCheck; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterMetastoreCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitMetastoreCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetastoreCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetastoreCheckContext metastoreCheck() {
		MetastoreCheckContext _localctx = new MetastoreCheckContext(Context, State);
		EnterRule(_localctx, 250, RULE_metastoreCheck);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1959;
			Match(KW_MSCK);
			State = 1961;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_REPAIR) {
				{
				State = 1960;
				Match(KW_REPAIR);
				}
			}

			State = 1972;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TABLE:
				{
				State = 1963;
				Match(KW_TABLE);
				State = 1964;
				tableName();
				State = 1967;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_DROP || _la==KW_ADD || _la==KW_SYNC) {
					{
					State = 1965;
					_la = TokenStream.LA(1);
					if ( !(_la==KW_DROP || _la==KW_ADD || _la==KW_SYNC) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 1966;
					Match(KW_PARTITIONS);
					}
				}

				}
				break;
			case KW_PARTITION:
			case SEMICOLON:
				{
				State = 1970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PARTITION) {
					{
					State = 1969;
					partitionSpec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ResourceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterResourceList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitResourceList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceListContext resourceList() {
		ResourceListContext _localctx = new ResourceListContext(Context, State);
		EnterRule(_localctx, 252, RULE_resourceList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			resource();
			State = 1979;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1975;
				Match(COMMA);
				State = 1976;
				resource();
				}
				}
				State = 1981;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ResourceTypeContext resourceType() {
			return GetRuleContext<ResourceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 254, RULE_resource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1982;
			resourceType();
			State = 1983;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_JAR() { return GetToken(HiveParser.KW_JAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FILE() { return GetToken(HiveParser.KW_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARCHIVE() { return GetToken(HiveParser.KW_ARCHIVE, 0); }
		public ResourceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterResourceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitResourceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceTypeContext resourceType() {
		ResourceTypeContext _localctx = new ResourceTypeContext(Context, State);
		EnterRule(_localctx, 256, RULE_resourceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1985;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_FILE || _la==KW_JAR || _la==KW_ARCHIVE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CREATE() { return GetToken(HiveParser.KW_CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FUNCTION() { return GetToken(HiveParser.KW_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionIdentifierContext functionIdentifier() {
			return GetRuleContext<FunctionIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TEMPORARY() { return GetToken(HiveParser.KW_TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USING() { return GetToken(HiveParser.KW_USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceListContext resourceList() {
			return GetRuleContext<ResourceListContext>(0);
		}
		public CreateFunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunctionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCreateFunctionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCreateFunctionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionStatementContext createFunctionStatement() {
		CreateFunctionStatementContext _localctx = new CreateFunctionStatementContext(Context, State);
		EnterRule(_localctx, 258, RULE_createFunctionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1987;
			Match(KW_CREATE);
			State = 1989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_TEMPORARY) {
				{
				State = 1988;
				Match(KW_TEMPORARY);
				}
			}

			State = 1991;
			Match(KW_FUNCTION);
			State = 1992;
			functionIdentifier();
			State = 1993;
			Match(KW_AS);
			State = 1994;
			Match(StringLiteral);
			State = 1997;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_USING) {
				{
				State = 1995;
				Match(KW_USING);
				State = 1996;
				resourceList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FUNCTION() { return GetToken(HiveParser.KW_FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionIdentifierContext functionIdentifier() {
			return GetRuleContext<FunctionIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TEMPORARY() { return GetToken(HiveParser.KW_TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunctionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDropFunctionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDropFunctionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionStatementContext dropFunctionStatement() {
		DropFunctionStatementContext _localctx = new DropFunctionStatementContext(Context, State);
		EnterRule(_localctx, 260, RULE_dropFunctionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999;
			Match(KW_DROP);
			State = 2001;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_TEMPORARY) {
				{
				State = 2000;
				Match(KW_TEMPORARY);
				}
			}

			State = 2003;
			Match(KW_FUNCTION);
			State = 2005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 2004;
				ifExists();
				}
			}

			State = 2007;
			functionIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReloadFunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RELOAD() { return GetToken(HiveParser.KW_RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FUNCTION() { return GetToken(HiveParser.KW_FUNCTION, 0); }
		public ReloadFunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reloadFunctionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterReloadFunctionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitReloadFunctionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReloadFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReloadFunctionStatementContext reloadFunctionStatement() {
		ReloadFunctionStatementContext _localctx = new ReloadFunctionStatementContext(Context, State);
		EnterRule(_localctx, 262, RULE_reloadFunctionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2009;
			Match(KW_RELOAD);
			State = 2010;
			Match(KW_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateMacroStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CREATE() { return GetToken(HiveParser.KW_CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TEMPORARY() { return GetToken(HiveParser.KW_TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MACRO() { return GetToken(HiveParser.KW_MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(HiveParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeListContext columnNameTypeList() {
			return GetRuleContext<ColumnNameTypeListContext>(0);
		}
		public CreateMacroStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createMacroStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCreateMacroStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCreateMacroStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateMacroStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateMacroStatementContext createMacroStatement() {
		CreateMacroStatementContext _localctx = new CreateMacroStatementContext(Context, State);
		EnterRule(_localctx, 264, RULE_createMacroStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2012;
			Match(KW_CREATE);
			State = 2013;
			Match(KW_TEMPORARY);
			State = 2014;
			Match(KW_MACRO);
			State = 2015;
			Match(Identifier);
			State = 2016;
			Match(LPAREN);
			State = 2018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ASC) | (1L << KW_DESC) | (1L << KW_NULLS) | (1L << KW_LAST) | (1L << KW_OVERWRITE) | (1L << KW_PARTITIONS) | (1L << KW_TABLES) | (1L << KW_COLUMNS) | (1L << KW_INDEX) | (1L << KW_INDEXES) | (1L << KW_REBUILD) | (1L << KW_FUNCTIONS) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_REPAIR) | (1L << KW_DIRECTORY) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT) | (1L << KW_LOAD) | (1L << KW_EXPORT) | (1L << KW_REPLICATION) | (1L << KW_METADATA) | (1L << KW_DATA) | (1L << KW_INPATH))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (KW_CHANGE - 68)) | (1L << (KW_FIRST - 68)) | (1L << (KW_AFTER - 68)) | (1L << (KW_RENAME - 68)) | (1L << (KW_COMMENT - 68)) | (1L << (KW_TINYINT - 68)) | (1L << (KW_DATETIME - 68)) | (1L << (KW_ZONE - 68)) | (1L << (KW_STRING - 68)) | (1L << (KW_STRUCT - 68)) | (1L << (KW_UNIONTYPE - 68)) | (1L << (KW_PARTITIONED - 68)) | (1L << (KW_CLUSTERED - 68)) | (1L << (KW_SORTED - 68)) | (1L << (KW_BUCKETS - 68)) | (1L << (KW_FORMAT - 68)) | (1L << (KW_DELIMITED - 68)) | (1L << (KW_FIELDS - 68)) | (1L << (KW_TERMINATED - 68)) | (1L << (KW_ESCAPED - 68)) | (1L << (KW_COLLECTION - 68)) | (1L << (KW_ITEMS - 68)) | (1L << (KW_KEYS - 68)) | (1L << (KW_KEY_TYPE - 68)) | (1L << (KW_KILL - 68)) | (1L << (KW_LINES - 68)) | (1L << (KW_STORED - 68)) | (1L << (KW_FILEFORMAT - 68)) | (1L << (KW_INPUTFORMAT - 68)) | (1L << (KW_OUTPUTFORMAT - 68)) | (1L << (KW_INPUTDRIVER - 68)) | (1L << (KW_OUTPUTDRIVER - 68)) | (1L << (KW_ENABLE - 68)) | (1L << (KW_DISABLE - 68)) | (1L << (KW_LOCATION - 68)) | (1L << (KW_BUCKET - 68)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (KW_ADD - 134)) | (1L << (KW_REPLACE - 134)) | (1L << (KW_TEMPORARY - 134)) | (1L << (KW_FILE - 134)) | (1L << (KW_JAR - 134)) | (1L << (KW_EXPLAIN - 134)) | (1L << (KW_FORMATTED - 134)) | (1L << (KW_DEPENDENCY - 134)) | (1L << (KW_LOGICAL - 134)) | (1L << (KW_SERDE - 134)) | (1L << (KW_DEFERRED - 134)) | (1L << (KW_SERDEPROPERTIES - 134)) | (1L << (KW_DBPROPERTIES - 134)) | (1L << (KW_LIMIT - 134)) | (1L << (KW_OFFSET - 134)) | (1L << (KW_UNSET - 134)) | (1L << (KW_TBLPROPERTIES - 134)) | (1L << (KW_IDXPROPERTIES - 134)) | (1L << (KW_VALUE_TYPE - 134)) | (1L << (KW_ELEM_TYPE - 134)) | (1L << (KW_DEFINED - 134)) | (1L << (KW_MAPJOIN - 134)) | (1L << (KW_STREAMTABLE - 134)) | (1L << (KW_CLUSTERSTATUS - 134)) | (1L << (KW_UTC - 134)) | (1L << (KW_UTCTIMESTAMP - 134)) | (1L << (KW_LONG - 134)) | (1L << (KW_PLUS - 134)) | (1L << (KW_VIEW - 134)) | (1L << (KW_VIEWS - 134)) | (1L << (KW_DATABASES - 134)) | (1L << (KW_MATERIALIZED - 134)) | (1L << (KW_SCHEMA - 134)) | (1L << (KW_SCHEMAS - 134)) | (1L << (KW_SSL - 134)) | (1L << (KW_UNDO - 134)) | (1L << (KW_LOCK - 134)) | (1L << (KW_LOCKS - 134)) | (1L << (KW_UNLOCK - 134)) | (1L << (KW_SHARED - 134)) | (1L << (KW_EXCLUSIVE - 134)) | (1L << (KW_UNSIGNED - 134)) | (1L << (KW_WHILE - 134)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (KW_READ - 198)) | (1L << (KW_PURGE - 198)) | (1L << (KW_ANALYZE - 198)) | (1L << (KW_BEFORE - 198)) | (1L << (KW_CONTINUE - 198)) | (1L << (KW_RECORDREADER - 198)) | (1L << (KW_RECORDWRITER - 198)) | (1L << (KW_SEMI - 198)) | (1L << (KW_TOUCH - 198)) | (1L << (KW_ARCHIVE - 198)) | (1L << (KW_UNARCHIVE - 198)) | (1L << (KW_COMPUTE - 198)) | (1L << (KW_STATISTICS - 198)) | (1L << (KW_USE - 198)) | (1L << (KW_OPTION - 198)) | (1L << (KW_CONCATENATE - 198)) | (1L << (KW_SHOW_DATABASE - 198)) | (1L << (KW_RESTRICT - 198)) | (1L << (KW_CASCADE - 198)) | (1L << (KW_SKEWED - 198)) | (1L << (KW_DIRECTORIES - 198)) | (1L << (KW_SETS - 198)) | (1L << (KW_NOSCAN - 198)) | (1L << (KW_ROLE - 198)) | (1L << (KW_ROLES - 198)) | (1L << (KW_URI - 198)) | (1L << (KW_SERVER - 198)) | (1L << (KW_ADMIN - 198)) | (1L << (KW_OWNER - 198)) | (1L << (KW_PRINCIPALS - 198)) | (1L << (KW_COMPACT - 198)) | (1L << (KW_COMPACTIONS - 198)) | (1L << (KW_TRANSACTIONS - 198)) | (1L << (KW_REWRITE - 198)) | (1L << (KW_REOPTIMIZATION - 198)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (KW_RELOAD - 264)) | (1L << (KW_YEAR - 264)) | (1L << (KW_QUERY - 264)) | (1L << (KW_QUARTER - 264)) | (1L << (KW_MONTH - 264)) | (1L << (KW_WEEK - 264)) | (1L << (KW_DAY - 264)) | (1L << (KW_DOW - 264)) | (1L << (KW_HOUR - 264)) | (1L << (KW_MINUTE - 264)) | (1L << (KW_SECOND - 264)) | (1L << (KW_TRANSACTION - 264)) | (1L << (KW_WORK - 264)) | (1L << (KW_WRITE - 264)) | (1L << (KW_ISOLATION - 264)) | (1L << (KW_LEVEL - 264)) | (1L << (KW_SNAPSHOT - 264)) | (1L << (KW_AUTOCOMMIT - 264)) | (1L << (KW_CACHE - 264)) | (1L << (KW_ENFORCED - 264)) | (1L << (KW_VALIDATE - 264)) | (1L << (KW_NOVALIDATE - 264)) | (1L << (KW_RELY - 264)) | (1L << (KW_NORELY - 264)) | (1L << (KW_KEY - 264)) | (1L << (KW_ABORT - 264)) | (1L << (KW_MATCHED - 264)) | (1L << (KW_REPL - 264)) | (1L << (KW_DUMP - 264)) | (1L << (KW_STATUS - 264)) | (1L << (KW_VECTORIZATION - 264)) | (1L << (KW_SUMMARY - 264)) | (1L << (KW_OPERATOR - 264)) | (1L << (KW_EXPRESSION - 264)) | (1L << (KW_DETAIL - 264)) | (1L << (KW_WAIT - 264)) | (1L << (KW_RESOURCE - 264)) | (1L << (KW_PLAN - 264)) | (1L << (KW_QUERY_PARALLELISM - 264)) | (1L << (KW_PLANS - 264)) | (1L << (KW_ACTIVATE - 264)) | (1L << (KW_DEFAULT - 264)) | (1L << (KW_CHECK - 264)) | (1L << (KW_POOL - 264)) | (1L << (KW_MOVE - 264)) | (1L << (KW_DO - 264)) | (1L << (KW_ALLOC_FRACTION - 264)) | (1L << (KW_SCHEDULING_POLICY - 264)) | (1L << (KW_PATH - 264)) | (1L << (KW_MAPPING - 264)) | (1L << (KW_WORKLOAD - 264)) | (1L << (KW_MANAGEMENT - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (KW_ACTIVE - 328)) | (1L << (KW_UNMANAGED - 328)) | (1L << (Identifier - 328)))) != 0)) {
				{
				State = 2017;
				columnNameTypeList();
				}
			}

			State = 2020;
			Match(RPAREN);
			State = 2021;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropMacroStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TEMPORARY() { return GetToken(HiveParser.KW_TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MACRO() { return GetToken(HiveParser.KW_MACRO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(HiveParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropMacroStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropMacroStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDropMacroStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDropMacroStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropMacroStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropMacroStatementContext dropMacroStatement() {
		DropMacroStatementContext _localctx = new DropMacroStatementContext(Context, State);
		EnterRule(_localctx, 266, RULE_dropMacroStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2023;
			Match(KW_DROP);
			State = 2024;
			Match(KW_TEMPORARY);
			State = 2025;
			Match(KW_MACRO);
			State = 2027;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 2026;
				ifExists();
				}
			}

			State = 2029;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CREATE() { return GetToken(HiveParser.KW_CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VIEW() { return GetToken(HiveParser.KW_VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementWithCTEContext selectStatementWithCTE() {
			return GetRuleContext<SelectStatementWithCTEContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrReplaceContext orReplace() {
			return GetRuleContext<OrReplaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameCommentListContext columnNameCommentList() {
			return GetRuleContext<ColumnNameCommentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableCommentContext tableComment() {
			return GetRuleContext<TableCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewPartitionContext viewPartition() {
			return GetRuleContext<ViewPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
			return GetRuleContext<TablePropertiesPrefixedContext>(0);
		}
		public CreateViewStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createViewStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCreateViewStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCreateViewStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateViewStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewStatementContext createViewStatement() {
		CreateViewStatementContext _localctx = new CreateViewStatementContext(Context, State);
		EnterRule(_localctx, 268, RULE_createViewStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2031;
			Match(KW_CREATE);
			State = 2033;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_OR) {
				{
				State = 2032;
				orReplace();
				}
			}

			State = 2035;
			Match(KW_VIEW);
			State = 2037;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 2036;
				ifNotExists();
				}
			}

			State = 2039;
			tableName();
			State = 2044;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 2040;
				Match(LPAREN);
				State = 2041;
				columnNameCommentList();
				State = 2042;
				Match(RPAREN);
				}
			}

			State = 2047;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COMMENT) {
				{
				State = 2046;
				tableComment();
				}
			}

			State = 2050;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARTITIONED) {
				{
				State = 2049;
				viewPartition();
				}
			}

			State = 2053;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_TBLPROPERTIES) {
				{
				State = 2052;
				tablePropertiesPrefixed();
				}
			}

			State = 2055;
			Match(KW_AS);
			State = 2056;
			selectStatementWithCTE();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateMaterializedViewStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CREATE() { return GetToken(HiveParser.KW_CREATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MATERIALIZED() { return GetToken(HiveParser.KW_MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VIEW() { return GetToken(HiveParser.KW_VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementWithCTEContext selectStatementWithCTE() {
			return GetRuleContext<SelectStatementWithCTEContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RewriteDisabledContext rewriteDisabled() {
			return GetRuleContext<RewriteDisabledContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableCommentContext tableComment() {
			return GetRuleContext<TableCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRowFormatContext tableRowFormat() {
			return GetRuleContext<TableRowFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFileFormatContext tableFileFormat() {
			return GetRuleContext<TableFileFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableLocationContext tableLocation() {
			return GetRuleContext<TableLocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
			return GetRuleContext<TablePropertiesPrefixedContext>(0);
		}
		public CreateMaterializedViewStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createMaterializedViewStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCreateMaterializedViewStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCreateMaterializedViewStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateMaterializedViewStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateMaterializedViewStatementContext createMaterializedViewStatement() {
		CreateMaterializedViewStatementContext _localctx = new CreateMaterializedViewStatementContext(Context, State);
		EnterRule(_localctx, 270, RULE_createMaterializedViewStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2058;
			Match(KW_CREATE);
			State = 2059;
			Match(KW_MATERIALIZED);
			State = 2060;
			Match(KW_VIEW);
			State = 2062;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 2061;
				ifNotExists();
				}
			}

			State = 2064;
			tableName();
			State = 2066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_DISABLE) {
				{
				State = 2065;
				rewriteDisabled();
				}
			}

			State = 2069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COMMENT) {
				{
				State = 2068;
				tableComment();
				}
			}

			State = 2072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ROW) {
				{
				State = 2071;
				tableRowFormat();
				}
			}

			State = 2075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_STORED) {
				{
				State = 2074;
				tableFileFormat();
				}
			}

			State = 2078;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_LOCATION) {
				{
				State = 2077;
				tableLocation();
				}
			}

			State = 2081;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_TBLPROPERTIES) {
				{
				State = 2080;
				tablePropertiesPrefixed();
				}
			}

			State = 2083;
			Match(KW_AS);
			State = 2084;
			selectStatementWithCTE();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewPartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARTITIONED() { return GetToken(HiveParser.KW_PARTITIONED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(HiveParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameListContext columnNameList() {
			return GetRuleContext<ColumnNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public ViewPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewPartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterViewPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitViewPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewPartitionContext viewPartition() {
		ViewPartitionContext _localctx = new ViewPartitionContext(Context, State);
		EnterRule(_localctx, 272, RULE_viewPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2086;
			Match(KW_PARTITIONED);
			State = 2087;
			Match(KW_ON);
			State = 2088;
			Match(LPAREN);
			State = 2089;
			columnNameList();
			State = 2090;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VIEW() { return GetToken(HiveParser.KW_VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewNameContext viewName() {
			return GetRuleContext<ViewNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropViewStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropViewStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDropViewStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDropViewStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropViewStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropViewStatementContext dropViewStatement() {
		DropViewStatementContext _localctx = new DropViewStatementContext(Context, State);
		EnterRule(_localctx, 274, RULE_dropViewStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2092;
			Match(KW_DROP);
			State = 2093;
			Match(KW_VIEW);
			State = 2095;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 2094;
				ifExists();
				}
			}

			State = 2097;
			viewName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropMaterializedViewStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DROP() { return GetToken(HiveParser.KW_DROP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MATERIALIZED() { return GetToken(HiveParser.KW_MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VIEW() { return GetToken(HiveParser.KW_VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewNameContext viewName() {
			return GetRuleContext<ViewNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropMaterializedViewStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropMaterializedViewStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDropMaterializedViewStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDropMaterializedViewStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropMaterializedViewStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropMaterializedViewStatementContext dropMaterializedViewStatement() {
		DropMaterializedViewStatementContext _localctx = new DropMaterializedViewStatementContext(Context, State);
		EnterRule(_localctx, 276, RULE_dropMaterializedViewStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2099;
			Match(KW_DROP);
			State = 2100;
			Match(KW_MATERIALIZED);
			State = 2101;
			Match(KW_VIEW);
			State = 2103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IF) {
				{
				State = 2102;
				ifExists();
				}
			}

			State = 2105;
			viewName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowFunctionIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionIdentifierContext functionIdentifier() {
			return GetRuleContext<FunctionIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public ShowFunctionIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showFunctionIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterShowFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitShowFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowFunctionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowFunctionIdentifierContext showFunctionIdentifier() {
		ShowFunctionIdentifierContext _localctx = new ShowFunctionIdentifierContext(Context, State);
		EnterRule(_localctx, 278, RULE_showFunctionIdentifier);
		try {
			State = 2109;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ASC:
			case KW_DESC:
			case KW_NULLS:
			case KW_LAST:
			case KW_OVERWRITE:
			case KW_PARTITIONS:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_AFTER:
			case KW_RENAME:
			case KW_COMMENT:
			case KW_TINYINT:
			case KW_DATETIME:
			case KW_ZONE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_UNIONTYPE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_BUCKETS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_LOCATION:
			case KW_BUCKET:
			case KW_ADD:
			case KW_REPLACE:
			case KW_TEMPORARY:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_STREAMTABLE:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_PLUS:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_PURGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_CONTINUE:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_DIRECTORIES:
			case KW_SETS:
			case KW_NOSCAN:
			case KW_ROLE:
			case KW_ROLES:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_QUERY:
			case KW_QUARTER:
			case KW_MONTH:
			case KW_WEEK:
			case KW_DAY:
			case KW_DOW:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_TRANSACTION:
			case KW_WORK:
			case KW_WRITE:
			case KW_ISOLATION:
			case KW_LEVEL:
			case KW_SNAPSHOT:
			case KW_AUTOCOMMIT:
			case KW_CACHE:
			case KW_ENFORCED:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_KEY:
			case KW_ABORT:
			case KW_MATCHED:
			case KW_REPL:
			case KW_DUMP:
			case KW_STATUS:
			case KW_VECTORIZATION:
			case KW_SUMMARY:
			case KW_OPERATOR:
			case KW_EXPRESSION:
			case KW_DETAIL:
			case KW_WAIT:
			case KW_RESOURCE:
			case KW_PLAN:
			case KW_QUERY_PARALLELISM:
			case KW_PLANS:
			case KW_ACTIVATE:
			case KW_DEFAULT:
			case KW_CHECK:
			case KW_POOL:
			case KW_MOVE:
			case KW_DO:
			case KW_ALLOC_FRACTION:
			case KW_SCHEDULING_POLICY:
			case KW_PATH:
			case KW_MAPPING:
			case KW_WORKLOAD:
			case KW_MANAGEMENT:
			case KW_ACTIVE:
			case KW_UNMANAGED:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2107;
				functionIdentifier();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2108;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStmtIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public ShowStmtIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStmtIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterShowStmtIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitShowStmtIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShowStmtIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowStmtIdentifierContext showStmtIdentifier() {
		ShowStmtIdentifierContext _localctx = new ShowStmtIdentifierContext(Context, State);
		EnterRule(_localctx, 280, RULE_showStmtIdentifier);
		try {
			State = 2113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ASC:
			case KW_DESC:
			case KW_NULLS:
			case KW_LAST:
			case KW_OVERWRITE:
			case KW_PARTITIONS:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_AFTER:
			case KW_RENAME:
			case KW_COMMENT:
			case KW_TINYINT:
			case KW_DATETIME:
			case KW_ZONE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_UNIONTYPE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_BUCKETS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_LOCATION:
			case KW_BUCKET:
			case KW_ADD:
			case KW_REPLACE:
			case KW_TEMPORARY:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_STREAMTABLE:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_PLUS:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_PURGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_CONTINUE:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_DIRECTORIES:
			case KW_SETS:
			case KW_NOSCAN:
			case KW_ROLE:
			case KW_ROLES:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_QUERY:
			case KW_QUARTER:
			case KW_MONTH:
			case KW_WEEK:
			case KW_DAY:
			case KW_DOW:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_TRANSACTION:
			case KW_WORK:
			case KW_WRITE:
			case KW_ISOLATION:
			case KW_LEVEL:
			case KW_SNAPSHOT:
			case KW_AUTOCOMMIT:
			case KW_CACHE:
			case KW_ENFORCED:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_KEY:
			case KW_ABORT:
			case KW_MATCHED:
			case KW_REPL:
			case KW_DUMP:
			case KW_STATUS:
			case KW_VECTORIZATION:
			case KW_SUMMARY:
			case KW_OPERATOR:
			case KW_EXPRESSION:
			case KW_DETAIL:
			case KW_WAIT:
			case KW_RESOURCE:
			case KW_PLAN:
			case KW_QUERY_PARALLELISM:
			case KW_PLANS:
			case KW_ACTIVATE:
			case KW_DEFAULT:
			case KW_CHECK:
			case KW_POOL:
			case KW_MOVE:
			case KW_DO:
			case KW_ALLOC_FRACTION:
			case KW_SCHEDULING_POLICY:
			case KW_PATH:
			case KW_MAPPING:
			case KW_WORKLOAD:
			case KW_MANAGEMENT:
			case KW_ACTIVE:
			case KW_UNMANAGED:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2111;
				identifier();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2112;
				Match(StringLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMMENT() { return GetToken(HiveParser.KW_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public TableCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableCommentContext tableComment() {
		TableCommentContext _localctx = new TableCommentContext(Context, State);
		EnterRule(_localctx, 282, RULE_tableComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2115;
			Match(KW_COMMENT);
			State = 2116;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARTITIONED() { return GetToken(HiveParser.KW_PARTITIONED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeConstraintContext[] columnNameTypeConstraint() {
			return GetRuleContexts<ColumnNameTypeConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeConstraintContext columnNameTypeConstraint(int i) {
			return GetRuleContext<ColumnNameTypeConstraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public TablePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTablePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTablePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablePartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablePartitionContext tablePartition() {
		TablePartitionContext _localctx = new TablePartitionContext(Context, State);
		EnterRule(_localctx, 284, RULE_tablePartition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2118;
			Match(KW_PARTITIONED);
			State = 2119;
			Match(KW_BY);
			State = 2120;
			Match(LPAREN);
			State = 2121;
			columnNameTypeConstraint();
			State = 2126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2122;
				Match(COMMA);
				State = 2123;
				columnNameTypeConstraint();
				}
				}
				State = 2128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2129;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableBucketsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CLUSTERED() { return GetToken(HiveParser.KW_CLUSTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_BY() { return GetTokens(HiveParser.KW_BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY(int i) {
			return GetToken(HiveParser.KW_BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(HiveParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(HiveParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameListContext columnNameList() {
			return GetRuleContext<ColumnNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(HiveParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(HiveParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INTO() { return GetToken(HiveParser.KW_INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(HiveParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BUCKETS() { return GetToken(HiveParser.KW_BUCKETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SORTED() { return GetToken(HiveParser.KW_SORTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameOrderListContext columnNameOrderList() {
			return GetRuleContext<ColumnNameOrderListContext>(0);
		}
		public TableBucketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableBuckets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableBuckets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableBuckets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableBuckets(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableBucketsContext tableBuckets() {
		TableBucketsContext _localctx = new TableBucketsContext(Context, State);
		EnterRule(_localctx, 286, RULE_tableBuckets);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2131;
			Match(KW_CLUSTERED);
			State = 2132;
			Match(KW_BY);
			State = 2133;
			Match(LPAREN);
			State = 2134;
			columnNameList();
			State = 2135;
			Match(RPAREN);
			State = 2142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_SORTED) {
				{
				State = 2136;
				Match(KW_SORTED);
				State = 2137;
				Match(KW_BY);
				State = 2138;
				Match(LPAREN);
				State = 2139;
				columnNameOrderList();
				State = 2140;
				Match(RPAREN);
				}
			}

			State = 2144;
			Match(KW_INTO);
			State = 2145;
			Match(Number);
			State = 2146;
			Match(KW_BUCKETS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSkewedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SKEWED() { return GetToken(HiveParser.KW_SKEWED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(HiveParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(HiveParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameListContext columnNameList() {
			return GetRuleContext<ColumnNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(HiveParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(HiveParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(HiveParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SkewedValueElementContext skewedValueElement() {
			return GetRuleContext<SkewedValueElementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoredAsDirsContext storedAsDirs() {
			return GetRuleContext<StoredAsDirsContext>(0);
		}
		public TableSkewedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSkewed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableSkewed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableSkewed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSkewed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSkewedContext tableSkewed() {
		TableSkewedContext _localctx = new TableSkewedContext(Context, State);
		EnterRule(_localctx, 288, RULE_tableSkewed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2148;
			Match(KW_SKEWED);
			State = 2149;
			Match(KW_BY);
			State = 2150;
			Match(LPAREN);
			State = 2151;
			columnNameList();
			State = 2152;
			Match(RPAREN);
			State = 2153;
			Match(KW_ON);
			State = 2154;
			Match(LPAREN);
			State = 2155;
			skewedValueElement();
			State = 2156;
			Match(RPAREN);
			State = 2158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				{
				State = 2157;
				storedAsDirs();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowFormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RowFormatSerdeContext rowFormatSerde() {
			return GetRuleContext<RowFormatSerdeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowFormatDelimitedContext rowFormatDelimited() {
			return GetRuleContext<RowFormatDelimitedContext>(0);
		}
		public RowFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowFormat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRowFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRowFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowFormatContext rowFormat() {
		RowFormatContext _localctx = new RowFormatContext(Context, State);
		EnterRule(_localctx, 290, RULE_rowFormat);
		try {
			State = 2162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2160;
				rowFormatSerde();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2161;
				rowFormatDelimited();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordReaderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RECORDREADER() { return GetToken(HiveParser.KW_RECORDREADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public RecordReaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordReader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRecordReader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRecordReader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordReader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordReaderContext recordReader() {
		RecordReaderContext _localctx = new RecordReaderContext(Context, State);
		EnterRule(_localctx, 292, RULE_recordReader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2164;
			Match(KW_RECORDREADER);
			State = 2165;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecordWriterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RECORDWRITER() { return GetToken(HiveParser.KW_RECORDWRITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public RecordWriterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recordWriter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRecordWriter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRecordWriter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecordWriter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecordWriterContext recordWriter() {
		RecordWriterContext _localctx = new RecordWriterContext(Context, State);
		EnterRule(_localctx, 294, RULE_recordWriter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2167;
			Match(KW_RECORDWRITER);
			State = 2168;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowFormatSerdeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROW() { return GetToken(HiveParser.KW_ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FORMAT() { return GetToken(HiveParser.KW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERDE() { return GetToken(HiveParser.KW_SERDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERDEPROPERTIES() { return GetToken(HiveParser.KW_SERDEPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		public RowFormatSerdeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowFormatSerde; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRowFormatSerde(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRowFormatSerde(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowFormatSerde(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowFormatSerdeContext rowFormatSerde() {
		RowFormatSerdeContext _localctx = new RowFormatSerdeContext(Context, State);
		EnterRule(_localctx, 296, RULE_rowFormatSerde);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2170;
			Match(KW_ROW);
			State = 2171;
			Match(KW_FORMAT);
			State = 2172;
			Match(KW_SERDE);
			State = 2173;
			Match(StringLiteral);
			State = 2177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WITH) {
				{
				State = 2174;
				Match(KW_WITH);
				State = 2175;
				Match(KW_SERDEPROPERTIES);
				State = 2176;
				tableProperties();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowFormatDelimitedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROW() { return GetToken(HiveParser.KW_ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FORMAT() { return GetToken(HiveParser.KW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DELIMITED() { return GetToken(HiveParser.KW_DELIMITED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRowFormatFieldIdentifierContext tableRowFormatFieldIdentifier() {
			return GetRuleContext<TableRowFormatFieldIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRowFormatCollItemsIdentifierContext tableRowFormatCollItemsIdentifier() {
			return GetRuleContext<TableRowFormatCollItemsIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRowFormatMapKeysIdentifierContext tableRowFormatMapKeysIdentifier() {
			return GetRuleContext<TableRowFormatMapKeysIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRowFormatLinesIdentifierContext tableRowFormatLinesIdentifier() {
			return GetRuleContext<TableRowFormatLinesIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRowNullFormatContext tableRowNullFormat() {
			return GetRuleContext<TableRowNullFormatContext>(0);
		}
		public RowFormatDelimitedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowFormatDelimited; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRowFormatDelimited(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRowFormatDelimited(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRowFormatDelimited(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowFormatDelimitedContext rowFormatDelimited() {
		RowFormatDelimitedContext _localctx = new RowFormatDelimitedContext(Context, State);
		EnterRule(_localctx, 298, RULE_rowFormatDelimited);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2179;
			Match(KW_ROW);
			State = 2180;
			Match(KW_FORMAT);
			State = 2181;
			Match(KW_DELIMITED);
			State = 2183;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_FIELDS) {
				{
				State = 2182;
				tableRowFormatFieldIdentifier();
				}
			}

			State = 2186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COLLECTION) {
				{
				State = 2185;
				tableRowFormatCollItemsIdentifier();
				}
			}

			State = 2189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
			case 1:
				{
				State = 2188;
				tableRowFormatMapKeysIdentifier();
				}
				break;
			}
			State = 2192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_LINES) {
				{
				State = 2191;
				tableRowFormatLinesIdentifier();
				}
			}

			State = 2195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_NULL) {
				{
				State = 2194;
				tableRowNullFormat();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRowFormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RowFormatDelimitedContext rowFormatDelimited() {
			return GetRuleContext<RowFormatDelimitedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowFormatSerdeContext rowFormatSerde() {
			return GetRuleContext<RowFormatSerdeContext>(0);
		}
		public TableRowFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowFormat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableRowFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableRowFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowFormatContext tableRowFormat() {
		TableRowFormatContext _localctx = new TableRowFormatContext(Context, State);
		EnterRule(_localctx, 300, RULE_tableRowFormat);
		try {
			State = 2199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2197;
				rowFormatDelimited();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2198;
				rowFormatSerde();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePropertiesPrefixedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TBLPROPERTIES() { return GetToken(HiveParser.KW_TBLPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		public TablePropertiesPrefixedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePropertiesPrefixed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTablePropertiesPrefixed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTablePropertiesPrefixed(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablePropertiesPrefixed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablePropertiesPrefixedContext tablePropertiesPrefixed() {
		TablePropertiesPrefixedContext _localctx = new TablePropertiesPrefixedContext(Context, State);
		EnterRule(_localctx, 302, RULE_tablePropertiesPrefixed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201;
			Match(KW_TBLPROPERTIES);
			State = 2202;
			tableProperties();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePropertiesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesListContext tablePropertiesList() {
			return GetRuleContext<TablePropertiesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public TablePropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableProperties; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableProperties(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablePropertiesContext tableProperties() {
		TablePropertiesContext _localctx = new TablePropertiesContext(Context, State);
		EnterRule(_localctx, 304, RULE_tableProperties);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2204;
			Match(LPAREN);
			State = 2205;
			tablePropertiesList();
			State = 2206;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePropertiesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext[] keyValueProperty() {
			return GetRuleContexts<KeyValuePropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyValuePropertyContext keyValueProperty(int i) {
			return GetRuleContext<KeyValuePropertyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyPropertyContext[] keyProperty() {
			return GetRuleContexts<KeyPropertyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyPropertyContext keyProperty(int i) {
			return GetRuleContext<KeyPropertyContext>(i);
		}
		public TablePropertiesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePropertiesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTablePropertiesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTablePropertiesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTablePropertiesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TablePropertiesListContext tablePropertiesList() {
		TablePropertiesListContext _localctx = new TablePropertiesListContext(Context, State);
		EnterRule(_localctx, 306, RULE_tablePropertiesList);
		int _la;
		try {
			State = 2224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2208;
				keyValueProperty();
				State = 2213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2209;
					Match(COMMA);
					State = 2210;
					keyValueProperty();
					}
					}
					State = 2215;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2216;
				keyProperty();
				State = 2221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2217;
					Match(COMMA);
					State = 2218;
					keyProperty();
					}
					}
					State = 2223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(HiveParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(HiveParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HiveParser.EQUAL, 0); }
		public KeyValuePropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValueProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterKeyValueProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitKeyValueProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValueProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePropertyContext keyValueProperty() {
		KeyValuePropertyContext _localctx = new KeyValuePropertyContext(Context, State);
		EnterRule(_localctx, 308, RULE_keyValueProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2226;
			Match(StringLiteral);
			State = 2227;
			Match(EQUAL);
			State = 2228;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public KeyPropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyProperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterKeyProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitKeyProperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyPropertyContext keyProperty() {
		KeyPropertyContext _localctx = new KeyPropertyContext(Context, State);
		EnterRule(_localctx, 310, RULE_keyProperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2230;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRowFormatFieldIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FIELDS() { return GetToken(HiveParser.KW_FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TERMINATED() { return GetToken(HiveParser.KW_TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_BY() { return GetTokens(HiveParser.KW_BY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY(int i) {
			return GetToken(HiveParser.KW_BY, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(HiveParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(HiveParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ESCAPED() { return GetToken(HiveParser.KW_ESCAPED, 0); }
		public TableRowFormatFieldIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowFormatFieldIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableRowFormatFieldIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableRowFormatFieldIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowFormatFieldIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowFormatFieldIdentifierContext tableRowFormatFieldIdentifier() {
		TableRowFormatFieldIdentifierContext _localctx = new TableRowFormatFieldIdentifierContext(Context, State);
		EnterRule(_localctx, 312, RULE_tableRowFormatFieldIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2232;
			Match(KW_FIELDS);
			State = 2233;
			Match(KW_TERMINATED);
			State = 2234;
			Match(KW_BY);
			State = 2235;
			Match(StringLiteral);
			State = 2239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ESCAPED) {
				{
				State = 2236;
				Match(KW_ESCAPED);
				State = 2237;
				Match(KW_BY);
				State = 2238;
				Match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRowFormatCollItemsIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COLLECTION() { return GetToken(HiveParser.KW_COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ITEMS() { return GetToken(HiveParser.KW_ITEMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TERMINATED() { return GetToken(HiveParser.KW_TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public TableRowFormatCollItemsIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowFormatCollItemsIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableRowFormatCollItemsIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableRowFormatCollItemsIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowFormatCollItemsIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowFormatCollItemsIdentifierContext tableRowFormatCollItemsIdentifier() {
		TableRowFormatCollItemsIdentifierContext _localctx = new TableRowFormatCollItemsIdentifierContext(Context, State);
		EnterRule(_localctx, 314, RULE_tableRowFormatCollItemsIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2241;
			Match(KW_COLLECTION);
			State = 2242;
			Match(KW_ITEMS);
			State = 2243;
			Match(KW_TERMINATED);
			State = 2244;
			Match(KW_BY);
			State = 2245;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRowFormatMapKeysIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAP() { return GetToken(HiveParser.KW_MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_KEYS() { return GetToken(HiveParser.KW_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TERMINATED() { return GetToken(HiveParser.KW_TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public TableRowFormatMapKeysIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowFormatMapKeysIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableRowFormatMapKeysIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableRowFormatMapKeysIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowFormatMapKeysIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowFormatMapKeysIdentifierContext tableRowFormatMapKeysIdentifier() {
		TableRowFormatMapKeysIdentifierContext _localctx = new TableRowFormatMapKeysIdentifierContext(Context, State);
		EnterRule(_localctx, 316, RULE_tableRowFormatMapKeysIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2247;
			Match(KW_MAP);
			State = 2248;
			Match(KW_KEYS);
			State = 2249;
			Match(KW_TERMINATED);
			State = 2250;
			Match(KW_BY);
			State = 2251;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRowFormatLinesIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LINES() { return GetToken(HiveParser.KW_LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TERMINATED() { return GetToken(HiveParser.KW_TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public TableRowFormatLinesIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowFormatLinesIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableRowFormatLinesIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableRowFormatLinesIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowFormatLinesIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowFormatLinesIdentifierContext tableRowFormatLinesIdentifier() {
		TableRowFormatLinesIdentifierContext _localctx = new TableRowFormatLinesIdentifierContext(Context, State);
		EnterRule(_localctx, 318, RULE_tableRowFormatLinesIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2253;
			Match(KW_LINES);
			State = 2254;
			Match(KW_TERMINATED);
			State = 2255;
			Match(KW_BY);
			State = 2256;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRowNullFormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULL() { return GetToken(HiveParser.KW_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFINED() { return GetToken(HiveParser.KW_DEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public TableRowNullFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRowNullFormat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableRowNullFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableRowNullFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableRowNullFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableRowNullFormatContext tableRowNullFormat() {
		TableRowNullFormatContext _localctx = new TableRowNullFormatContext(Context, State);
		EnterRule(_localctx, 320, RULE_tableRowNullFormat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2258;
			Match(KW_NULL);
			State = 2259;
			Match(KW_DEFINED);
			State = 2260;
			Match(KW_AS);
			State = 2261;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFileFormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STORED() { return GetToken(HiveParser.KW_STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INPUTFORMAT() { return GetToken(HiveParser.KW_INPUTFORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(HiveParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(HiveParser.StringLiteral, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUTPUTFORMAT() { return GetToken(HiveParser.KW_OUTPUTFORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INPUTDRIVER() { return GetToken(HiveParser.KW_INPUTDRIVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUTPUTDRIVER() { return GetToken(HiveParser.KW_OUTPUTDRIVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERDEPROPERTIES() { return GetToken(HiveParser.KW_SERDEPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TableFileFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFileFormat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableFileFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableFileFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableFileFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFileFormatContext tableFileFormat() {
		TableFileFormatContext _localctx = new TableFileFormatContext(Context, State);
		EnterRule(_localctx, 322, RULE_tableFileFormat);
		int _la;
		try {
			State = 2286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2263;
				Match(KW_STORED);
				State = 2264;
				Match(KW_AS);
				State = 2265;
				Match(KW_INPUTFORMAT);
				State = 2266;
				Match(StringLiteral);
				State = 2267;
				Match(KW_OUTPUTFORMAT);
				State = 2268;
				Match(StringLiteral);
				State = 2273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_INPUTDRIVER) {
					{
					State = 2269;
					Match(KW_INPUTDRIVER);
					State = 2270;
					Match(StringLiteral);
					State = 2271;
					Match(KW_OUTPUTDRIVER);
					State = 2272;
					Match(StringLiteral);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2275;
				Match(KW_STORED);
				State = 2276;
				Match(KW_BY);
				State = 2277;
				Match(StringLiteral);
				State = 2281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_WITH) {
					{
					State = 2278;
					Match(KW_WITH);
					State = 2279;
					Match(KW_SERDEPROPERTIES);
					State = 2280;
					tableProperties();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2283;
				Match(KW_STORED);
				State = 2284;
				Match(KW_AS);
				State = 2285;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableLocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCATION() { return GetToken(HiveParser.KW_LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public TableLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableLocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableLocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableLocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableLocationContext tableLocation() {
		TableLocationContext _localctx = new TableLocationContext(Context, State);
		EnterRule(_localctx, 324, RULE_tableLocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2288;
			Match(KW_LOCATION);
			State = 2289;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeContext[] columnNameType() {
			return GetRuleContexts<ColumnNameTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeContext columnNameType(int i) {
			return GetRuleContext<ColumnNameTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ColumnNameTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameTypeListContext columnNameTypeList() {
		ColumnNameTypeListContext _localctx = new ColumnNameTypeListContext(Context, State);
		EnterRule(_localctx, 326, RULE_columnNameTypeList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2291;
			columnNameType();
			State = 2296;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2292;
					Match(COMMA);
					State = 2293;
					columnNameType();
					}
					} 
				}
				State = 2298;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,221,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameTypeOrConstraintListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeOrConstraintContext[] columnNameTypeOrConstraint() {
			return GetRuleContexts<ColumnNameTypeOrConstraintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeOrConstraintContext columnNameTypeOrConstraint(int i) {
			return GetRuleContext<ColumnNameTypeOrConstraintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ColumnNameTypeOrConstraintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameTypeOrConstraintList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameTypeOrConstraintList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameTypeOrConstraintList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameTypeOrConstraintList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameTypeOrConstraintListContext columnNameTypeOrConstraintList() {
		ColumnNameTypeOrConstraintListContext _localctx = new ColumnNameTypeOrConstraintListContext(Context, State);
		EnterRule(_localctx, 328, RULE_columnNameTypeOrConstraintList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2299;
			columnNameTypeOrConstraint();
			State = 2304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2300;
				Match(COMMA);
				State = 2301;
				columnNameTypeOrConstraint();
				}
				}
				State = 2306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameColonTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameColonTypeContext[] columnNameColonType() {
			return GetRuleContexts<ColumnNameColonTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameColonTypeContext columnNameColonType(int i) {
			return GetRuleContext<ColumnNameColonTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ColumnNameColonTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameColonTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameColonTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameColonTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameColonTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameColonTypeListContext columnNameColonTypeList() {
		ColumnNameColonTypeListContext _localctx = new ColumnNameColonTypeListContext(Context, State);
		EnterRule(_localctx, 330, RULE_columnNameColonTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2307;
			columnNameColonType();
			State = 2312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2308;
				Match(COMMA);
				State = 2309;
				columnNameColonType();
				}
				}
				State = 2314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameContext[] columnName() {
			return GetRuleContexts<ColumnNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameContext columnName(int i) {
			return GetRuleContext<ColumnNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ColumnNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameListContext columnNameList() {
		ColumnNameListContext _localctx = new ColumnNameListContext(Context, State);
		EnterRule(_localctx, 332, RULE_columnNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2315;
			columnName();
			State = 2320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2316;
				Match(COMMA);
				State = 2317;
				columnName();
				}
				}
				State = 2322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(Context, State);
		EnterRule(_localctx, 334, RULE_columnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2323;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(HiveParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(HiveParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_ELEM_TYPE() { return GetTokens(HiveParser.KW_ELEM_TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELEM_TYPE(int i) {
			return GetToken(HiveParser.KW_ELEM_TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_KEY_TYPE() { return GetTokens(HiveParser.KW_KEY_TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_KEY_TYPE(int i) {
			return GetToken(HiveParser.KW_KEY_TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_VALUE_TYPE() { return GetTokens(HiveParser.KW_VALUE_TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALUE_TYPE(int i) {
			return GetToken(HiveParser.KW_VALUE_TYPE, i);
		}
		public ExtColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extColumnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExtColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExtColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtColumnName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtColumnNameContext extColumnName() {
		ExtColumnNameContext _localctx = new ExtColumnNameContext(Context, State);
		EnterRule(_localctx, 336, RULE_extColumnName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2325;
			identifier();
			State = 2335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 2326;
				Match(DOT);
				State = 2331;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
				case 1:
					{
					State = 2327;
					Match(KW_ELEM_TYPE);
					}
					break;
				case 2:
					{
					State = 2328;
					Match(KW_KEY_TYPE);
					}
					break;
				case 3:
					{
					State = 2329;
					Match(KW_VALUE_TYPE);
					}
					break;
				case 4:
					{
					State = 2330;
					identifier();
					}
					break;
				}
				}
				}
				State = 2337;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameOrderListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameOrderContext[] columnNameOrder() {
			return GetRuleContexts<ColumnNameOrderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameOrderContext columnNameOrder(int i) {
			return GetRuleContext<ColumnNameOrderContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ColumnNameOrderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameOrderList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameOrderList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameOrderList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameOrderList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameOrderListContext columnNameOrderList() {
		ColumnNameOrderListContext _localctx = new ColumnNameOrderListContext(Context, State);
		EnterRule(_localctx, 338, RULE_columnNameOrderList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2338;
			columnNameOrder();
			State = 2343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2339;
				Match(COMMA);
				State = 2340;
				columnNameOrder();
				}
				}
				State = 2345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnParenthesesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameListContext columnNameList() {
			return GetRuleContext<ColumnNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public ColumnParenthesesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnParenthesesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnParenthesesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnParenthesesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnParenthesesList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnParenthesesListContext columnParenthesesList() {
		ColumnParenthesesListContext _localctx = new ColumnParenthesesListContext(Context, State);
		EnterRule(_localctx, 340, RULE_columnParenthesesList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2346;
			Match(LPAREN);
			State = 2347;
			columnNameList();
			State = 2348;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableValidateSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnableSpecificationContext enableSpecification() {
			return GetRuleContext<EnableSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValidateSpecificationContext validateSpecification() {
			return GetRuleContext<ValidateSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnforcedSpecificationContext enforcedSpecification() {
			return GetRuleContext<EnforcedSpecificationContext>(0);
		}
		public EnableValidateSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableValidateSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterEnableValidateSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitEnableValidateSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableValidateSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableValidateSpecificationContext enableValidateSpecification() {
		EnableValidateSpecificationContext _localctx = new EnableValidateSpecificationContext(Context, State);
		EnterRule(_localctx, 342, RULE_enableValidateSpecification);
		int _la;
		try {
			State = 2355;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ENABLE:
			case KW_DISABLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2350;
				enableSpecification();
				State = 2352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_VALIDATE || _la==KW_NOVALIDATE) {
					{
					State = 2351;
					validateSpecification();
					}
				}

				}
				break;
			case KW_NOT:
			case KW_ENFORCED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2354;
				enforcedSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnableSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENABLE() { return GetToken(HiveParser.KW_ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISABLE() { return GetToken(HiveParser.KW_DISABLE, 0); }
		public EnableSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enableSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterEnableSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitEnableSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnableSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnableSpecificationContext enableSpecification() {
		EnableSpecificationContext _localctx = new EnableSpecificationContext(Context, State);
		EnterRule(_localctx, 344, RULE_enableSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2357;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_ENABLE || _la==KW_DISABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValidateSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALIDATE() { return GetToken(HiveParser.KW_VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOVALIDATE() { return GetToken(HiveParser.KW_NOVALIDATE, 0); }
		public ValidateSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_validateSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterValidateSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitValidateSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValidateSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValidateSpecificationContext validateSpecification() {
		ValidateSpecificationContext _localctx = new ValidateSpecificationContext(Context, State);
		EnterRule(_localctx, 346, RULE_validateSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2359;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_VALIDATE || _la==KW_NOVALIDATE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnforcedSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENFORCED() { return GetToken(HiveParser.KW_ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(HiveParser.KW_NOT, 0); }
		public EnforcedSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enforcedSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterEnforcedSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitEnforcedSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnforcedSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnforcedSpecificationContext enforcedSpecification() {
		EnforcedSpecificationContext _localctx = new EnforcedSpecificationContext(Context, State);
		EnterRule(_localctx, 348, RULE_enforcedSpecification);
		try {
			State = 2364;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ENFORCED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2361;
				Match(KW_ENFORCED);
				}
				break;
			case KW_NOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2362;
				Match(KW_NOT);
				State = 2363;
				Match(KW_ENFORCED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RELY() { return GetToken(HiveParser.KW_RELY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NORELY() { return GetToken(HiveParser.KW_NORELY, 0); }
		public RelySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRelySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRelySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelySpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelySpecificationContext relySpecification() {
		RelySpecificationContext _localctx = new RelySpecificationContext(Context, State);
		EnterRule(_localctx, 350, RULE_relySpecification);
		int _la;
		try {
			State = 2370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_RELY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2366;
				Match(KW_RELY);
				}
				break;
			case KW_FIRST:
			case KW_AFTER:
			case KW_COMMENT:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_NORELY:
			case COMMA:
			case SEMICOLON:
			case RPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2368;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_NORELY) {
					{
					State = 2367;
					Match(KW_NORELY);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PkConstraintContext pkConstraint() {
			return GetRuleContext<PkConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTRAINT() { return GetToken(HiveParser.KW_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintOptsCreateContext constraintOptsCreate() {
			return GetRuleContext<ConstraintOptsCreateContext>(0);
		}
		public CreateConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCreateConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCreateConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateConstraintContext createConstraint() {
		CreateConstraintContext _localctx = new CreateConstraintContext(Context, State);
		EnterRule(_localctx, 352, RULE_createConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				State = 2372;
				Match(KW_CONSTRAINT);
				State = 2373;
				identifier();
				}
			}

			State = 2376;
			pkConstraint();
			State = 2378;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_NOT || _la==KW_ENABLE || _la==KW_DISABLE || _la==KW_ENFORCED) {
				{
				State = 2377;
				constraintOptsCreate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterConstraintWithNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTRAINT() { return GetToken(HiveParser.KW_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PkConstraintContext pkConstraint() {
			return GetRuleContext<PkConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintOptsAlterContext constraintOptsAlter() {
			return GetRuleContext<ConstraintOptsAlterContext>(0);
		}
		public AlterConstraintWithNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterConstraintWithName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterConstraintWithName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterConstraintWithName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterConstraintWithName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterConstraintWithNameContext alterConstraintWithName() {
		AlterConstraintWithNameContext _localctx = new AlterConstraintWithNameContext(Context, State);
		EnterRule(_localctx, 354, RULE_alterConstraintWithName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2380;
			Match(KW_CONSTRAINT);
			State = 2381;
			identifier();
			State = 2382;
			pkConstraint();
			State = 2384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_NOT || _la==KW_ENABLE || _la==KW_DISABLE || _la==KW_ENFORCED) {
				{
				State = 2383;
				constraintOptsAlter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PkConstraintContext : ParserRuleContext {
		public ColumnParenthesesListContext pkCols;
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintPrimaryKeyContext tableConstraintPrimaryKey() {
			return GetRuleContext<TableConstraintPrimaryKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnParenthesesListContext columnParenthesesList() {
			return GetRuleContext<ColumnParenthesesListContext>(0);
		}
		public PkConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pkConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPkConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPkConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPkConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PkConstraintContext pkConstraint() {
		PkConstraintContext _localctx = new PkConstraintContext(Context, State);
		EnterRule(_localctx, 356, RULE_pkConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2386;
			tableConstraintPrimaryKey();
			State = 2387;
			_localctx.pkCols = columnParenthesesList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateForeignKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOREIGN() { return GetToken(HiveParser.KW_FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_KEY() { return GetToken(HiveParser.KW_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnParenthesesListContext[] columnParenthesesList() {
			return GetRuleContexts<ColumnParenthesesListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnParenthesesListContext columnParenthesesList(int i) {
			return GetRuleContext<ColumnParenthesesListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REFERENCES() { return GetToken(HiveParser.KW_REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTRAINT() { return GetToken(HiveParser.KW_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintOptsCreateContext constraintOptsCreate() {
			return GetRuleContext<ConstraintOptsCreateContext>(0);
		}
		public CreateForeignKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createForeignKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCreateForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCreateForeignKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreateForeignKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateForeignKeyContext createForeignKey() {
		CreateForeignKeyContext _localctx = new CreateForeignKeyContext(Context, State);
		EnterRule(_localctx, 358, RULE_createForeignKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2391;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				State = 2389;
				Match(KW_CONSTRAINT);
				State = 2390;
				identifier();
				}
			}

			State = 2393;
			Match(KW_FOREIGN);
			State = 2394;
			Match(KW_KEY);
			State = 2395;
			columnParenthesesList();
			State = 2396;
			Match(KW_REFERENCES);
			State = 2397;
			tableName();
			State = 2398;
			columnParenthesesList();
			State = 2400;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_NOT || _la==KW_ENABLE || _la==KW_DISABLE || _la==KW_ENFORCED) {
				{
				State = 2399;
				constraintOptsCreate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterForeignKeyWithNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTRAINT() { return GetToken(HiveParser.KW_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOREIGN() { return GetToken(HiveParser.KW_FOREIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_KEY() { return GetToken(HiveParser.KW_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnParenthesesListContext[] columnParenthesesList() {
			return GetRuleContexts<ColumnParenthesesListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnParenthesesListContext columnParenthesesList(int i) {
			return GetRuleContext<ColumnParenthesesListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REFERENCES() { return GetToken(HiveParser.KW_REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintOptsAlterContext constraintOptsAlter() {
			return GetRuleContext<ConstraintOptsAlterContext>(0);
		}
		public AlterForeignKeyWithNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterForeignKeyWithName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterForeignKeyWithName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterForeignKeyWithName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterForeignKeyWithName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterForeignKeyWithNameContext alterForeignKeyWithName() {
		AlterForeignKeyWithNameContext _localctx = new AlterForeignKeyWithNameContext(Context, State);
		EnterRule(_localctx, 360, RULE_alterForeignKeyWithName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2402;
			Match(KW_CONSTRAINT);
			State = 2403;
			identifier();
			State = 2404;
			Match(KW_FOREIGN);
			State = 2405;
			Match(KW_KEY);
			State = 2406;
			columnParenthesesList();
			State = 2407;
			Match(KW_REFERENCES);
			State = 2408;
			tableName();
			State = 2409;
			columnParenthesesList();
			State = 2411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_NOT || _la==KW_ENABLE || _la==KW_DISABLE || _la==KW_ENFORCED) {
				{
				State = 2410;
				constraintOptsAlter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkewedValueElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SkewedColumnValuesContext skewedColumnValues() {
			return GetRuleContext<SkewedColumnValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkewedColumnValuePairListContext skewedColumnValuePairList() {
			return GetRuleContext<SkewedColumnValuePairListContext>(0);
		}
		public SkewedValueElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skewedValueElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSkewedValueElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSkewedValueElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkewedValueElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkewedValueElementContext skewedValueElement() {
		SkewedValueElementContext _localctx = new SkewedValueElementContext(Context, State);
		EnterRule(_localctx, 362, RULE_skewedValueElement);
		try {
			State = 2415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_NULL:
			case KW_DATE:
			case KW_TIMESTAMP:
			case KW_TIMESTAMPLOCALTZ:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case StringLiteral:
			case IntegralLiteral:
			case NumberLiteral:
			case Number:
			case CharSetName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2413;
				skewedColumnValues();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2414;
				skewedColumnValuePairList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkewedColumnValuePairListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SkewedColumnValuePairContext[] skewedColumnValuePair() {
			return GetRuleContexts<SkewedColumnValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkewedColumnValuePairContext skewedColumnValuePair(int i) {
			return GetRuleContext<SkewedColumnValuePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public SkewedColumnValuePairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skewedColumnValuePairList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSkewedColumnValuePairList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSkewedColumnValuePairList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkewedColumnValuePairList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkewedColumnValuePairListContext skewedColumnValuePairList() {
		SkewedColumnValuePairListContext _localctx = new SkewedColumnValuePairListContext(Context, State);
		EnterRule(_localctx, 364, RULE_skewedColumnValuePairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2417;
			skewedColumnValuePair();
			State = 2422;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2418;
				Match(COMMA);
				State = 2419;
				skewedColumnValuePair();
				}
				}
				State = 2424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkewedColumnValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SkewedColumnValuesContext skewedColumnValues() {
			return GetRuleContext<SkewedColumnValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public SkewedColumnValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skewedColumnValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSkewedColumnValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSkewedColumnValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkewedColumnValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkewedColumnValuePairContext skewedColumnValuePair() {
		SkewedColumnValuePairContext _localctx = new SkewedColumnValuePairContext(Context, State);
		EnterRule(_localctx, 366, RULE_skewedColumnValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425;
			Match(LPAREN);
			State = 2426;
			skewedColumnValues();
			State = 2427;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkewedColumnValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SkewedColumnValueContext[] skewedColumnValue() {
			return GetRuleContexts<SkewedColumnValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkewedColumnValueContext skewedColumnValue(int i) {
			return GetRuleContext<SkewedColumnValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public SkewedColumnValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skewedColumnValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSkewedColumnValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSkewedColumnValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkewedColumnValues(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkewedColumnValuesContext skewedColumnValues() {
		SkewedColumnValuesContext _localctx = new SkewedColumnValuesContext(Context, State);
		EnterRule(_localctx, 368, RULE_skewedColumnValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2429;
			skewedColumnValue();
			State = 2434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2430;
				Match(COMMA);
				State = 2431;
				skewedColumnValue();
				}
				}
				State = 2436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkewedColumnValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public SkewedColumnValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skewedColumnValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSkewedColumnValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSkewedColumnValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkewedColumnValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkewedColumnValueContext skewedColumnValue() {
		SkewedColumnValueContext _localctx = new SkewedColumnValueContext(Context, State);
		EnterRule(_localctx, 370, RULE_skewedColumnValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2437;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkewedValueLocationElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SkewedColumnValueContext skewedColumnValue() {
			return GetRuleContext<SkewedColumnValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkewedColumnValuePairContext skewedColumnValuePair() {
			return GetRuleContext<SkewedColumnValuePairContext>(0);
		}
		public SkewedValueLocationElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skewedValueLocationElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSkewedValueLocationElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSkewedValueLocationElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkewedValueLocationElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkewedValueLocationElementContext skewedValueLocationElement() {
		SkewedValueLocationElementContext _localctx = new SkewedValueLocationElementContext(Context, State);
		EnterRule(_localctx, 372, RULE_skewedValueLocationElement);
		try {
			State = 2441;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TRUE:
			case KW_FALSE:
			case KW_NULL:
			case KW_DATE:
			case KW_TIMESTAMP:
			case KW_TIMESTAMPLOCALTZ:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case StringLiteral:
			case IntegralLiteral:
			case NumberLiteral:
			case Number:
			case CharSetName:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2439;
				skewedColumnValue();
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2440;
				skewedColumnValuePair();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderSpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ASC() { return GetToken(HiveParser.KW_ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DESC() { return GetToken(HiveParser.KW_DESC, 0); }
		public OrderSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderSpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterOrderSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitOrderSpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderSpecificationContext orderSpecification() {
		OrderSpecificationContext _localctx = new OrderSpecificationContext(Context, State);
		EnterRule(_localctx, 374, RULE_orderSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2443;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_ASC || _la==KW_DESC) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullOrderingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULLS() { return GetToken(HiveParser.KW_NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FIRST() { return GetToken(HiveParser.KW_FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LAST() { return GetToken(HiveParser.KW_LAST, 0); }
		public NullOrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullOrdering; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterNullOrdering(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitNullOrdering(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullOrdering(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullOrderingContext nullOrdering() {
		NullOrderingContext _localctx = new NullOrderingContext(Context, State);
		EnterRule(_localctx, 376, RULE_nullOrdering);
		try {
			State = 2449;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2445;
				Match(KW_NULLS);
				State = 2446;
				Match(KW_FIRST);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2447;
				Match(KW_NULLS);
				State = 2448;
				Match(KW_LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameOrderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderSpecificationContext orderSpecification() {
			return GetRuleContext<OrderSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullOrderingContext nullOrdering() {
			return GetRuleContext<NullOrderingContext>(0);
		}
		public ColumnNameOrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameOrder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameOrderContext columnNameOrder() {
		ColumnNameOrderContext _localctx = new ColumnNameOrderContext(Context, State);
		EnterRule(_localctx, 378, RULE_columnNameOrder);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2451;
			identifier();
			State = 2453;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ASC || _la==KW_DESC) {
				{
				State = 2452;
				orderSpecification();
				}
			}

			State = 2456;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_NULLS) {
				{
				State = 2455;
				nullOrdering();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameCommentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameCommentContext[] columnNameComment() {
			return GetRuleContexts<ColumnNameCommentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameCommentContext columnNameComment(int i) {
			return GetRuleContext<ColumnNameCommentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ColumnNameCommentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameCommentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameCommentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameCommentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameCommentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameCommentListContext columnNameCommentList() {
		ColumnNameCommentListContext _localctx = new ColumnNameCommentListContext(Context, State);
		EnterRule(_localctx, 380, RULE_columnNameCommentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2458;
			columnNameComment();
			State = 2463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2459;
				Match(COMMA);
				State = 2460;
				columnNameComment();
				}
				}
				State = 2465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMMENT() { return GetToken(HiveParser.KW_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public ColumnNameCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameCommentContext columnNameComment() {
		ColumnNameCommentContext _localctx = new ColumnNameCommentContext(Context, State);
		EnterRule(_localctx, 382, RULE_columnNameComment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2466;
			identifier();
			State = 2469;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COMMENT) {
				{
				State = 2467;
				Match(KW_COMMENT);
				State = 2468;
				Match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnRefOrderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderSpecificationContext orderSpecification() {
			return GetRuleContext<OrderSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullOrderingContext nullOrdering() {
			return GetRuleContext<NullOrderingContext>(0);
		}
		public ColumnRefOrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnRefOrder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnRefOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnRefOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnRefOrder(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnRefOrderContext columnRefOrder() {
		ColumnRefOrderContext _localctx = new ColumnRefOrderContext(Context, State);
		EnterRule(_localctx, 384, RULE_columnRefOrder);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2471;
			expression(0);
			State = 2473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ASC || _la==KW_DESC) {
				{
				State = 2472;
				orderSpecification();
				}
			}

			State = 2476;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_NULLS) {
				{
				State = 2475;
				nullOrdering();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColTypeContext colType() {
			return GetRuleContext<ColTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMMENT() { return GetToken(HiveParser.KW_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public ColumnNameTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameTypeContext columnNameType() {
		ColumnNameTypeContext _localctx = new ColumnNameTypeContext(Context, State);
		EnterRule(_localctx, 386, RULE_columnNameType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2478;
			identifier();
			State = 2479;
			colType();
			State = 2482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COMMENT) {
				{
				State = 2480;
				Match(KW_COMMENT);
				State = 2481;
				Match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameTypeOrConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintContext tableConstraint() {
			return GetRuleContext<TableConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeConstraintContext columnNameTypeConstraint() {
			return GetRuleContext<ColumnNameTypeConstraintContext>(0);
		}
		public ColumnNameTypeOrConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameTypeOrConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameTypeOrConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameTypeOrConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameTypeOrConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameTypeOrConstraintContext columnNameTypeOrConstraint() {
		ColumnNameTypeOrConstraintContext _localctx = new ColumnNameTypeOrConstraintContext(Context, State);
		EnterRule(_localctx, 388, RULE_columnNameTypeOrConstraint);
		try {
			State = 2486;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_PRIMARY:
			case KW_FOREIGN:
			case KW_CONSTRAINT:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2484;
				tableConstraint();
				}
				}
				break;
			case KW_ASC:
			case KW_DESC:
			case KW_NULLS:
			case KW_LAST:
			case KW_OVERWRITE:
			case KW_PARTITIONS:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_AFTER:
			case KW_RENAME:
			case KW_COMMENT:
			case KW_TINYINT:
			case KW_DATETIME:
			case KW_ZONE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_UNIONTYPE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_BUCKETS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_LOCATION:
			case KW_BUCKET:
			case KW_ADD:
			case KW_REPLACE:
			case KW_TEMPORARY:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_STREAMTABLE:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_PLUS:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_PURGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_CONTINUE:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_DIRECTORIES:
			case KW_SETS:
			case KW_NOSCAN:
			case KW_ROLE:
			case KW_ROLES:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_QUERY:
			case KW_QUARTER:
			case KW_MONTH:
			case KW_WEEK:
			case KW_DAY:
			case KW_DOW:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_TRANSACTION:
			case KW_WORK:
			case KW_WRITE:
			case KW_ISOLATION:
			case KW_LEVEL:
			case KW_SNAPSHOT:
			case KW_AUTOCOMMIT:
			case KW_CACHE:
			case KW_ENFORCED:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_KEY:
			case KW_ABORT:
			case KW_MATCHED:
			case KW_REPL:
			case KW_DUMP:
			case KW_STATUS:
			case KW_VECTORIZATION:
			case KW_SUMMARY:
			case KW_OPERATOR:
			case KW_EXPRESSION:
			case KW_DETAIL:
			case KW_WAIT:
			case KW_RESOURCE:
			case KW_PLAN:
			case KW_QUERY_PARALLELISM:
			case KW_PLANS:
			case KW_ACTIVATE:
			case KW_DEFAULT:
			case KW_CHECK:
			case KW_POOL:
			case KW_MOVE:
			case KW_DO:
			case KW_ALLOC_FRACTION:
			case KW_SCHEDULING_POLICY:
			case KW_PATH:
			case KW_MAPPING:
			case KW_WORKLOAD:
			case KW_MANAGEMENT:
			case KW_ACTIVE:
			case KW_UNMANAGED:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 2485;
				columnNameTypeConstraint();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateForeignKeyContext createForeignKey() {
			return GetRuleContext<CreateForeignKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateConstraintContext createConstraint() {
			return GetRuleContext<CreateConstraintContext>(0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintContext tableConstraint() {
		TableConstraintContext _localctx = new TableConstraintContext(Context, State);
		EnterRule(_localctx, 390, RULE_tableConstraint);
		try {
			State = 2490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2488;
				createForeignKey();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 2489;
				createConstraint();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameTypeConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColTypeContext colType() {
			return GetRuleContext<ColTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnConstraintContext columnConstraint() {
			return GetRuleContext<ColumnConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMMENT() { return GetToken(HiveParser.KW_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public ColumnNameTypeConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameTypeConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameTypeConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameTypeConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameTypeConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameTypeConstraintContext columnNameTypeConstraint() {
		ColumnNameTypeConstraintContext _localctx = new ColumnNameTypeConstraintContext(Context, State);
		EnterRule(_localctx, 392, RULE_columnNameTypeConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2492;
			identifier();
			State = 2493;
			colType();
			State = 2495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & ((1L << (KW_PRIMARY - 287)) | (1L << (KW_REFERENCES - 287)) | (1L << (KW_CONSTRAINT - 287)))) != 0)) {
				{
				State = 2494;
				columnConstraint();
				}
			}

			State = 2499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COMMENT) {
				{
				State = 2497;
				Match(KW_COMMENT);
				State = 2498;
				Match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForeignKeyConstraintContext foreignKeyConstraint() {
			return GetRuleContext<ForeignKeyConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColConstraintContext colConstraint() {
			return GetRuleContext<ColConstraintContext>(0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnConstraintContext columnConstraint() {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(Context, State);
		EnterRule(_localctx, 394, RULE_columnConstraint);
		try {
			State = 2503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2501;
				foreignKeyConstraint();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 2502;
				colConstraint();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeignKeyConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REFERENCES() { return GetToken(HiveParser.KW_REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTRAINT() { return GetToken(HiveParser.KW_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintOptsCreateContext constraintOptsCreate() {
			return GetRuleContext<ConstraintOptsCreateContext>(0);
		}
		public ForeignKeyConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreignKeyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterForeignKeyConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitForeignKeyConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeignKeyConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeignKeyConstraintContext foreignKeyConstraint() {
		ForeignKeyConstraintContext _localctx = new ForeignKeyConstraintContext(Context, State);
		EnterRule(_localctx, 396, RULE_foreignKeyConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2507;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				State = 2505;
				Match(KW_CONSTRAINT);
				State = 2506;
				identifier();
				}
			}

			State = 2509;
			Match(KW_REFERENCES);
			State = 2510;
			tableName();
			State = 2511;
			Match(LPAREN);
			State = 2512;
			columnName();
			State = 2513;
			Match(RPAREN);
			State = 2515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_NOT || _la==KW_ENABLE || _la==KW_DISABLE || _la==KW_ENFORCED) {
				{
				State = 2514;
				constraintOptsCreate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintPrimaryKeyContext tableConstraintPrimaryKey() {
			return GetRuleContext<TableConstraintPrimaryKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTRAINT() { return GetToken(HiveParser.KW_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintOptsCreateContext constraintOptsCreate() {
			return GetRuleContext<ConstraintOptsCreateContext>(0);
		}
		public ColConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColConstraintContext colConstraint() {
		ColConstraintContext _localctx = new ColConstraintContext(Context, State);
		EnterRule(_localctx, 398, RULE_colConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2519;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				State = 2517;
				Match(KW_CONSTRAINT);
				State = 2518;
				identifier();
				}
			}

			State = 2521;
			tableConstraintPrimaryKey();
			State = 2523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_NOT || _la==KW_ENABLE || _la==KW_DISABLE || _la==KW_ENFORCED) {
				{
				State = 2522;
				constraintOptsCreate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterColumnConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterForeignKeyConstraintContext alterForeignKeyConstraint() {
			return GetRuleContext<AlterForeignKeyConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterColConstraintContext alterColConstraint() {
			return GetRuleContext<AlterColConstraintContext>(0);
		}
		public AlterColumnConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterColumnConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterColumnConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterColumnConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterColumnConstraintContext alterColumnConstraint() {
		AlterColumnConstraintContext _localctx = new AlterColumnConstraintContext(Context, State);
		EnterRule(_localctx, 400, RULE_alterColumnConstraint);
		try {
			State = 2527;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,260,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 2525;
				alterForeignKeyConstraint();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 2526;
				alterColConstraint();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterForeignKeyConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REFERENCES() { return GetToken(HiveParser.KW_REFERENCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTRAINT() { return GetToken(HiveParser.KW_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintOptsAlterContext constraintOptsAlter() {
			return GetRuleContext<ConstraintOptsAlterContext>(0);
		}
		public AlterForeignKeyConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterForeignKeyConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterForeignKeyConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterForeignKeyConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterForeignKeyConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterForeignKeyConstraintContext alterForeignKeyConstraint() {
		AlterForeignKeyConstraintContext _localctx = new AlterForeignKeyConstraintContext(Context, State);
		EnterRule(_localctx, 402, RULE_alterForeignKeyConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				State = 2529;
				Match(KW_CONSTRAINT);
				State = 2530;
				identifier();
				}
			}

			State = 2533;
			Match(KW_REFERENCES);
			State = 2534;
			tableName();
			State = 2535;
			Match(LPAREN);
			State = 2536;
			columnName();
			State = 2537;
			Match(RPAREN);
			State = 2539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_NOT || _la==KW_ENABLE || _la==KW_DISABLE || _la==KW_ENFORCED) {
				{
				State = 2538;
				constraintOptsAlter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterColConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintPrimaryKeyContext tableConstraintPrimaryKey() {
			return GetRuleContext<TableConstraintPrimaryKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONSTRAINT() { return GetToken(HiveParser.KW_CONSTRAINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintOptsAlterContext constraintOptsAlter() {
			return GetRuleContext<ConstraintOptsAlterContext>(0);
		}
		public AlterColConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterColConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAlterColConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAlterColConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlterColConstraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlterColConstraintContext alterColConstraint() {
		AlterColConstraintContext _localctx = new AlterColConstraintContext(Context, State);
		EnterRule(_localctx, 404, RULE_alterColConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CONSTRAINT) {
				{
				State = 2541;
				Match(KW_CONSTRAINT);
				State = 2542;
				identifier();
				}
			}

			State = 2545;
			tableConstraintPrimaryKey();
			State = 2547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_NOT || _la==KW_ENABLE || _la==KW_DISABLE || _la==KW_ENFORCED) {
				{
				State = 2546;
				constraintOptsAlter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintPrimaryKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRIMARY() { return GetToken(HiveParser.KW_PRIMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_KEY() { return GetToken(HiveParser.KW_KEY, 0); }
		public TableConstraintPrimaryKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraintPrimaryKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableConstraintPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableConstraintPrimaryKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableConstraintPrimaryKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintPrimaryKeyContext tableConstraintPrimaryKey() {
		TableConstraintPrimaryKeyContext _localctx = new TableConstraintPrimaryKeyContext(Context, State);
		EnterRule(_localctx, 406, RULE_tableConstraintPrimaryKey);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2549;
			Match(KW_PRIMARY);
			State = 2550;
			Match(KW_KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintOptsCreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnableValidateSpecificationContext enableValidateSpecification() {
			return GetRuleContext<EnableValidateSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelySpecificationContext relySpecification() {
			return GetRuleContext<RelySpecificationContext>(0);
		}
		public ConstraintOptsCreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintOptsCreate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterConstraintOptsCreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitConstraintOptsCreate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintOptsCreate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintOptsCreateContext constraintOptsCreate() {
		ConstraintOptsCreateContext _localctx = new ConstraintOptsCreateContext(Context, State);
		EnterRule(_localctx, 408, RULE_constraintOptsCreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2552;
			enableValidateSpecification();
			State = 2553;
			relySpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintOptsAlterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnableValidateSpecificationContext enableValidateSpecification() {
			return GetRuleContext<EnableValidateSpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelySpecificationContext relySpecification() {
			return GetRuleContext<RelySpecificationContext>(0);
		}
		public ConstraintOptsAlterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintOptsAlter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterConstraintOptsAlter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitConstraintOptsAlter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintOptsAlter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintOptsAlterContext constraintOptsAlter() {
		ConstraintOptsAlterContext _localctx = new ConstraintOptsAlterContext(Context, State);
		EnterRule(_localctx, 410, RULE_constraintOptsAlter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2555;
			enableValidateSpecification();
			State = 2556;
			relySpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameColonTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(HiveParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColTypeContext colType() {
			return GetRuleContext<ColTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMMENT() { return GetToken(HiveParser.KW_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public ColumnNameColonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnNameColonType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnNameColonType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnNameColonType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnNameColonType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameColonTypeContext columnNameColonType() {
		ColumnNameColonTypeContext _localctx = new ColumnNameColonTypeContext(Context, State);
		EnterRule(_localctx, 412, RULE_columnNameColonType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2558;
			identifier();
			State = 2559;
			Match(COLON);
			State = 2560;
			colType();
			State = 2563;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_COMMENT) {
				{
				State = 2561;
				Match(KW_COMMENT);
				State = 2562;
				Match(StringLiteral);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_db_colContext type_db_col() {
			return GetRuleContext<Type_db_colContext>(0);
		}
		public ColTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColTypeContext colType() {
		ColTypeContext _localctx = new ColTypeContext(Context, State);
		EnterRule(_localctx, 414, RULE_colType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2565;
			type_db_col();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColTypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColTypeContext[] colType() {
			return GetRuleContexts<ColTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColTypeContext colType(int i) {
			return GetRuleContext<ColTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ColTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_colTypeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColTypeListContext colTypeList() {
		ColTypeListContext _localctx = new ColTypeListContext(Context, State);
		EnterRule(_localctx, 416, RULE_colTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2567;
			colType();
			State = 2572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2568;
				Match(COMMA);
				State = 2569;
				colType();
				}
				}
				State = 2574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_db_colContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructTypeContext structType() {
			return GetRuleContext<StructTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionTypeContext unionType() {
			return GetRuleContext<UnionTypeContext>(0);
		}
		public Type_db_colContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_db_col; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterType_db_col(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitType_db_col(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_db_col(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_db_colContext type_db_col() {
		Type_db_colContext _localctx = new Type_db_colContext(Context, State);
		EnterRule(_localctx, 418, RULE_type_db_col);
		try {
			State = 2580;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_BOOLEAN:
			case KW_TINYINT:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_DATETIME:
			case KW_TIMESTAMP:
			case KW_TIMESTAMPLOCALTZ:
			case KW_DECIMAL:
			case KW_STRING:
			case KW_CHAR:
			case KW_VARCHAR:
			case KW_BINARY:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2575;
				primitiveType();
				}
				break;
			case KW_ARRAY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2576;
				listType();
				}
				break;
			case KW_STRUCT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2577;
				structType();
				}
				break;
			case KW_MAP:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2578;
				mapType();
				}
				break;
			case KW_UNIONTYPE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2579;
				unionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TINYINT() { return GetToken(HiveParser.KW_TINYINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SMALLINT() { return GetToken(HiveParser.KW_SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INT() { return GetToken(HiveParser.KW_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BIGINT() { return GetToken(HiveParser.KW_BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BOOLEAN() { return GetToken(HiveParser.KW_BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FLOAT() { return GetToken(HiveParser.KW_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DOUBLE() { return GetToken(HiveParser.KW_DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRECISION() { return GetToken(HiveParser.KW_PRECISION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATE() { return GetToken(HiveParser.KW_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATETIME() { return GetToken(HiveParser.KW_DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TIMESTAMP() { return GetToken(HiveParser.KW_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TIMESTAMPLOCALTZ() { return GetToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCAL() { return GetToken(HiveParser.KW_LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TIME() { return GetToken(HiveParser.KW_TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ZONE() { return GetToken(HiveParser.KW_ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRING() { return GetToken(HiveParser.KW_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BINARY() { return GetToken(HiveParser.KW_BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DECIMAL() { return GetToken(HiveParser.KW_DECIMAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(HiveParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(HiveParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(HiveParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VARCHAR() { return GetToken(HiveParser.KW_VARCHAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CHAR() { return GetToken(HiveParser.KW_CHAR, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 420, RULE_primitiveType);
		int _la;
		try {
			State = 2621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2582;
				Match(KW_TINYINT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2583;
				Match(KW_SMALLINT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2584;
				Match(KW_INT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2585;
				Match(KW_BIGINT);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2586;
				Match(KW_BOOLEAN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2587;
				Match(KW_FLOAT);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2588;
				Match(KW_DOUBLE);
				State = 2590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_PRECISION) {
					{
					State = 2589;
					Match(KW_PRECISION);
					}
				}

				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2592;
				Match(KW_DATE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2593;
				Match(KW_DATETIME);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2594;
				Match(KW_TIMESTAMP);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2595;
				Match(KW_TIMESTAMPLOCALTZ);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2596;
				Match(KW_TIMESTAMP);
				State = 2597;
				Match(KW_WITH);
				State = 2598;
				Match(KW_LOCAL);
				State = 2599;
				Match(KW_TIME);
				State = 2600;
				Match(KW_ZONE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2601;
				Match(KW_STRING);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2602;
				Match(KW_BINARY);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2603;
				Match(KW_DECIMAL);
				State = 2611;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 2604;
					Match(LPAREN);
					State = 2605;
					Match(Number);
					State = 2608;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 2606;
						Match(COMMA);
						State = 2607;
						Match(Number);
						}
					}

					State = 2610;
					Match(RPAREN);
					}
				}

				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2613;
				Match(KW_VARCHAR);
				State = 2614;
				Match(LPAREN);
				State = 2615;
				Match(Number);
				State = 2616;
				Match(RPAREN);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2617;
				Match(KW_CHAR);
				State = 2618;
				Match(LPAREN);
				State = 2619;
				Match(Number);
				State = 2620;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARRAY() { return GetToken(HiveParser.KW_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(HiveParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_db_colContext type_db_col() {
			return GetRuleContext<Type_db_colContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(HiveParser.GREATERTHAN, 0); }
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 422, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2623;
			Match(KW_ARRAY);
			State = 2624;
			Match(LESSTHAN);
			State = 2625;
			type_db_col();
			State = 2626;
			Match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRUCT() { return GetToken(HiveParser.KW_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(HiveParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameColonTypeListContext columnNameColonTypeList() {
			return GetRuleContext<ColumnNameColonTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(HiveParser.GREATERTHAN, 0); }
		public StructTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterStructType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitStructType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructTypeContext structType() {
		StructTypeContext _localctx = new StructTypeContext(Context, State);
		EnterRule(_localctx, 424, RULE_structType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2628;
			Match(KW_STRUCT);
			State = 2629;
			Match(LESSTHAN);
			State = 2630;
			columnNameColonTypeList();
			State = 2631;
			Match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAP() { return GetToken(HiveParser.KW_MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(HiveParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(HiveParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_db_colContext type_db_col() {
			return GetRuleContext<Type_db_colContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(HiveParser.GREATERTHAN, 0); }
		public MapTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterMapType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitMapType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapTypeContext mapType() {
		MapTypeContext _localctx = new MapTypeContext(Context, State);
		EnterRule(_localctx, 426, RULE_mapType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2633;
			Match(KW_MAP);
			State = 2634;
			Match(LESSTHAN);
			State = 2635;
			primitiveType();
			State = 2636;
			Match(COMMA);
			State = 2637;
			type_db_col();
			State = 2638;
			Match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNIONTYPE() { return GetToken(HiveParser.KW_UNIONTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(HiveParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColTypeListContext colTypeList() {
			return GetRuleContext<ColTypeListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(HiveParser.GREATERTHAN, 0); }
		public UnionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterUnionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitUnionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionTypeContext unionType() {
		UnionTypeContext _localctx = new UnionTypeContext(Context, State);
		EnterRule(_localctx, 428, RULE_unionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2640;
			Match(KW_UNIONTYPE);
			State = 2641;
			Match(LESSTHAN);
			State = 2642;
			colTypeList();
			State = 2643;
			Match(GREATERTHAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNION() { return GetToken(HiveParser.KW_UNION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(HiveParser.KW_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISTINCT() { return GetToken(HiveParser.KW_DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INTERSECT() { return GetToken(HiveParser.KW_INTERSECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXCEPT() { return GetToken(HiveParser.KW_EXCEPT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MINUS() { return GetToken(HiveParser.KW_MINUS, 0); }
		public SetOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSetOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSetOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetOperatorContext setOperator() {
		SetOperatorContext _localctx = new SetOperatorContext(Context, State);
		EnterRule(_localctx, 430, RULE_setOperator);
		int _la;
		try {
			State = 2669;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2645;
				Match(KW_UNION);
				State = 2646;
				Match(KW_ALL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2647;
				Match(KW_UNION);
				State = 2649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_DISTINCT) {
					{
					State = 2648;
					Match(KW_DISTINCT);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2651;
				Match(KW_INTERSECT);
				State = 2652;
				Match(KW_ALL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2653;
				Match(KW_INTERSECT);
				State = 2655;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_DISTINCT) {
					{
					State = 2654;
					Match(KW_DISTINCT);
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2657;
				Match(KW_EXCEPT);
				State = 2658;
				Match(KW_ALL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2659;
				Match(KW_EXCEPT);
				State = 2661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_DISTINCT) {
					{
					State = 2660;
					Match(KW_DISTINCT);
					}
				}

				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2663;
				Match(KW_MINUS);
				State = 2664;
				Match(KW_ALL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2665;
				Match(KW_MINUS);
				State = 2667;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_DISTINCT) {
					{
					State = 2666;
					Match(KW_DISTINCT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryStatementExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryStatementExpressionBodyContext queryStatementExpressionBody() {
			return GetRuleContext<QueryStatementExpressionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public QueryStatementExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryStatementExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterQueryStatementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitQueryStatementExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryStatementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryStatementExpressionContext queryStatementExpression() {
		QueryStatementExpressionContext _localctx = new QueryStatementExpressionContext(Context, State);
		EnterRule(_localctx, 432, RULE_queryStatementExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WITH) {
				{
				State = 2671;
				withClause();
				}
			}

			State = 2674;
			queryStatementExpressionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryStatementExpressionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FromStatementContext fromStatement() {
			return GetRuleContext<FromStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegularBodyContext regularBody() {
			return GetRuleContext<RegularBodyContext>(0);
		}
		public QueryStatementExpressionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryStatementExpressionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterQueryStatementExpressionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitQueryStatementExpressionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryStatementExpressionBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryStatementExpressionBodyContext queryStatementExpressionBody() {
		QueryStatementExpressionBodyContext _localctx = new QueryStatementExpressionBodyContext(Context, State);
		EnterRule(_localctx, 434, RULE_queryStatementExpressionBody);
		try {
			State = 2678;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2676;
				fromStatement();
				}
				break;
			case KW_SELECT:
			case KW_INSERT:
			case KW_MAP:
			case KW_REDUCE:
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2677;
				regularBody();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CteStatementContext[] cteStatement() {
			return GetRuleContexts<CteStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CteStatementContext cteStatement(int i) {
			return GetRuleContext<CteStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 436, RULE_withClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2680;
			Match(KW_WITH);
			State = 2681;
			cteStatement();
			State = 2686;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2682;
				Match(COMMA);
				State = 2683;
				cteStatement();
				}
				}
				State = 2688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryStatementExpressionContext queryStatementExpression() {
			return GetRuleContext<QueryStatementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public CteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CteStatementContext cteStatement() {
		CteStatementContext _localctx = new CteStatementContext(Context, State);
		EnterRule(_localctx, 438, RULE_cteStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2689;
			identifier();
			State = 2690;
			Match(KW_AS);
			State = 2691;
			Match(LPAREN);
			State = 2692;
			queryStatementExpression();
			State = 2693;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleFromStatementContext[] singleFromStatement() {
			return GetRuleContexts<SingleFromStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleFromStatementContext singleFromStatement(int i) {
			return GetRuleContext<SingleFromStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetOperatorContext[] setOperator() {
			return GetRuleContexts<SetOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetOperatorContext setOperator(int i) {
			return GetRuleContext<SetOperatorContext>(i);
		}
		public FromStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterFromStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitFromStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromStatementContext fromStatement() {
		FromStatementContext _localctx = new FromStatementContext(Context, State);
		EnterRule(_localctx, 440, RULE_fromStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2695;
			singleFromStatement();
			}
			State = 2701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==KW_UNION || _la==KW_EXCEPT || _la==KW_MINUS || _la==KW_INTERSECT) {
				{
				{
				State = 2696;
				setOperator();
				State = 2697;
				singleFromStatement();
				}
				}
				State = 2703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleFromStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext[] body() {
			return GetRuleContexts<BodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body(int i) {
			return GetRuleContext<BodyContext>(i);
		}
		public SingleFromStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleFromStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSingleFromStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSingleFromStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleFromStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleFromStatementContext singleFromStatement() {
		SingleFromStatementContext _localctx = new SingleFromStatementContext(Context, State);
		EnterRule(_localctx, 442, RULE_singleFromStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2704;
			fromClause();
			State = 2706;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2705;
				body();
				}
				}
				State = 2708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KW_SELECT || _la==KW_INSERT || _la==KW_MAP || _la==KW_REDUCE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegularBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertClauseContext insertClause() {
			return GetRuleContext<InsertClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesClauseContext valuesClause() {
			return GetRuleContext<ValuesClauseContext>(0);
		}
		public RegularBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regularBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRegularBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRegularBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegularBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegularBodyContext regularBody() {
		RegularBodyContext _localctx = new RegularBodyContext(Context, State);
		EnterRule(_localctx, 444, RULE_regularBody);
		try {
			State = 2716;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_INSERT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2710;
				insertClause();
				State = 2713;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_SELECT:
				case KW_MAP:
				case KW_REDUCE:
				case LPAREN:
					{
					State = 2711;
					selectStatement();
					}
					break;
				case KW_VALUES:
					{
					State = 2712;
					valuesClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KW_SELECT:
			case KW_MAP:
			case KW_REDUCE:
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2715;
				selectStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomSelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectClauseContext selectClause() {
			return GetRuleContext<SelectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public AtomSelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomSelectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAtomSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAtomSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomSelectStatementContext atomSelectStatement() {
		AtomSelectStatementContext _localctx = new AtomSelectStatementContext(Context, State);
		EnterRule(_localctx, 446, RULE_atomSelectStatement);
		int _la;
		try {
			State = 2738;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_SELECT:
			case KW_MAP:
			case KW_REDUCE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2718;
				selectClause();
				State = 2720;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_FROM) {
					{
					State = 2719;
					fromClause();
					}
				}

				State = 2723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_WHERE) {
					{
					State = 2722;
					whereClause();
					}
				}

				State = 2726;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_GROUP) {
					{
					State = 2725;
					groupByClause();
					}
				}

				State = 2729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_HAVING) {
					{
					State = 2728;
					havingClause();
					}
				}

				State = 2732;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_WINDOW) {
					{
					State = 2731;
					window_clause();
					}
				}

				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2734;
				Match(LPAREN);
				State = 2735;
				selectStatement();
				State = 2736;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomSelectStatementContext atomSelectStatement() {
			return GetRuleContext<AtomSelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetOpSelectStatementContext setOpSelectStatement() {
			return GetRuleContext<SetOpSelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClusterByClauseContext clusterByClause() {
			return GetRuleContext<ClusterByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DistributeByClauseContext distributeByClause() {
			return GetRuleContext<DistributeByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortByClauseContext sortByClause() {
			return GetRuleContext<SortByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 448, RULE_selectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2740;
			atomSelectStatement();
			State = 2742;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_UNION || _la==KW_EXCEPT || _la==KW_MINUS || _la==KW_INTERSECT) {
				{
				State = 2741;
				setOpSelectStatement();
				}
			}

			State = 2745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ORDER) {
				{
				State = 2744;
				orderByClause();
				}
			}

			State = 2748;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_CLUSTER) {
				{
				State = 2747;
				clusterByClause();
				}
			}

			State = 2751;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_DISTRIBUTE) {
				{
				State = 2750;
				distributeByClause();
				}
			}

			State = 2754;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_SORT) {
				{
				State = 2753;
				sortByClause();
				}
			}

			State = 2757;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_LIMIT) {
				{
				State = 2756;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetOpSelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetOperatorContext[] setOperator() {
			return GetRuleContexts<SetOperatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetOperatorContext setOperator(int i) {
			return GetRuleContext<SetOperatorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomSelectStatementContext[] atomSelectStatement() {
			return GetRuleContexts<AtomSelectStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomSelectStatementContext atomSelectStatement(int i) {
			return GetRuleContext<AtomSelectStatementContext>(i);
		}
		public SetOpSelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setOpSelectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSetOpSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSetOpSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetOpSelectStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetOpSelectStatementContext setOpSelectStatement() {
		SetOpSelectStatementContext _localctx = new SetOpSelectStatementContext(Context, State);
		EnterRule(_localctx, 450, RULE_setOpSelectStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2759;
				setOperator();
				State = 2760;
				atomSelectStatement();
				}
				}
				State = 2764;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KW_UNION || _la==KW_EXCEPT || _la==KW_MINUS || _la==KW_INTERSECT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementWithCTEContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		public SelectStatementWithCTEContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatementWithCTE; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSelectStatementWithCTE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSelectStatementWithCTE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectStatementWithCTE(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementWithCTEContext selectStatementWithCTE() {
		SelectStatementWithCTEContext _localctx = new SelectStatementWithCTEContext(Context, State);
		EnterRule(_localctx, 452, RULE_selectStatementWithCTE);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2767;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WITH) {
				{
				State = 2766;
				withClause();
				}
			}

			State = 2769;
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertClauseContext insertClause() {
			return GetRuleContext<InsertClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectClauseContext selectClause() {
			return GetRuleContext<SelectClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LateralViewContext lateralView() {
			return GetRuleContext<LateralViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_clauseContext window_clause() {
			return GetRuleContext<Window_clauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClusterByClauseContext clusterByClause() {
			return GetRuleContext<ClusterByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DistributeByClauseContext distributeByClause() {
			return GetRuleContext<DistributeByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortByClauseContext sortByClause() {
			return GetRuleContext<SortByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 454, RULE_body);
		int _la;
		try {
			State = 2834;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_INSERT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2771;
				insertClause();
				State = 2772;
				selectClause();
				State = 2774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_LATERAL || _la==COMMA) {
					{
					State = 2773;
					lateralView();
					}
				}

				State = 2777;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_WHERE) {
					{
					State = 2776;
					whereClause();
					}
				}

				State = 2780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_GROUP) {
					{
					State = 2779;
					groupByClause();
					}
				}

				State = 2783;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_HAVING) {
					{
					State = 2782;
					havingClause();
					}
				}

				State = 2786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_WINDOW) {
					{
					State = 2785;
					window_clause();
					}
				}

				State = 2789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_ORDER) {
					{
					State = 2788;
					orderByClause();
					}
				}

				State = 2792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_CLUSTER) {
					{
					State = 2791;
					clusterByClause();
					}
				}

				State = 2795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_DISTRIBUTE) {
					{
					State = 2794;
					distributeByClause();
					}
				}

				State = 2798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_SORT) {
					{
					State = 2797;
					sortByClause();
					}
				}

				State = 2801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_LIMIT) {
					{
					State = 2800;
					limitClause();
					}
				}

				}
				break;
			case KW_SELECT:
			case KW_MAP:
			case KW_REDUCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2803;
				selectClause();
				State = 2805;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_LATERAL || _la==COMMA) {
					{
					State = 2804;
					lateralView();
					}
				}

				State = 2808;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_WHERE) {
					{
					State = 2807;
					whereClause();
					}
				}

				State = 2811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_GROUP) {
					{
					State = 2810;
					groupByClause();
					}
				}

				State = 2814;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_HAVING) {
					{
					State = 2813;
					havingClause();
					}
				}

				State = 2817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_WINDOW) {
					{
					State = 2816;
					window_clause();
					}
				}

				State = 2820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_ORDER) {
					{
					State = 2819;
					orderByClause();
					}
				}

				State = 2823;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_CLUSTER) {
					{
					State = 2822;
					clusterByClause();
					}
				}

				State = 2826;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_DISTRIBUTE) {
					{
					State = 2825;
					distributeByClause();
					}
				}

				State = 2829;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_SORT) {
					{
					State = 2828;
					sortByClause();
					}
				}

				State = 2832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_LIMIT) {
					{
					State = 2831;
					limitClause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INSERT() { return GetToken(HiveParser.KW_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OVERWRITE() { return GetToken(HiveParser.KW_OVERWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DestinationContext destination() {
			return GetRuleContext<DestinationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INTO() { return GetToken(HiveParser.KW_INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableOrPartitionContext tableOrPartition() {
			return GetRuleContext<TableOrPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameListContext columnNameList() {
			return GetRuleContext<ColumnNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public InsertClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterInsertClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitInsertClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsertClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsertClauseContext insertClause() {
		InsertClauseContext _localctx = new InsertClauseContext(Context, State);
		EnterRule(_localctx, 456, RULE_insertClause);
		int _la;
		try {
			State = 2854;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2836;
				Match(KW_INSERT);
				State = 2837;
				Match(KW_OVERWRITE);
				State = 2838;
				destination();
				State = 2840;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_IF) {
					{
					State = 2839;
					ifNotExists();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2842;
				Match(KW_INSERT);
				State = 2843;
				Match(KW_INTO);
				State = 2845;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_TABLE) {
					{
					State = 2844;
					Match(KW_TABLE);
					}
				}

				State = 2847;
				tableOrPartition();
				State = 2852;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,321,Context) ) {
				case 1:
					{
					State = 2848;
					Match(LPAREN);
					State = 2849;
					columnNameList();
					State = 2850;
					Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestinationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DIRECTORY() { return GetToken(HiveParser.KW_DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCAL() { return GetToken(HiveParser.KW_LOCAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRowFormatContext tableRowFormat() {
			return GetRuleContext<TableRowFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFileFormatContext tableFileFormat() {
			return GetRuleContext<TableFileFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableOrPartitionContext tableOrPartition() {
			return GetRuleContext<TableOrPartitionContext>(0);
		}
		public DestinationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destination; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDestination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDestination(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestinationContext destination() {
		DestinationContext _localctx = new DestinationContext(Context, State);
		EnterRule(_localctx, 458, RULE_destination);
		int _la;
		try {
			State = 2869;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_DIRECTORY:
			case KW_LOCAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_LOCAL) {
					{
					State = 2856;
					Match(KW_LOCAL);
					}
				}

				State = 2859;
				Match(KW_DIRECTORY);
				State = 2860;
				Match(StringLiteral);
				State = 2862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_ROW) {
					{
					State = 2861;
					tableRowFormat();
					}
				}

				State = 2865;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_STORED) {
					{
					State = 2864;
					tableFileFormat();
					}
				}

				}
				break;
			case KW_TABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2867;
				Match(KW_TABLE);
				State = 2868;
				tableOrPartition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LIMIT() { return GetToken(HiveParser.KW_LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(HiveParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(HiveParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(HiveParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OFFSET() { return GetToken(HiveParser.KW_OFFSET, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLimitClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 460, RULE_limitClause);
		try {
			State = 2881;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,328,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2871;
				Match(KW_LIMIT);
				{
				State = 2874;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,327,Context) ) {
				case 1:
					{
					State = 2872;
					Match(Number);
					State = 2873;
					Match(COMMA);
					}
					break;
				}
				State = 2876;
				Match(Number);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2877;
				Match(KW_LIMIT);
				State = 2878;
				Match(Number);
				State = 2879;
				Match(KW_OFFSET);
				State = 2880;
				Match(Number);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DELETE() { return GetToken(HiveParser.KW_DELETE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FROM() { return GetToken(HiveParser.KW_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 462, RULE_deleteStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2883;
			Match(KW_DELETE);
			State = 2884;
			Match(KW_FROM);
			State = 2885;
			tableName();
			State = 2887;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHERE) {
				{
				State = 2886;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAssignmentClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableOrColumnContext tableOrColumn() {
			return GetRuleContext<TableOrColumnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HiveParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ColumnAssignmentClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAssignmentClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnAssignmentClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnAssignmentClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnAssignmentClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAssignmentClauseContext columnAssignmentClause() {
		ColumnAssignmentClauseContext _localctx = new ColumnAssignmentClauseContext(Context, State);
		EnterRule(_localctx, 464, RULE_columnAssignmentClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2889;
			tableOrColumn();
			State = 2890;
			Match(EQUAL);
			State = 2891;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetColumnsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAssignmentClauseContext[] columnAssignmentClause() {
			return GetRuleContexts<ColumnAssignmentClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAssignmentClauseContext columnAssignmentClause(int i) {
			return GetRuleContext<ColumnAssignmentClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public SetColumnsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setColumnsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSetColumnsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSetColumnsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetColumnsClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetColumnsClauseContext setColumnsClause() {
		SetColumnsClauseContext _localctx = new SetColumnsClauseContext(Context, State);
		EnterRule(_localctx, 466, RULE_setColumnsClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2893;
			Match(KW_SET);
			State = 2894;
			columnAssignmentClause();
			State = 2899;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2895;
				Match(COMMA);
				State = 2896;
				columnAssignmentClause();
				}
				}
				State = 2901;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UPDATE() { return GetToken(HiveParser.KW_UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetColumnsClauseContext setColumnsClause() {
			return GetRuleContext<SetColumnsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 468, RULE_updateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2902;
			Match(KW_UPDATE);
			State = 2903;
			tableName();
			State = 2904;
			setColumnsClause();
			State = 2906;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHERE) {
				{
				State = 2905;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlTransactionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StartTransactionStatementContext startTransactionStatement() {
			return GetRuleContext<StartTransactionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommitStatementContext commitStatement() {
			return GetRuleContext<CommitStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollbackStatementContext rollbackStatement() {
			return GetRuleContext<RollbackStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetAutoCommitStatementContext setAutoCommitStatement() {
			return GetRuleContext<SetAutoCommitStatementContext>(0);
		}
		public SqlTransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlTransactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSqlTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSqlTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSqlTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SqlTransactionStatementContext sqlTransactionStatement() {
		SqlTransactionStatementContext _localctx = new SqlTransactionStatementContext(Context, State);
		EnterRule(_localctx, 470, RULE_sqlTransactionStatement);
		try {
			State = 2912;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2908;
				startTransactionStatement();
				}
				break;
			case KW_COMMIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2909;
				commitStatement();
				}
				break;
			case KW_ROLLBACK:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2910;
				rollbackStatement();
				}
				break;
			case KW_SET:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2911;
				setAutoCommitStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartTransactionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_START() { return GetToken(HiveParser.KW_START, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRANSACTION() { return GetToken(HiveParser.KW_TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext[] transactionMode() {
			return GetRuleContexts<TransactionModeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionModeContext transactionMode(int i) {
			return GetRuleContext<TransactionModeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public StartTransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startTransactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterStartTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitStartTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartTransactionStatementContext startTransactionStatement() {
		StartTransactionStatementContext _localctx = new StartTransactionStatementContext(Context, State);
		EnterRule(_localctx, 472, RULE_startTransactionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2914;
			Match(KW_START);
			State = 2915;
			Match(KW_TRANSACTION);
			State = 2924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_READ || _la==KW_ISOLATION) {
				{
				State = 2916;
				transactionMode();
				State = 2921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 2917;
					Match(COMMA);
					State = 2918;
					transactionMode();
					}
					}
					State = 2923;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IsolationLevelContext isolationLevel() {
			return GetRuleContext<IsolationLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionAccessModeContext transactionAccessMode() {
			return GetRuleContext<TransactionAccessModeContext>(0);
		}
		public TransactionModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTransactionMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTransactionMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionModeContext transactionMode() {
		TransactionModeContext _localctx = new TransactionModeContext(Context, State);
		EnterRule(_localctx, 474, RULE_transactionMode);
		try {
			State = 2928;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ISOLATION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2926;
				isolationLevel();
				}
				break;
			case KW_READ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2927;
				transactionAccessMode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionAccessModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_READ() { return GetToken(HiveParser.KW_READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ONLY() { return GetToken(HiveParser.KW_ONLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WRITE() { return GetToken(HiveParser.KW_WRITE, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionAccessMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTransactionAccessMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTransactionAccessMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTransactionAccessMode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TransactionAccessModeContext transactionAccessMode() {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(Context, State);
		EnterRule(_localctx, 476, RULE_transactionAccessMode);
		try {
			State = 2934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,336,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2930;
				Match(KW_READ);
				State = 2931;
				Match(KW_ONLY);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2932;
				Match(KW_READ);
				State = 2933;
				Match(KW_WRITE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsolationLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ISOLATION() { return GetToken(HiveParser.KW_ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LEVEL() { return GetToken(HiveParser.KW_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LevelOfIsolationContext levelOfIsolation() {
			return GetRuleContext<LevelOfIsolationContext>(0);
		}
		public IsolationLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isolationLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterIsolationLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitIsolationLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsolationLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsolationLevelContext isolationLevel() {
		IsolationLevelContext _localctx = new IsolationLevelContext(Context, State);
		EnterRule(_localctx, 478, RULE_isolationLevel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2936;
			Match(KW_ISOLATION);
			State = 2937;
			Match(KW_LEVEL);
			State = 2938;
			levelOfIsolation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LevelOfIsolationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SNAPSHOT() { return GetToken(HiveParser.KW_SNAPSHOT, 0); }
		public LevelOfIsolationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_levelOfIsolation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterLevelOfIsolation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitLevelOfIsolation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLevelOfIsolation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LevelOfIsolationContext levelOfIsolation() {
		LevelOfIsolationContext _localctx = new LevelOfIsolationContext(Context, State);
		EnterRule(_localctx, 480, RULE_levelOfIsolation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2940;
			Match(KW_SNAPSHOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMMIT() { return GetToken(HiveParser.KW_COMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WORK() { return GetToken(HiveParser.KW_WORK, 0); }
		public CommitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCommitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCommitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommitStatementContext commitStatement() {
		CommitStatementContext _localctx = new CommitStatementContext(Context, State);
		EnterRule(_localctx, 482, RULE_commitStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2942;
			Match(KW_COMMIT);
			State = 2944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WORK) {
				{
				State = 2943;
				Match(KW_WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollbackStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLLBACK() { return GetToken(HiveParser.KW_ROLLBACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WORK() { return GetToken(HiveParser.KW_WORK, 0); }
		public RollbackStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollbackStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRollbackStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRollbackStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollbackStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollbackStatementContext rollbackStatement() {
		RollbackStatementContext _localctx = new RollbackStatementContext(Context, State);
		EnterRule(_localctx, 484, RULE_rollbackStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2946;
			Match(KW_ROLLBACK);
			State = 2948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WORK) {
				{
				State = 2947;
				Match(KW_WORK);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAutoCommitStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SET() { return GetToken(HiveParser.KW_SET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AUTOCOMMIT() { return GetToken(HiveParser.KW_AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanValueTokContext booleanValueTok() {
			return GetRuleContext<BooleanValueTokContext>(0);
		}
		public SetAutoCommitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAutoCommitStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSetAutoCommitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSetAutoCommitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetAutoCommitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetAutoCommitStatementContext setAutoCommitStatement() {
		SetAutoCommitStatementContext _localctx = new SetAutoCommitStatementContext(Context, State);
		EnterRule(_localctx, 486, RULE_setAutoCommitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2950;
			Match(KW_SET);
			State = 2951;
			Match(KW_AUTOCOMMIT);
			State = 2952;
			booleanValueTok();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbortTransactionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABORT() { return GetToken(HiveParser.KW_ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRANSACTIONS() { return GetToken(HiveParser.KW_TRANSACTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(HiveParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(HiveParser.Number, i);
		}
		public AbortTransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abortTransactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAbortTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAbortTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbortTransactionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbortTransactionStatementContext abortTransactionStatement() {
		AbortTransactionStatementContext _localctx = new AbortTransactionStatementContext(Context, State);
		EnterRule(_localctx, 488, RULE_abortTransactionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2954;
			Match(KW_ABORT);
			State = 2955;
			Match(KW_TRANSACTIONS);
			State = 2957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2956;
				Match(Number);
				}
				}
				State = 2959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Number );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MergeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MERGE() { return GetToken(HiveParser.KW_MERGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INTO() { return GetToken(HiveParser.KW_INTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USING() { return GetToken(HiveParser.KW_USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinSourcePartContext joinSourcePart() {
			return GetRuleContext<JoinSourcePartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(HiveParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenClausesContext whenClauses() {
			return GetRuleContext<WhenClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		public MergeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mergeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterMergeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitMergeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMergeStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MergeStatementContext mergeStatement() {
		MergeStatementContext _localctx = new MergeStatementContext(Context, State);
		EnterRule(_localctx, 490, RULE_mergeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2961;
			Match(KW_MERGE);
			State = 2962;
			Match(KW_INTO);
			State = 2963;
			tableName();
			State = 2968;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ASC) | (1L << KW_DESC) | (1L << KW_NULLS) | (1L << KW_LAST) | (1L << KW_AS) | (1L << KW_OVERWRITE) | (1L << KW_PARTITIONS) | (1L << KW_TABLES) | (1L << KW_COLUMNS) | (1L << KW_INDEX) | (1L << KW_INDEXES) | (1L << KW_REBUILD) | (1L << KW_FUNCTIONS) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_REPAIR) | (1L << KW_DIRECTORY) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT) | (1L << KW_LOAD) | (1L << KW_EXPORT) | (1L << KW_REPLICATION) | (1L << KW_METADATA) | (1L << KW_DATA) | (1L << KW_INPATH))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (KW_CHANGE - 68)) | (1L << (KW_FIRST - 68)) | (1L << (KW_AFTER - 68)) | (1L << (KW_RENAME - 68)) | (1L << (KW_COMMENT - 68)) | (1L << (KW_TINYINT - 68)) | (1L << (KW_DATETIME - 68)) | (1L << (KW_ZONE - 68)) | (1L << (KW_STRING - 68)) | (1L << (KW_STRUCT - 68)) | (1L << (KW_UNIONTYPE - 68)) | (1L << (KW_PARTITIONED - 68)) | (1L << (KW_CLUSTERED - 68)) | (1L << (KW_SORTED - 68)) | (1L << (KW_BUCKETS - 68)) | (1L << (KW_FORMAT - 68)) | (1L << (KW_DELIMITED - 68)) | (1L << (KW_FIELDS - 68)) | (1L << (KW_TERMINATED - 68)) | (1L << (KW_ESCAPED - 68)) | (1L << (KW_COLLECTION - 68)) | (1L << (KW_ITEMS - 68)) | (1L << (KW_KEYS - 68)) | (1L << (KW_KEY_TYPE - 68)) | (1L << (KW_KILL - 68)) | (1L << (KW_LINES - 68)) | (1L << (KW_STORED - 68)) | (1L << (KW_FILEFORMAT - 68)) | (1L << (KW_INPUTFORMAT - 68)) | (1L << (KW_OUTPUTFORMAT - 68)) | (1L << (KW_INPUTDRIVER - 68)) | (1L << (KW_OUTPUTDRIVER - 68)) | (1L << (KW_ENABLE - 68)) | (1L << (KW_DISABLE - 68)) | (1L << (KW_LOCATION - 68)) | (1L << (KW_BUCKET - 68)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (KW_ADD - 134)) | (1L << (KW_REPLACE - 134)) | (1L << (KW_TEMPORARY - 134)) | (1L << (KW_FILE - 134)) | (1L << (KW_JAR - 134)) | (1L << (KW_EXPLAIN - 134)) | (1L << (KW_FORMATTED - 134)) | (1L << (KW_DEPENDENCY - 134)) | (1L << (KW_LOGICAL - 134)) | (1L << (KW_SERDE - 134)) | (1L << (KW_DEFERRED - 134)) | (1L << (KW_SERDEPROPERTIES - 134)) | (1L << (KW_DBPROPERTIES - 134)) | (1L << (KW_LIMIT - 134)) | (1L << (KW_OFFSET - 134)) | (1L << (KW_UNSET - 134)) | (1L << (KW_TBLPROPERTIES - 134)) | (1L << (KW_IDXPROPERTIES - 134)) | (1L << (KW_VALUE_TYPE - 134)) | (1L << (KW_ELEM_TYPE - 134)) | (1L << (KW_DEFINED - 134)) | (1L << (KW_MAPJOIN - 134)) | (1L << (KW_STREAMTABLE - 134)) | (1L << (KW_CLUSTERSTATUS - 134)) | (1L << (KW_UTC - 134)) | (1L << (KW_UTCTIMESTAMP - 134)) | (1L << (KW_LONG - 134)) | (1L << (KW_PLUS - 134)) | (1L << (KW_VIEW - 134)) | (1L << (KW_VIEWS - 134)) | (1L << (KW_DATABASES - 134)) | (1L << (KW_MATERIALIZED - 134)) | (1L << (KW_SCHEMA - 134)) | (1L << (KW_SCHEMAS - 134)) | (1L << (KW_SSL - 134)) | (1L << (KW_UNDO - 134)) | (1L << (KW_LOCK - 134)) | (1L << (KW_LOCKS - 134)) | (1L << (KW_UNLOCK - 134)) | (1L << (KW_SHARED - 134)) | (1L << (KW_EXCLUSIVE - 134)) | (1L << (KW_UNSIGNED - 134)) | (1L << (KW_WHILE - 134)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (KW_READ - 198)) | (1L << (KW_PURGE - 198)) | (1L << (KW_ANALYZE - 198)) | (1L << (KW_BEFORE - 198)) | (1L << (KW_CONTINUE - 198)) | (1L << (KW_RECORDREADER - 198)) | (1L << (KW_RECORDWRITER - 198)) | (1L << (KW_SEMI - 198)) | (1L << (KW_TOUCH - 198)) | (1L << (KW_ARCHIVE - 198)) | (1L << (KW_UNARCHIVE - 198)) | (1L << (KW_COMPUTE - 198)) | (1L << (KW_STATISTICS - 198)) | (1L << (KW_USE - 198)) | (1L << (KW_OPTION - 198)) | (1L << (KW_CONCATENATE - 198)) | (1L << (KW_SHOW_DATABASE - 198)) | (1L << (KW_RESTRICT - 198)) | (1L << (KW_CASCADE - 198)) | (1L << (KW_SKEWED - 198)) | (1L << (KW_DIRECTORIES - 198)) | (1L << (KW_SETS - 198)) | (1L << (KW_NOSCAN - 198)) | (1L << (KW_ROLE - 198)) | (1L << (KW_ROLES - 198)) | (1L << (KW_URI - 198)) | (1L << (KW_SERVER - 198)) | (1L << (KW_ADMIN - 198)) | (1L << (KW_OWNER - 198)) | (1L << (KW_PRINCIPALS - 198)) | (1L << (KW_COMPACT - 198)) | (1L << (KW_COMPACTIONS - 198)) | (1L << (KW_TRANSACTIONS - 198)) | (1L << (KW_REWRITE - 198)) | (1L << (KW_REOPTIMIZATION - 198)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (KW_RELOAD - 264)) | (1L << (KW_YEAR - 264)) | (1L << (KW_QUERY - 264)) | (1L << (KW_QUARTER - 264)) | (1L << (KW_MONTH - 264)) | (1L << (KW_WEEK - 264)) | (1L << (KW_DAY - 264)) | (1L << (KW_DOW - 264)) | (1L << (KW_HOUR - 264)) | (1L << (KW_MINUTE - 264)) | (1L << (KW_SECOND - 264)) | (1L << (KW_TRANSACTION - 264)) | (1L << (KW_WORK - 264)) | (1L << (KW_WRITE - 264)) | (1L << (KW_ISOLATION - 264)) | (1L << (KW_LEVEL - 264)) | (1L << (KW_SNAPSHOT - 264)) | (1L << (KW_AUTOCOMMIT - 264)) | (1L << (KW_CACHE - 264)) | (1L << (KW_ENFORCED - 264)) | (1L << (KW_VALIDATE - 264)) | (1L << (KW_NOVALIDATE - 264)) | (1L << (KW_RELY - 264)) | (1L << (KW_NORELY - 264)) | (1L << (KW_KEY - 264)) | (1L << (KW_ABORT - 264)) | (1L << (KW_MATCHED - 264)) | (1L << (KW_REPL - 264)) | (1L << (KW_DUMP - 264)) | (1L << (KW_STATUS - 264)) | (1L << (KW_VECTORIZATION - 264)) | (1L << (KW_SUMMARY - 264)) | (1L << (KW_OPERATOR - 264)) | (1L << (KW_EXPRESSION - 264)) | (1L << (KW_DETAIL - 264)) | (1L << (KW_WAIT - 264)) | (1L << (KW_RESOURCE - 264)) | (1L << (KW_PLAN - 264)) | (1L << (KW_QUERY_PARALLELISM - 264)) | (1L << (KW_PLANS - 264)) | (1L << (KW_ACTIVATE - 264)) | (1L << (KW_DEFAULT - 264)) | (1L << (KW_CHECK - 264)) | (1L << (KW_POOL - 264)) | (1L << (KW_MOVE - 264)) | (1L << (KW_DO - 264)) | (1L << (KW_ALLOC_FRACTION - 264)) | (1L << (KW_SCHEDULING_POLICY - 264)) | (1L << (KW_PATH - 264)) | (1L << (KW_MAPPING - 264)) | (1L << (KW_WORKLOAD - 264)) | (1L << (KW_MANAGEMENT - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (KW_ACTIVE - 328)) | (1L << (KW_UNMANAGED - 328)) | (1L << (Identifier - 328)))) != 0)) {
				{
				State = 2965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_AS) {
					{
					State = 2964;
					Match(KW_AS);
					}
				}

				State = 2967;
				identifier();
				}
			}

			State = 2970;
			Match(KW_USING);
			State = 2971;
			joinSourcePart();
			State = 2972;
			Match(KW_ON);
			State = 2973;
			expression(0);
			State = 2974;
			whenClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WhenMatchedAndClauseContext[] whenMatchedAndClause() {
			return GetRuleContexts<WhenMatchedAndClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenMatchedAndClauseContext whenMatchedAndClause(int i) {
			return GetRuleContext<WhenMatchedAndClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenMatchedThenClauseContext[] whenMatchedThenClause() {
			return GetRuleContexts<WhenMatchedThenClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenMatchedThenClauseContext whenMatchedThenClause(int i) {
			return GetRuleContext<WhenMatchedThenClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenNotMatchedClauseContext whenNotMatchedClause() {
			return GetRuleContext<WhenNotMatchedClauseContext>(0);
		}
		public WhenClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWhenClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWhenClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenClauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenClausesContext whenClauses() {
		WhenClausesContext _localctx = new WhenClausesContext(Context, State);
		EnterRule(_localctx, 492, RULE_whenClauses);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2980;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,343,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 2978;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,342,Context) ) {
					case 1:
						{
						State = 2976;
						whenMatchedAndClause();
						}
						break;
					case 2:
						{
						State = 2977;
						whenMatchedThenClause();
						}
						break;
					}
					} 
				}
				State = 2982;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,343,Context);
			}
			State = 2984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_WHEN) {
				{
				State = 2983;
				whenNotMatchedClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenNotMatchedClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN() { return GetToken(HiveParser.KW_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(HiveParser.KW_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MATCHED() { return GetToken(HiveParser.KW_MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THEN() { return GetToken(HiveParser.KW_THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INSERT() { return GetToken(HiveParser.KW_INSERT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALUES() { return GetToken(HiveParser.KW_VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueRowConstructorContext valueRowConstructor() {
			return GetRuleContext<ValueRowConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AND() { return GetToken(HiveParser.KW_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhenNotMatchedClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenNotMatchedClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWhenNotMatchedClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWhenNotMatchedClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenNotMatchedClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenNotMatchedClauseContext whenNotMatchedClause() {
		WhenNotMatchedClauseContext _localctx = new WhenNotMatchedClauseContext(Context, State);
		EnterRule(_localctx, 494, RULE_whenNotMatchedClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2986;
			Match(KW_WHEN);
			State = 2987;
			Match(KW_NOT);
			State = 2988;
			Match(KW_MATCHED);
			State = 2991;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AND) {
				{
				State = 2989;
				Match(KW_AND);
				State = 2990;
				expression(0);
				}
			}

			State = 2993;
			Match(KW_THEN);
			State = 2994;
			Match(KW_INSERT);
			State = 2995;
			Match(KW_VALUES);
			State = 2996;
			valueRowConstructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenMatchedAndClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN() { return GetToken(HiveParser.KW_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MATCHED() { return GetToken(HiveParser.KW_MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AND() { return GetToken(HiveParser.KW_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THEN() { return GetToken(HiveParser.KW_THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateOrDeleteContext updateOrDelete() {
			return GetRuleContext<UpdateOrDeleteContext>(0);
		}
		public WhenMatchedAndClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenMatchedAndClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWhenMatchedAndClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWhenMatchedAndClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenMatchedAndClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenMatchedAndClauseContext whenMatchedAndClause() {
		WhenMatchedAndClauseContext _localctx = new WhenMatchedAndClauseContext(Context, State);
		EnterRule(_localctx, 496, RULE_whenMatchedAndClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2998;
			Match(KW_WHEN);
			State = 2999;
			Match(KW_MATCHED);
			State = 3000;
			Match(KW_AND);
			State = 3001;
			expression(0);
			State = 3002;
			Match(KW_THEN);
			State = 3003;
			updateOrDelete();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenMatchedThenClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN() { return GetToken(HiveParser.KW_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MATCHED() { return GetToken(HiveParser.KW_MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THEN() { return GetToken(HiveParser.KW_THEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateOrDeleteContext updateOrDelete() {
			return GetRuleContext<UpdateOrDeleteContext>(0);
		}
		public WhenMatchedThenClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenMatchedThenClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWhenMatchedThenClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWhenMatchedThenClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenMatchedThenClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenMatchedThenClauseContext whenMatchedThenClause() {
		WhenMatchedThenClauseContext _localctx = new WhenMatchedThenClauseContext(Context, State);
		EnterRule(_localctx, 498, RULE_whenMatchedThenClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3005;
			Match(KW_WHEN);
			State = 3006;
			Match(KW_MATCHED);
			State = 3007;
			Match(KW_THEN);
			State = 3008;
			updateOrDelete();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateOrDeleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UPDATE() { return GetToken(HiveParser.KW_UPDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SetColumnsClauseContext setColumnsClause() {
			return GetRuleContext<SetColumnsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DELETE() { return GetToken(HiveParser.KW_DELETE, 0); }
		public UpdateOrDeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateOrDelete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterUpdateOrDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitUpdateOrDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUpdateOrDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UpdateOrDeleteContext updateOrDelete() {
		UpdateOrDeleteContext _localctx = new UpdateOrDeleteContext(Context, State);
		EnterRule(_localctx, 500, RULE_updateOrDelete);
		try {
			State = 3013;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_UPDATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3010;
				Match(KW_UPDATE);
				State = 3011;
				setColumnsClause();
				}
				break;
			case KW_DELETE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3012;
				Match(KW_DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillQueryStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_KILL() { return GetToken(HiveParser.KW_KILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_QUERY() { return GetToken(HiveParser.KW_QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(HiveParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(HiveParser.StringLiteral, i);
		}
		public KillQueryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killQueryStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterKillQueryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitKillQueryStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillQueryStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillQueryStatementContext killQueryStatement() {
		KillQueryStatementContext _localctx = new KillQueryStatementContext(Context, State);
		EnterRule(_localctx, 502, RULE_killQueryStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3015;
			Match(KW_KILL);
			State = 3016;
			Match(KW_QUERY);
			State = 3018;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3017;
				Match(StringLiteral);
				}
				}
				State = 3020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==StringLiteral );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SELECT() { return GetToken(HiveParser.KW_SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_HINT() { return GetToken(HiveParser.QUERY_HINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectListContext selectList() {
			return GetRuleContext<SelectListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRANSFORM() { return GetToken(HiveParser.KW_TRANSFORM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectTrfmClauseContext selectTrfmClause() {
			return GetRuleContext<SelectTrfmClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(HiveParser.KW_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISTINCT() { return GetToken(HiveParser.KW_DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TrfmClauseContext trfmClause() {
			return GetRuleContext<TrfmClauseContext>(0);
		}
		public SelectClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectClauseContext selectClause() {
		SelectClauseContext _localctx = new SelectClauseContext(Context, State);
		EnterRule(_localctx, 504, RULE_selectClause);
		int _la;
		try {
			State = 3035;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3022;
				Match(KW_SELECT);
				State = 3024;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QUERY_HINT) {
					{
					State = 3023;
					Match(QUERY_HINT);
					}
				}

				State = 3032;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_TRUE:
				case KW_FALSE:
				case KW_ALL:
				case KW_NOT:
				case KW_IF:
				case KW_EXISTS:
				case KW_ASC:
				case KW_DESC:
				case KW_NULLS:
				case KW_LAST:
				case KW_DISTINCT:
				case KW_OVERWRITE:
				case KW_PARTITIONS:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_LOAD:
				case KW_EXPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_NULL:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_AFTER:
				case KW_RENAME:
				case KW_COMMENT:
				case KW_BOOLEAN:
				case KW_TINYINT:
				case KW_SMALLINT:
				case KW_INT:
				case KW_BIGINT:
				case KW_FLOAT:
				case KW_DOUBLE:
				case KW_DATE:
				case KW_DATETIME:
				case KW_TIMESTAMP:
				case KW_TIMESTAMPLOCALTZ:
				case KW_ZONE:
				case KW_INTERVAL:
				case KW_STRING:
				case KW_ARRAY:
				case KW_STRUCT:
				case KW_MAP:
				case KW_UNIONTYPE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_BUCKETS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_LOCATION:
				case KW_BUCKET:
				case KW_CAST:
				case KW_ADD:
				case KW_REPLACE:
				case KW_TEMPORARY:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_CASE:
				case KW_MAPJOIN:
				case KW_STREAMTABLE:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_PLUS:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_PURGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_BINARY:
				case KW_CONTINUE:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_DIRECTORIES:
				case KW_CURRENT_DATE:
				case KW_CURRENT_TIMESTAMP:
				case KW_GROUPING:
				case KW_SETS:
				case KW_NOSCAN:
				case KW_ROLE:
				case KW_ROLES:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_REOPTIMIZATION:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_QUERY:
				case KW_QUARTER:
				case KW_MONTH:
				case KW_WEEK:
				case KW_DAY:
				case KW_DOW:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_TRANSACTION:
				case KW_WORK:
				case KW_WRITE:
				case KW_ISOLATION:
				case KW_LEVEL:
				case KW_SNAPSHOT:
				case KW_AUTOCOMMIT:
				case KW_CACHE:
				case KW_ENFORCED:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_KEY:
				case KW_ABORT:
				case KW_EXTRACT:
				case KW_FLOOR:
				case KW_MATCHED:
				case KW_REPL:
				case KW_DUMP:
				case KW_STATUS:
				case KW_VECTORIZATION:
				case KW_SUMMARY:
				case KW_OPERATOR:
				case KW_EXPRESSION:
				case KW_DETAIL:
				case KW_WAIT:
				case KW_RESOURCE:
				case KW_PLAN:
				case KW_QUERY_PARALLELISM:
				case KW_PLANS:
				case KW_ACTIVATE:
				case KW_DEFAULT:
				case KW_CHECK:
				case KW_POOL:
				case KW_MOVE:
				case KW_DO:
				case KW_ALLOC_FRACTION:
				case KW_SCHEDULING_POLICY:
				case KW_PATH:
				case KW_MAPPING:
				case KW_WORKLOAD:
				case KW_MANAGEMENT:
				case KW_ACTIVE:
				case KW_UNMANAGED:
				case LPAREN:
				case PLUS:
				case MINUS:
				case STAR:
				case TILDE:
				case StringLiteral:
				case IntegralLiteral:
				case NumberLiteral:
				case Number:
				case Identifier:
				case CharSetName:
					{
					{
					State = 3027;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==KW_ALL || _la==KW_DISTINCT) {
						{
						State = 3026;
						_la = TokenStream.LA(1);
						if ( !(_la==KW_ALL || _la==KW_DISTINCT) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
					}

					State = 3029;
					selectList();
					}
					}
					break;
				case KW_TRANSFORM:
					{
					{
					State = 3030;
					Match(KW_TRANSFORM);
					State = 3031;
					selectTrfmClause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KW_MAP:
			case KW_REDUCE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3034;
				trfmClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext[] selectItem() {
			return GetRuleContexts<SelectItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext selectItem(int i) {
			return GetRuleContext<SelectItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSelectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSelectList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectListContext selectList() {
		SelectListContext _localctx = new SelectListContext(Context, State);
		EnterRule(_localctx, 506, RULE_selectList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3037;
			selectItem();
			State = 3042;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,352,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3038;
					Match(COMMA);
					State = 3039;
					selectItem();
					}
					} 
				}
				State = 3044;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,352,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectTrfmClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(HiveParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(HiveParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectExpressionListContext selectExpressionList() {
			return GetRuleContext<SelectExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(HiveParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(HiveParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USING() { return GetToken(HiveParser.KW_USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowFormatContext[] rowFormat() {
			return GetRuleContexts<RowFormatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowFormatContext rowFormat(int i) {
			return GetRuleContext<RowFormatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordWriterContext recordWriter() {
			return GetRuleContext<RecordWriterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordReaderContext recordReader() {
			return GetRuleContext<RecordReaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AliasListContext aliasList() {
			return GetRuleContext<AliasListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeListContext columnNameTypeList() {
			return GetRuleContext<ColumnNameTypeListContext>(0);
		}
		public SelectTrfmClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectTrfmClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSelectTrfmClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSelectTrfmClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectTrfmClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectTrfmClauseContext selectTrfmClause() {
		SelectTrfmClauseContext _localctx = new SelectTrfmClauseContext(Context, State);
		EnterRule(_localctx, 508, RULE_selectTrfmClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3045;
			Match(LPAREN);
			State = 3046;
			selectExpressionList();
			State = 3047;
			Match(RPAREN);
			State = 3049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ROW) {
				{
				State = 3048;
				rowFormat();
				}
			}

			State = 3052;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RECORDWRITER) {
				{
				State = 3051;
				recordWriter();
				}
			}

			State = 3054;
			Match(KW_USING);
			State = 3055;
			Match(StringLiteral);
			State = 3070;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AS) {
				{
				State = 3056;
				Match(KW_AS);
				State = 3068;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					{
					State = 3057;
					Match(LPAREN);
					State = 3060;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,355,Context) ) {
					case 1:
						{
						State = 3058;
						aliasList();
						}
						break;
					case 2:
						{
						State = 3059;
						columnNameTypeList();
						}
						break;
					}
					State = 3062;
					Match(RPAREN);
					}
					}
					break;
				case KW_ASC:
				case KW_DESC:
				case KW_NULLS:
				case KW_LAST:
				case KW_OVERWRITE:
				case KW_PARTITIONS:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_LOAD:
				case KW_EXPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_AFTER:
				case KW_RENAME:
				case KW_COMMENT:
				case KW_TINYINT:
				case KW_DATETIME:
				case KW_ZONE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_UNIONTYPE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_BUCKETS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_LOCATION:
				case KW_BUCKET:
				case KW_ADD:
				case KW_REPLACE:
				case KW_TEMPORARY:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_STREAMTABLE:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_PLUS:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_PURGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_CONTINUE:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_DIRECTORIES:
				case KW_SETS:
				case KW_NOSCAN:
				case KW_ROLE:
				case KW_ROLES:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_REOPTIMIZATION:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_QUERY:
				case KW_QUARTER:
				case KW_MONTH:
				case KW_WEEK:
				case KW_DAY:
				case KW_DOW:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_TRANSACTION:
				case KW_WORK:
				case KW_WRITE:
				case KW_ISOLATION:
				case KW_LEVEL:
				case KW_SNAPSHOT:
				case KW_AUTOCOMMIT:
				case KW_CACHE:
				case KW_ENFORCED:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_KEY:
				case KW_ABORT:
				case KW_MATCHED:
				case KW_REPL:
				case KW_DUMP:
				case KW_STATUS:
				case KW_VECTORIZATION:
				case KW_SUMMARY:
				case KW_OPERATOR:
				case KW_EXPRESSION:
				case KW_DETAIL:
				case KW_WAIT:
				case KW_RESOURCE:
				case KW_PLAN:
				case KW_QUERY_PARALLELISM:
				case KW_PLANS:
				case KW_ACTIVATE:
				case KW_DEFAULT:
				case KW_CHECK:
				case KW_POOL:
				case KW_MOVE:
				case KW_DO:
				case KW_ALLOC_FRACTION:
				case KW_SCHEDULING_POLICY:
				case KW_PATH:
				case KW_MAPPING:
				case KW_WORKLOAD:
				case KW_MANAGEMENT:
				case KW_ACTIVE:
				case KW_UNMANAGED:
				case Identifier:
					{
					State = 3066;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
					case 1:
						{
						State = 3064;
						aliasList();
						}
						break;
					case 2:
						{
						State = 3065;
						columnNameTypeList();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 3073;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ROW) {
				{
				State = 3072;
				rowFormat();
				}
			}

			State = 3076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RECORDREADER) {
				{
				State = 3075;
				recordReader();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableAllColumnsContext tableAllColumns() {
			return GetRuleContext<TableAllColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSelectItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSelectItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectItem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemContext selectItem() {
		SelectItemContext _localctx = new SelectItemContext(Context, State);
		EnterRule(_localctx, 510, RULE_selectItem);
		int _la;
		try {
			State = 3098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,364,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3078;
				tableAllColumns();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 3079;
				expression(0);
				State = 3096;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
				case 1:
					{
					{
					State = 3081;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==KW_AS) {
						{
						State = 3080;
						Match(KW_AS);
						}
					}

					State = 3083;
					identifier();
					}
					}
					break;
				case 2:
					{
					{
					State = 3084;
					Match(KW_AS);
					State = 3085;
					Match(LPAREN);
					State = 3086;
					identifier();
					State = 3091;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3087;
						Match(COMMA);
						State = 3088;
						identifier();
						}
						}
						State = 3093;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 3094;
					Match(RPAREN);
					}
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrfmClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USING() { return GetToken(HiveParser.KW_USING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAP() { return GetToken(HiveParser.KW_MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectExpressionListContext selectExpressionList() {
			return GetRuleContext<SelectExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REDUCE() { return GetToken(HiveParser.KW_REDUCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowFormatContext[] rowFormat() {
			return GetRuleContexts<RowFormatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowFormatContext rowFormat(int i) {
			return GetRuleContext<RowFormatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecordWriterContext recordWriter() {
			return GetRuleContext<RecordWriterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecordReaderContext recordReader() {
			return GetRuleContext<RecordReaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AliasListContext aliasList() {
			return GetRuleContext<AliasListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameTypeListContext columnNameTypeList() {
			return GetRuleContext<ColumnNameTypeListContext>(0);
		}
		public TrfmClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trfmClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTrfmClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTrfmClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrfmClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TrfmClauseContext trfmClause() {
		TrfmClauseContext _localctx = new TrfmClauseContext(Context, State);
		EnterRule(_localctx, 512, RULE_trfmClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_MAP:
				{
				State = 3100;
				Match(KW_MAP);
				State = 3101;
				selectExpressionList();
				}
				break;
			case KW_REDUCE:
				{
				State = 3102;
				Match(KW_REDUCE);
				State = 3103;
				selectExpressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ROW) {
				{
				State = 3106;
				rowFormat();
				}
			}

			State = 3110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RECORDWRITER) {
				{
				State = 3109;
				recordWriter();
				}
			}

			State = 3112;
			Match(KW_USING);
			State = 3113;
			Match(StringLiteral);
			State = 3128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AS) {
				{
				State = 3114;
				Match(KW_AS);
				State = 3126;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LPAREN:
					{
					{
					State = 3115;
					Match(LPAREN);
					State = 3118;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
					case 1:
						{
						State = 3116;
						aliasList();
						}
						break;
					case 2:
						{
						State = 3117;
						columnNameTypeList();
						}
						break;
					}
					State = 3120;
					Match(RPAREN);
					}
					}
					break;
				case KW_ASC:
				case KW_DESC:
				case KW_NULLS:
				case KW_LAST:
				case KW_OVERWRITE:
				case KW_PARTITIONS:
				case KW_TABLES:
				case KW_COLUMNS:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_REBUILD:
				case KW_FUNCTIONS:
				case KW_SHOW:
				case KW_MSCK:
				case KW_REPAIR:
				case KW_DIRECTORY:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_LOAD:
				case KW_EXPORT:
				case KW_REPLICATION:
				case KW_METADATA:
				case KW_DATA:
				case KW_INPATH:
				case KW_CHANGE:
				case KW_FIRST:
				case KW_AFTER:
				case KW_RENAME:
				case KW_COMMENT:
				case KW_TINYINT:
				case KW_DATETIME:
				case KW_ZONE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_UNIONTYPE:
				case KW_PARTITIONED:
				case KW_CLUSTERED:
				case KW_SORTED:
				case KW_BUCKETS:
				case KW_FORMAT:
				case KW_DELIMITED:
				case KW_FIELDS:
				case KW_TERMINATED:
				case KW_ESCAPED:
				case KW_COLLECTION:
				case KW_ITEMS:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_KILL:
				case KW_LINES:
				case KW_STORED:
				case KW_FILEFORMAT:
				case KW_INPUTFORMAT:
				case KW_OUTPUTFORMAT:
				case KW_INPUTDRIVER:
				case KW_OUTPUTDRIVER:
				case KW_ENABLE:
				case KW_DISABLE:
				case KW_LOCATION:
				case KW_BUCKET:
				case KW_ADD:
				case KW_REPLACE:
				case KW_TEMPORARY:
				case KW_FILE:
				case KW_JAR:
				case KW_EXPLAIN:
				case KW_FORMATTED:
				case KW_DEPENDENCY:
				case KW_LOGICAL:
				case KW_SERDE:
				case KW_DEFERRED:
				case KW_SERDEPROPERTIES:
				case KW_DBPROPERTIES:
				case KW_LIMIT:
				case KW_OFFSET:
				case KW_UNSET:
				case KW_TBLPROPERTIES:
				case KW_IDXPROPERTIES:
				case KW_VALUE_TYPE:
				case KW_ELEM_TYPE:
				case KW_DEFINED:
				case KW_MAPJOIN:
				case KW_STREAMTABLE:
				case KW_CLUSTERSTATUS:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_LONG:
				case KW_PLUS:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_DATABASES:
				case KW_MATERIALIZED:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SSL:
				case KW_UNDO:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_UNLOCK:
				case KW_SHARED:
				case KW_EXCLUSIVE:
				case KW_UNSIGNED:
				case KW_WHILE:
				case KW_READ:
				case KW_PURGE:
				case KW_ANALYZE:
				case KW_BEFORE:
				case KW_CONTINUE:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_SEMI:
				case KW_TOUCH:
				case KW_ARCHIVE:
				case KW_UNARCHIVE:
				case KW_COMPUTE:
				case KW_STATISTICS:
				case KW_USE:
				case KW_OPTION:
				case KW_CONCATENATE:
				case KW_SHOW_DATABASE:
				case KW_RESTRICT:
				case KW_CASCADE:
				case KW_SKEWED:
				case KW_DIRECTORIES:
				case KW_SETS:
				case KW_NOSCAN:
				case KW_ROLE:
				case KW_ROLES:
				case KW_URI:
				case KW_SERVER:
				case KW_ADMIN:
				case KW_OWNER:
				case KW_PRINCIPALS:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_TRANSACTIONS:
				case KW_REWRITE:
				case KW_REOPTIMIZATION:
				case KW_RELOAD:
				case KW_YEAR:
				case KW_QUERY:
				case KW_QUARTER:
				case KW_MONTH:
				case KW_WEEK:
				case KW_DAY:
				case KW_DOW:
				case KW_HOUR:
				case KW_MINUTE:
				case KW_SECOND:
				case KW_TRANSACTION:
				case KW_WORK:
				case KW_WRITE:
				case KW_ISOLATION:
				case KW_LEVEL:
				case KW_SNAPSHOT:
				case KW_AUTOCOMMIT:
				case KW_CACHE:
				case KW_ENFORCED:
				case KW_VALIDATE:
				case KW_NOVALIDATE:
				case KW_RELY:
				case KW_NORELY:
				case KW_KEY:
				case KW_ABORT:
				case KW_MATCHED:
				case KW_REPL:
				case KW_DUMP:
				case KW_STATUS:
				case KW_VECTORIZATION:
				case KW_SUMMARY:
				case KW_OPERATOR:
				case KW_EXPRESSION:
				case KW_DETAIL:
				case KW_WAIT:
				case KW_RESOURCE:
				case KW_PLAN:
				case KW_QUERY_PARALLELISM:
				case KW_PLANS:
				case KW_ACTIVATE:
				case KW_DEFAULT:
				case KW_CHECK:
				case KW_POOL:
				case KW_MOVE:
				case KW_DO:
				case KW_ALLOC_FRACTION:
				case KW_SCHEDULING_POLICY:
				case KW_PATH:
				case KW_MAPPING:
				case KW_WORKLOAD:
				case KW_MANAGEMENT:
				case KW_ACTIVE:
				case KW_UNMANAGED:
				case Identifier:
					{
					State = 3124;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
					case 1:
						{
						State = 3122;
						aliasList();
						}
						break;
					case 2:
						{
						State = 3123;
						columnNameTypeList();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			State = 3131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ROW) {
				{
				State = 3130;
				rowFormat();
				}
			}

			State = 3134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_RECORDREADER) {
				{
				State = 3133;
				recordReader();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableAllColumnsContext tableAllColumns() {
			return GetRuleContext<TableAllColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSelectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSelectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExpressionContext selectExpression() {
		SelectExpressionContext _localctx = new SelectExpressionContext(Context, State);
		EnterRule(_localctx, 514, RULE_selectExpression);
		try {
			State = 3138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,374,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3136;
				tableAllColumns();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3137;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectExpressionContext[] selectExpression() {
			return GetRuleContexts<SelectExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectExpressionContext selectExpression(int i) {
			return GetRuleContext<SelectExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public SelectExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectExpressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSelectExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSelectExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectExpressionListContext selectExpressionList() {
		SelectExpressionListContext _localctx = new SelectExpressionListContext(Context, State);
		EnterRule(_localctx, 516, RULE_selectExpressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3140;
			selectExpression();
			State = 3145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3141;
				Match(COMMA);
				State = 3142;
				selectExpression();
				}
				}
				State = 3147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WINDOW() { return GetToken(HiveParser.KW_WINDOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_defnContext[] window_defn() {
			return GetRuleContexts<Window_defnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_defnContext window_defn(int i) {
			return GetRuleContext<Window_defnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public Window_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWindow_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_clauseContext window_clause() {
		Window_clauseContext _localctx = new Window_clauseContext(Context, State);
		EnterRule(_localctx, 518, RULE_window_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3148;
			Match(KW_WINDOW);
			State = 3149;
			window_defn();
			State = 3154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3150;
				Match(COMMA);
				State = 3151;
				window_defn();
				}
				}
				State = 3156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_defnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		public Window_defnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_defn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWindow_defn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWindow_defn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_defn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_defnContext window_defn() {
		Window_defnContext _localctx = new Window_defnContext(Context, State);
		EnterRule(_localctx, 520, RULE_window_defn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3157;
			identifier();
			State = 3158;
			Match(KW_AS);
			State = 3159;
			window_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_specificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitioningSpecContext partitioningSpec() {
			return GetRuleContext<PartitioningSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frameContext window_frame() {
			return GetRuleContext<Window_frameContext>(0);
		}
		public Window_specificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_specification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWindow_specification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_specification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_specificationContext window_specification() {
		Window_specificationContext _localctx = new Window_specificationContext(Context, State);
		EnterRule(_localctx, 522, RULE_window_specification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ASC:
			case KW_DESC:
			case KW_NULLS:
			case KW_LAST:
			case KW_OVERWRITE:
			case KW_PARTITIONS:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_AFTER:
			case KW_RENAME:
			case KW_COMMENT:
			case KW_TINYINT:
			case KW_DATETIME:
			case KW_ZONE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_UNIONTYPE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_BUCKETS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_LOCATION:
			case KW_BUCKET:
			case KW_ADD:
			case KW_REPLACE:
			case KW_TEMPORARY:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_STREAMTABLE:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_PLUS:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_PURGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_CONTINUE:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_DIRECTORIES:
			case KW_SETS:
			case KW_NOSCAN:
			case KW_ROLE:
			case KW_ROLES:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_QUERY:
			case KW_QUARTER:
			case KW_MONTH:
			case KW_WEEK:
			case KW_DAY:
			case KW_DOW:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_TRANSACTION:
			case KW_WORK:
			case KW_WRITE:
			case KW_ISOLATION:
			case KW_LEVEL:
			case KW_SNAPSHOT:
			case KW_AUTOCOMMIT:
			case KW_CACHE:
			case KW_ENFORCED:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_KEY:
			case KW_ABORT:
			case KW_MATCHED:
			case KW_REPL:
			case KW_DUMP:
			case KW_STATUS:
			case KW_VECTORIZATION:
			case KW_SUMMARY:
			case KW_OPERATOR:
			case KW_EXPRESSION:
			case KW_DETAIL:
			case KW_WAIT:
			case KW_RESOURCE:
			case KW_PLAN:
			case KW_QUERY_PARALLELISM:
			case KW_PLANS:
			case KW_ACTIVATE:
			case KW_DEFAULT:
			case KW_CHECK:
			case KW_POOL:
			case KW_MOVE:
			case KW_DO:
			case KW_ALLOC_FRACTION:
			case KW_SCHEDULING_POLICY:
			case KW_PATH:
			case KW_MAPPING:
			case KW_WORKLOAD:
			case KW_MANAGEMENT:
			case KW_ACTIVE:
			case KW_UNMANAGED:
			case Identifier:
				{
				State = 3161;
				identifier();
				}
				break;
			case LPAREN:
				{
				{
				State = 3162;
				Match(LPAREN);
				State = 3164;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
				case 1:
					{
					State = 3163;
					identifier();
					}
					break;
				}
				State = 3167;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ORDER) | (1L << KW_PARTITION) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT))) != 0)) {
					{
					State = 3166;
					partitioningSpec();
					}
				}

				State = 3170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_ROWS || _la==KW_RANGE) {
					{
					State = 3169;
					window_frame();
					}
				}

				State = 3172;
				Match(RPAREN);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Window_range_expressionContext window_range_expression() {
			return GetRuleContext<Window_range_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_value_expressionContext window_value_expression() {
			return GetRuleContext<Window_value_expressionContext>(0);
		}
		public Window_frameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frameContext window_frame() {
		Window_frameContext _localctx = new Window_frameContext(Context, State);
		EnterRule(_localctx, 524, RULE_window_frame);
		try {
			State = 3177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ROWS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3175;
				window_range_expression();
				}
				break;
			case KW_RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3176;
				window_value_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_range_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROWS() { return GetToken(HiveParser.KW_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_start_boundaryContext window_frame_start_boundary() {
			return GetRuleContext<Window_frame_start_boundaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BETWEEN() { return GetToken(HiveParser.KW_BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundaryContext[] window_frame_boundary() {
			return GetRuleContexts<Window_frame_boundaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundaryContext window_frame_boundary(int i) {
			return GetRuleContext<Window_frame_boundaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AND() { return GetToken(HiveParser.KW_AND, 0); }
		public Window_range_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_range_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWindow_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWindow_range_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_range_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_range_expressionContext window_range_expression() {
		Window_range_expressionContext _localctx = new Window_range_expressionContext(Context, State);
		EnterRule(_localctx, 526, RULE_window_range_expression);
		try {
			State = 3187;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3179;
				Match(KW_ROWS);
				State = 3180;
				window_frame_start_boundary();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3181;
				Match(KW_ROWS);
				State = 3182;
				Match(KW_BETWEEN);
				State = 3183;
				window_frame_boundary();
				State = 3184;
				Match(KW_AND);
				State = 3185;
				window_frame_boundary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_value_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RANGE() { return GetToken(HiveParser.KW_RANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_start_boundaryContext window_frame_start_boundary() {
			return GetRuleContext<Window_frame_start_boundaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BETWEEN() { return GetToken(HiveParser.KW_BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundaryContext[] window_frame_boundary() {
			return GetRuleContexts<Window_frame_boundaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Window_frame_boundaryContext window_frame_boundary(int i) {
			return GetRuleContext<Window_frame_boundaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AND() { return GetToken(HiveParser.KW_AND, 0); }
		public Window_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_value_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWindow_value_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWindow_value_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_value_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_value_expressionContext window_value_expression() {
		Window_value_expressionContext _localctx = new Window_value_expressionContext(Context, State);
		EnterRule(_localctx, 528, RULE_window_value_expression);
		try {
			State = 3197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,383,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3189;
				Match(KW_RANGE);
				State = 3190;
				window_frame_start_boundary();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3191;
				Match(KW_RANGE);
				State = 3192;
				Match(KW_BETWEEN);
				State = 3193;
				window_frame_boundary();
				State = 3194;
				Match(KW_AND);
				State = 3195;
				window_frame_boundary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_start_boundaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNBOUNDED() { return GetToken(HiveParser.KW_UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRECEDING() { return GetToken(HiveParser.KW_PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CURRENT() { return GetToken(HiveParser.KW_CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROW() { return GetToken(HiveParser.KW_ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(HiveParser.Number, 0); }
		public Window_frame_start_boundaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_start_boundary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_start_boundary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_start_boundary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_start_boundary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_start_boundaryContext window_frame_start_boundary() {
		Window_frame_start_boundaryContext _localctx = new Window_frame_start_boundaryContext(Context, State);
		EnterRule(_localctx, 530, RULE_window_frame_start_boundary);
		try {
			State = 3205;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3199;
				Match(KW_UNBOUNDED);
				State = 3200;
				Match(KW_PRECEDING);
				}
				break;
			case KW_CURRENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3201;
				Match(KW_CURRENT);
				State = 3202;
				Match(KW_ROW);
				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3203;
				Match(Number);
				State = 3204;
				Match(KW_PRECEDING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Window_frame_boundaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNBOUNDED() { return GetToken(HiveParser.KW_UNBOUNDED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRECEDING() { return GetToken(HiveParser.KW_PRECEDING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FOLLOWING() { return GetToken(HiveParser.KW_FOLLOWING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CURRENT() { return GetToken(HiveParser.KW_CURRENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROW() { return GetToken(HiveParser.KW_ROW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(HiveParser.Number, 0); }
		public Window_frame_boundaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_window_frame_boundary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWindow_frame_boundary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWindow_frame_boundary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWindow_frame_boundary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Window_frame_boundaryContext window_frame_boundary() {
		Window_frame_boundaryContext _localctx = new Window_frame_boundaryContext(Context, State);
		EnterRule(_localctx, 532, RULE_window_frame_boundary);
		int _la;
		try {
			State = 3213;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_UNBOUNDED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3207;
				Match(KW_UNBOUNDED);
				State = 3208;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_PRECEDING || _la==KW_FOLLOWING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case KW_CURRENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3209;
				Match(KW_CURRENT);
				State = 3210;
				Match(KW_ROW);
				}
				break;
			case Number:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3211;
				Match(Number);
				State = 3212;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_PRECEDING || _la==KW_FOLLOWING) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAllColumnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(HiveParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(HiveParser.DOT, 0); }
		public TableAllColumnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAllColumns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableAllColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableAllColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAllColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAllColumnsContext tableAllColumns() {
		TableAllColumnsContext _localctx = new TableAllColumnsContext(Context, State);
		EnterRule(_localctx, 534, RULE_tableAllColumns);
		try {
			State = 3220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3215;
				Match(STAR);
				}
				break;
			case KW_ASC:
			case KW_DESC:
			case KW_NULLS:
			case KW_LAST:
			case KW_OVERWRITE:
			case KW_PARTITIONS:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_AFTER:
			case KW_RENAME:
			case KW_COMMENT:
			case KW_TINYINT:
			case KW_DATETIME:
			case KW_ZONE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_UNIONTYPE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_BUCKETS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_LOCATION:
			case KW_BUCKET:
			case KW_ADD:
			case KW_REPLACE:
			case KW_TEMPORARY:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_STREAMTABLE:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_PLUS:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_PURGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_CONTINUE:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_DIRECTORIES:
			case KW_SETS:
			case KW_NOSCAN:
			case KW_ROLE:
			case KW_ROLES:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_QUERY:
			case KW_QUARTER:
			case KW_MONTH:
			case KW_WEEK:
			case KW_DAY:
			case KW_DOW:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_TRANSACTION:
			case KW_WORK:
			case KW_WRITE:
			case KW_ISOLATION:
			case KW_LEVEL:
			case KW_SNAPSHOT:
			case KW_AUTOCOMMIT:
			case KW_CACHE:
			case KW_ENFORCED:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_KEY:
			case KW_ABORT:
			case KW_MATCHED:
			case KW_REPL:
			case KW_DUMP:
			case KW_STATUS:
			case KW_VECTORIZATION:
			case KW_SUMMARY:
			case KW_OPERATOR:
			case KW_EXPRESSION:
			case KW_DETAIL:
			case KW_WAIT:
			case KW_RESOURCE:
			case KW_PLAN:
			case KW_QUERY_PARALLELISM:
			case KW_PLANS:
			case KW_ACTIVATE:
			case KW_DEFAULT:
			case KW_CHECK:
			case KW_POOL:
			case KW_MOVE:
			case KW_DO:
			case KW_ALLOC_FRACTION:
			case KW_SCHEDULING_POLICY:
			case KW_PATH:
			case KW_MAPPING:
			case KW_WORKLOAD:
			case KW_MANAGEMENT:
			case KW_ACTIVE:
			case KW_UNMANAGED:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3216;
				tableName();
				State = 3217;
				Match(DOT);
				State = 3218;
				Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableOrColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TableOrColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableOrColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableOrColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableOrColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOrColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableOrColumnContext tableOrColumn() {
		TableOrColumnContext _localctx = new TableOrColumnContext(Context, State);
		EnterRule(_localctx, 536, RULE_tableOrColumn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3222;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 538, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3224;
			expression(0);
			State = 3229;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3225;
				Match(COMMA);
				State = 3226;
				expression(0);
				}
				}
				State = 3231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public AliasListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAliasList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAliasList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAliasList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AliasListContext aliasList() {
		AliasListContext _localctx = new AliasListContext(Context, State);
		EnterRule(_localctx, 540, RULE_aliasList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3232;
			identifier();
			State = 3237;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,388,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3233;
					Match(COMMA);
					State = 3234;
					identifier();
					}
					} 
				}
				State = 3239;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,388,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FROM() { return GetToken(HiveParser.KW_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromSourceContext fromSource() {
			return GetRuleContext<FromSourceContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 542, RULE_fromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3240;
			Match(KW_FROM);
			State = 3241;
			fromSource();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UniqueJoinTokenContext uniqueJoinToken() {
			return GetRuleContext<UniqueJoinTokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniqueJoinSourceContext[] uniqueJoinSource() {
			return GetRuleContexts<UniqueJoinSourceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniqueJoinSourceContext uniqueJoinSource(int i) {
			return GetRuleContext<UniqueJoinSourceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinSourceContext joinSource() {
			return GetRuleContext<JoinSourceContext>(0);
		}
		public FromSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterFromSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitFromSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFromSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromSourceContext fromSource() {
		FromSourceContext _localctx = new FromSourceContext(Context, State);
		EnterRule(_localctx, 544, RULE_fromSource);
		int _la;
		try {
			State = 3252;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_UNIQUEJOIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3243;
				uniqueJoinToken();
				State = 3244;
				uniqueJoinSource();
				State = 3247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 3245;
					Match(COMMA);
					State = 3246;
					uniqueJoinSource();
					}
					}
					State = 3249;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				}
				break;
			case KW_ASC:
			case KW_DESC:
			case KW_NULLS:
			case KW_LAST:
			case KW_OVERWRITE:
			case KW_PARTITIONS:
			case KW_TABLE:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_AFTER:
			case KW_RENAME:
			case KW_COMMENT:
			case KW_TINYINT:
			case KW_DATETIME:
			case KW_ZONE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_UNIONTYPE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_BUCKETS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_LOCATION:
			case KW_BUCKET:
			case KW_ADD:
			case KW_REPLACE:
			case KW_TEMPORARY:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_STREAMTABLE:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_PLUS:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_PURGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_CONTINUE:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_DIRECTORIES:
			case KW_SETS:
			case KW_NOSCAN:
			case KW_ROLE:
			case KW_ROLES:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_QUERY:
			case KW_QUARTER:
			case KW_MONTH:
			case KW_WEEK:
			case KW_DAY:
			case KW_DOW:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_TRANSACTION:
			case KW_WORK:
			case KW_WRITE:
			case KW_ISOLATION:
			case KW_LEVEL:
			case KW_SNAPSHOT:
			case KW_AUTOCOMMIT:
			case KW_CACHE:
			case KW_ENFORCED:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_KEY:
			case KW_ABORT:
			case KW_MATCHED:
			case KW_REPL:
			case KW_DUMP:
			case KW_STATUS:
			case KW_VECTORIZATION:
			case KW_SUMMARY:
			case KW_OPERATOR:
			case KW_EXPRESSION:
			case KW_DETAIL:
			case KW_WAIT:
			case KW_RESOURCE:
			case KW_PLAN:
			case KW_QUERY_PARALLELISM:
			case KW_PLANS:
			case KW_ACTIVATE:
			case KW_DEFAULT:
			case KW_CHECK:
			case KW_POOL:
			case KW_MOVE:
			case KW_DO:
			case KW_ALLOC_FRACTION:
			case KW_SCHEDULING_POLICY:
			case KW_PATH:
			case KW_MAPPING:
			case KW_WORKLOAD:
			case KW_MANAGEMENT:
			case KW_ACTIVE:
			case KW_UNMANAGED:
			case LPAREN:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3251;
				joinSource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomjoinSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LateralViewContext[] lateralView() {
			return GetRuleContexts<LateralViewContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LateralViewContext lateralView(int i) {
			return GetRuleContext<LateralViewContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtualTableSourceContext virtualTableSource() {
			return GetRuleContext<VirtualTableSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubQuerySourceContext subQuerySource() {
			return GetRuleContext<SubQuerySourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionedTableFunctionContext partitionedTableFunction() {
			return GetRuleContext<PartitionedTableFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinSourceContext joinSource() {
			return GetRuleContext<JoinSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public AtomjoinSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomjoinSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAtomjoinSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAtomjoinSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomjoinSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomjoinSourceContext atomjoinSource() {
		AtomjoinSourceContext _localctx = new AtomjoinSourceContext(Context, State);
		EnterRule(_localctx, 546, RULE_atomjoinSource);
		try {
			int _alt;
			State = 3286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,395,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3254;
				tableSource();
				State = 3258;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,391,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3255;
						lateralView();
						}
						} 
					}
					State = 3260;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,391,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3261;
				virtualTableSource();
				State = 3265;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,392,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3262;
						lateralView();
						}
						} 
					}
					State = 3267;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,392,Context);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3268;
				subQuerySource();
				State = 3272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,393,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3269;
						lateralView();
						}
						} 
					}
					State = 3274;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,393,Context);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3275;
				partitionedTableFunction();
				State = 3279;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,394,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3276;
						lateralView();
						}
						} 
					}
					State = 3281;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,394,Context);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3282;
				Match(LPAREN);
				State = 3283;
				joinSource();
				State = 3284;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomjoinSourceContext atomjoinSource() {
			return GetRuleContext<AtomjoinSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinTokenContext[] joinToken() {
			return GetRuleContexts<JoinTokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinTokenContext joinToken(int i) {
			return GetRuleContext<JoinTokenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinSourcePartContext[] joinSourcePart() {
			return GetRuleContexts<JoinSourcePartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinSourcePartContext joinSourcePart(int i) {
			return GetRuleContext<JoinSourcePartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_ON() { return GetTokens(HiveParser.KW_ON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON(int i) {
			return GetToken(HiveParser.KW_ON, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_USING() { return GetTokens(HiveParser.KW_USING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USING(int i) {
			return GetToken(HiveParser.KW_USING, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnParenthesesListContext[] columnParenthesesList() {
			return GetRuleContexts<ColumnParenthesesListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnParenthesesListContext columnParenthesesList(int i) {
			return GetRuleContext<ColumnParenthesesListContext>(i);
		}
		public JoinSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterJoinSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitJoinSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinSourceContext joinSource() {
		JoinSourceContext _localctx = new JoinSourceContext(Context, State);
		EnterRule(_localctx, 548, RULE_joinSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3288;
			atomjoinSource();
			State = 3299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_JOIN) | (1L << KW_LEFT) | (1L << KW_RIGHT) | (1L << KW_FULL))) != 0) || _la==KW_CROSS || _la==KW_INNER || _la==COMMA) {
				{
				{
				State = 3289;
				joinToken();
				State = 3290;
				joinSourcePart();
				State = 3295;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case KW_ON:
					{
					State = 3291;
					Match(KW_ON);
					State = 3292;
					expression(0);
					}
					break;
				case KW_USING:
					{
					State = 3293;
					Match(KW_USING);
					State = 3294;
					columnParenthesesList();
					}
					break;
				case KW_ORDER:
				case KW_GROUP:
				case KW_HAVING:
				case KW_WHERE:
				case KW_SELECT:
				case KW_INSERT:
				case KW_JOIN:
				case KW_LEFT:
				case KW_RIGHT:
				case KW_FULL:
				case KW_CLUSTER:
				case KW_DISTRIBUTE:
				case KW_SORT:
				case KW_UNION:
				case KW_EXCEPT:
				case KW_MAP:
				case KW_REDUCE:
				case KW_LIMIT:
				case KW_MINUS:
				case KW_INTERSECT:
				case KW_CROSS:
				case KW_WINDOW:
				case KW_INNER:
				case COMMA:
				case SEMICOLON:
				case RPAREN:
					break;
				default:
					break;
				}
				}
				}
				State = 3301;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinSourcePartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VirtualTableSourceContext virtualTableSource() {
			return GetRuleContext<VirtualTableSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubQuerySourceContext subQuerySource() {
			return GetRuleContext<SubQuerySourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionedTableFunctionContext partitionedTableFunction() {
			return GetRuleContext<PartitionedTableFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LateralViewContext[] lateralView() {
			return GetRuleContexts<LateralViewContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LateralViewContext lateralView(int i) {
			return GetRuleContext<LateralViewContext>(i);
		}
		public JoinSourcePartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinSourcePart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterJoinSourcePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitJoinSourcePart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinSourcePart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinSourcePartContext joinSourcePart() {
		JoinSourcePartContext _localctx = new JoinSourcePartContext(Context, State);
		EnterRule(_localctx, 550, RULE_joinSourcePart);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,398,Context) ) {
			case 1:
				{
				State = 3302;
				tableSource();
				}
				break;
			case 2:
				{
				State = 3303;
				virtualTableSource();
				}
				break;
			case 3:
				{
				State = 3304;
				subQuerySource();
				}
				break;
			case 4:
				{
				State = 3305;
				partitionedTableFunction();
				}
				break;
			}
			State = 3311;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,399,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3308;
					lateralView();
					}
					} 
				}
				State = 3313;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,399,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniqueJoinSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UniqueJoinTableSourceContext uniqueJoinTableSource() {
			return GetRuleContext<UniqueJoinTableSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniqueJoinExprContext uniqueJoinExpr() {
			return GetRuleContext<UniqueJoinExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRESERVE() { return GetToken(HiveParser.KW_PRESERVE, 0); }
		public UniqueJoinSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniqueJoinSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterUniqueJoinSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitUniqueJoinSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueJoinSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniqueJoinSourceContext uniqueJoinSource() {
		UniqueJoinSourceContext _localctx = new UniqueJoinSourceContext(Context, State);
		EnterRule(_localctx, 552, RULE_uniqueJoinSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PRESERVE) {
				{
				State = 3314;
				Match(KW_PRESERVE);
				}
			}

			State = 3317;
			uniqueJoinTableSource();
			State = 3318;
			uniqueJoinExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniqueJoinExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public UniqueJoinExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniqueJoinExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterUniqueJoinExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitUniqueJoinExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueJoinExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniqueJoinExprContext uniqueJoinExpr() {
		UniqueJoinExprContext _localctx = new UniqueJoinExprContext(Context, State);
		EnterRule(_localctx, 554, RULE_uniqueJoinExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3320;
			Match(LPAREN);
			State = 3321;
			expressionList();
			State = 3322;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniqueJoinTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNIQUEJOIN() { return GetToken(HiveParser.KW_UNIQUEJOIN, 0); }
		public UniqueJoinTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniqueJoinToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterUniqueJoinToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitUniqueJoinToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueJoinToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniqueJoinTokenContext uniqueJoinToken() {
		UniqueJoinTokenContext _localctx = new UniqueJoinTokenContext(Context, State);
		EnterRule(_localctx, 556, RULE_uniqueJoinToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3324;
			Match(KW_UNIQUEJOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinTokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_JOIN() { return GetToken(HiveParser.KW_JOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INNER() { return GetToken(HiveParser.KW_INNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(HiveParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CROSS() { return GetToken(HiveParser.KW_CROSS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LEFT() { return GetToken(HiveParser.KW_LEFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUTER() { return GetToken(HiveParser.KW_OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RIGHT() { return GetToken(HiveParser.KW_RIGHT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FULL() { return GetToken(HiveParser.KW_FULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SEMI() { return GetToken(HiveParser.KW_SEMI, 0); }
		public JoinTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinToken; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterJoinToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitJoinToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoinToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinTokenContext joinToken() {
		JoinTokenContext _localctx = new JoinTokenContext(Context, State);
		EnterRule(_localctx, 558, RULE_joinToken);
		int _la;
		try {
			State = 3350;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,404,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3326;
				Match(KW_JOIN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3327;
				Match(KW_INNER);
				State = 3328;
				Match(KW_JOIN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3329;
				Match(COMMA);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3330;
				Match(KW_CROSS);
				State = 3331;
				Match(KW_JOIN);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3332;
				Match(KW_LEFT);
				State = 3334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_OUTER) {
					{
					State = 3333;
					Match(KW_OUTER);
					}
				}

				State = 3336;
				Match(KW_JOIN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3337;
				Match(KW_RIGHT);
				State = 3339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_OUTER) {
					{
					State = 3338;
					Match(KW_OUTER);
					}
				}

				State = 3341;
				Match(KW_JOIN);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3342;
				Match(KW_FULL);
				State = 3344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_OUTER) {
					{
					State = 3343;
					Match(KW_OUTER);
					}
				}

				State = 3346;
				Match(KW_JOIN);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3347;
				Match(KW_LEFT);
				State = 3348;
				Match(KW_SEMI);
				State = 3349;
				Match(KW_JOIN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LateralViewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LATERAL() { return GetToken(HiveParser.KW_LATERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VIEW() { return GetToken(HiveParser.KW_VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUTER() { return GetToken(HiveParser.KW_OUTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(HiveParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(HiveParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesClauseContext valuesClause() {
			return GetRuleContext<ValuesClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(HiveParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(HiveParser.RPAREN, i);
		}
		public LateralViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lateralView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterLateralView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitLateralView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLateralView(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LateralViewContext lateralView() {
		LateralViewContext _localctx = new LateralViewContext(Context, State);
		EnterRule(_localctx, 560, RULE_lateralView);
		int _la;
		try {
			int _alt;
			State = 3411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,414,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3352;
				Match(KW_LATERAL);
				State = 3353;
				Match(KW_VIEW);
				State = 3354;
				Match(KW_OUTER);
				State = 3355;
				function();
				State = 3356;
				tableAlias();
				State = 3366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_AS) {
					{
					State = 3357;
					Match(KW_AS);
					State = 3358;
					identifier();
					State = 3363;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,405,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3359;
							Match(COMMA);
							State = 3360;
							identifier();
							}
							} 
						}
						State = 3365;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,405,Context);
					}
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3368;
					Match(COMMA);
					}
				}

				State = 3371;
				Match(KW_LATERAL);
				State = 3372;
				Match(KW_VIEW);
				State = 3373;
				function();
				State = 3374;
				tableAlias();
				State = 3384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_AS) {
					{
					State = 3375;
					Match(KW_AS);
					State = 3376;
					identifier();
					State = 3381;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,408,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 3377;
							Match(COMMA);
							State = 3378;
							identifier();
							}
							} 
						}
						State = 3383;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,408,Context);
					}
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3387;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 3386;
					Match(COMMA);
					}
				}

				State = 3389;
				Match(KW_LATERAL);
				State = 3390;
				Match(KW_TABLE);
				State = 3391;
				Match(LPAREN);
				State = 3392;
				valuesClause();
				State = 3393;
				Match(RPAREN);
				State = 3395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_AS) {
					{
					State = 3394;
					Match(KW_AS);
					}
				}

				State = 3397;
				tableAlias();
				State = 3409;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LPAREN) {
					{
					State = 3398;
					Match(LPAREN);
					State = 3399;
					identifier();
					State = 3404;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3400;
						Match(COMMA);
						State = 3401;
						identifier();
						}
						}
						State = 3406;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 3407;
					Match(RPAREN);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TableAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableAlias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasContext tableAlias() {
		TableAliasContext _localctx = new TableAliasContext(Context, State);
		EnterRule(_localctx, 562, RULE_tableAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3413;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableBucketSampleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLESAMPLE() { return GetToken(HiveParser.KW_TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BUCKET() { return GetToken(HiveParser.KW_BUCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(HiveParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(HiveParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUT() { return GetToken(HiveParser.KW_OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OF() { return GetToken(HiveParser.KW_OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(HiveParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public TableBucketSampleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableBucketSample; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableBucketSample(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableBucketSample(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableBucketSample(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableBucketSampleContext tableBucketSample() {
		TableBucketSampleContext _localctx = new TableBucketSampleContext(Context, State);
		EnterRule(_localctx, 564, RULE_tableBucketSample);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3415;
			Match(KW_TABLESAMPLE);
			State = 3416;
			Match(LPAREN);
			State = 3417;
			Match(KW_BUCKET);
			State = 3418;
			Match(Number);
			State = 3419;
			Match(KW_OUT);
			State = 3420;
			Match(KW_OF);
			State = 3421;
			Match(Number);
			State = 3431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ON) {
				{
				State = 3422;
				Match(KW_ON);
				State = 3423;
				expression(0);
				State = 3428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3424;
					Match(COMMA);
					State = 3425;
					expression(0);
					}
					}
					State = 3430;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3433;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SplitSampleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLESAMPLE() { return GetToken(HiveParser.KW_TABLESAMPLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(HiveParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PERCENT() { return GetToken(HiveParser.KW_PERCENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROWS() { return GetToken(HiveParser.KW_ROWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ByteLengthLiteral() { return GetToken(HiveParser.ByteLengthLiteral, 0); }
		public SplitSampleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_splitSample; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSplitSample(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSplitSample(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSplitSample(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SplitSampleContext splitSample() {
		SplitSampleContext _localctx = new SplitSampleContext(Context, State);
		EnterRule(_localctx, 566, RULE_splitSample);
		int _la;
		try {
			State = 3444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,417,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3435;
				Match(KW_TABLESAMPLE);
				State = 3436;
				Match(LPAREN);
				State = 3437;
				Match(Number);
				State = 3438;
				_la = TokenStream.LA(1);
				if ( !(_la==KW_ROWS || _la==KW_PERCENT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3439;
				Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3440;
				Match(KW_TABLESAMPLE);
				State = 3441;
				Match(LPAREN);
				State = 3442;
				Match(ByteLengthLiteral);
				State = 3443;
				Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSampleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableBucketSampleContext tableBucketSample() {
			return GetRuleContext<TableBucketSampleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SplitSampleContext splitSample() {
			return GetRuleContext<SplitSampleContext>(0);
		}
		public TableSampleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSample; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableSample(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableSample(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSample(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSampleContext tableSample() {
		TableSampleContext _localctx = new TableSampleContext(Context, State);
		EnterRule(_localctx, 568, RULE_tableSample);
		try {
			State = 3448;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,418,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3446;
				tableBucketSample();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3447;
				splitSample();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablePropertiesContext tableProperties() {
			return GetRuleContext<TablePropertiesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableSampleContext tableSample() {
			return GetRuleContext<TableSampleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		public TableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableSourceContext tableSource() {
		TableSourceContext _localctx = new TableSourceContext(Context, State);
		EnterRule(_localctx, 570, RULE_tableSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3450;
			tableName();
			State = 3452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 3451;
				tableProperties();
				}
			}

			State = 3455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_TABLESAMPLE) {
				{
				State = 3454;
				tableSample();
				}
			}

			State = 3461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,422,Context) ) {
			case 1:
				{
				State = 3458;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_AS) {
					{
					State = 3457;
					Match(KW_AS);
					}
				}

				State = 3460;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniqueJoinTableSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableSampleContext tableSample() {
			return GetRuleContext<TableSampleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		public UniqueJoinTableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uniqueJoinTableSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterUniqueJoinTableSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitUniqueJoinTableSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniqueJoinTableSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniqueJoinTableSourceContext uniqueJoinTableSource() {
		UniqueJoinTableSourceContext _localctx = new UniqueJoinTableSourceContext(Context, State);
		EnterRule(_localctx, 572, RULE_uniqueJoinTableSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3463;
			tableName();
			State = 3465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_TABLESAMPLE) {
				{
				State = 3464;
				tableSample();
				}
			}

			State = 3471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ASC) | (1L << KW_DESC) | (1L << KW_NULLS) | (1L << KW_LAST) | (1L << KW_AS) | (1L << KW_OVERWRITE) | (1L << KW_PARTITIONS) | (1L << KW_TABLES) | (1L << KW_COLUMNS) | (1L << KW_INDEX) | (1L << KW_INDEXES) | (1L << KW_REBUILD) | (1L << KW_FUNCTIONS) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_REPAIR) | (1L << KW_DIRECTORY) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT) | (1L << KW_LOAD) | (1L << KW_EXPORT) | (1L << KW_REPLICATION) | (1L << KW_METADATA) | (1L << KW_DATA) | (1L << KW_INPATH))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (KW_CHANGE - 68)) | (1L << (KW_FIRST - 68)) | (1L << (KW_AFTER - 68)) | (1L << (KW_RENAME - 68)) | (1L << (KW_COMMENT - 68)) | (1L << (KW_TINYINT - 68)) | (1L << (KW_DATETIME - 68)) | (1L << (KW_ZONE - 68)) | (1L << (KW_STRING - 68)) | (1L << (KW_STRUCT - 68)) | (1L << (KW_UNIONTYPE - 68)) | (1L << (KW_PARTITIONED - 68)) | (1L << (KW_CLUSTERED - 68)) | (1L << (KW_SORTED - 68)) | (1L << (KW_BUCKETS - 68)) | (1L << (KW_FORMAT - 68)) | (1L << (KW_DELIMITED - 68)) | (1L << (KW_FIELDS - 68)) | (1L << (KW_TERMINATED - 68)) | (1L << (KW_ESCAPED - 68)) | (1L << (KW_COLLECTION - 68)) | (1L << (KW_ITEMS - 68)) | (1L << (KW_KEYS - 68)) | (1L << (KW_KEY_TYPE - 68)) | (1L << (KW_KILL - 68)) | (1L << (KW_LINES - 68)) | (1L << (KW_STORED - 68)) | (1L << (KW_FILEFORMAT - 68)) | (1L << (KW_INPUTFORMAT - 68)) | (1L << (KW_OUTPUTFORMAT - 68)) | (1L << (KW_INPUTDRIVER - 68)) | (1L << (KW_OUTPUTDRIVER - 68)) | (1L << (KW_ENABLE - 68)) | (1L << (KW_DISABLE - 68)) | (1L << (KW_LOCATION - 68)) | (1L << (KW_BUCKET - 68)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (KW_ADD - 134)) | (1L << (KW_REPLACE - 134)) | (1L << (KW_TEMPORARY - 134)) | (1L << (KW_FILE - 134)) | (1L << (KW_JAR - 134)) | (1L << (KW_EXPLAIN - 134)) | (1L << (KW_FORMATTED - 134)) | (1L << (KW_DEPENDENCY - 134)) | (1L << (KW_LOGICAL - 134)) | (1L << (KW_SERDE - 134)) | (1L << (KW_DEFERRED - 134)) | (1L << (KW_SERDEPROPERTIES - 134)) | (1L << (KW_DBPROPERTIES - 134)) | (1L << (KW_LIMIT - 134)) | (1L << (KW_OFFSET - 134)) | (1L << (KW_UNSET - 134)) | (1L << (KW_TBLPROPERTIES - 134)) | (1L << (KW_IDXPROPERTIES - 134)) | (1L << (KW_VALUE_TYPE - 134)) | (1L << (KW_ELEM_TYPE - 134)) | (1L << (KW_DEFINED - 134)) | (1L << (KW_MAPJOIN - 134)) | (1L << (KW_STREAMTABLE - 134)) | (1L << (KW_CLUSTERSTATUS - 134)) | (1L << (KW_UTC - 134)) | (1L << (KW_UTCTIMESTAMP - 134)) | (1L << (KW_LONG - 134)) | (1L << (KW_PLUS - 134)) | (1L << (KW_VIEW - 134)) | (1L << (KW_VIEWS - 134)) | (1L << (KW_DATABASES - 134)) | (1L << (KW_MATERIALIZED - 134)) | (1L << (KW_SCHEMA - 134)) | (1L << (KW_SCHEMAS - 134)) | (1L << (KW_SSL - 134)) | (1L << (KW_UNDO - 134)) | (1L << (KW_LOCK - 134)) | (1L << (KW_LOCKS - 134)) | (1L << (KW_UNLOCK - 134)) | (1L << (KW_SHARED - 134)) | (1L << (KW_EXCLUSIVE - 134)) | (1L << (KW_UNSIGNED - 134)) | (1L << (KW_WHILE - 134)))) != 0) || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (KW_READ - 198)) | (1L << (KW_PURGE - 198)) | (1L << (KW_ANALYZE - 198)) | (1L << (KW_BEFORE - 198)) | (1L << (KW_CONTINUE - 198)) | (1L << (KW_RECORDREADER - 198)) | (1L << (KW_RECORDWRITER - 198)) | (1L << (KW_SEMI - 198)) | (1L << (KW_TOUCH - 198)) | (1L << (KW_ARCHIVE - 198)) | (1L << (KW_UNARCHIVE - 198)) | (1L << (KW_COMPUTE - 198)) | (1L << (KW_STATISTICS - 198)) | (1L << (KW_USE - 198)) | (1L << (KW_OPTION - 198)) | (1L << (KW_CONCATENATE - 198)) | (1L << (KW_SHOW_DATABASE - 198)) | (1L << (KW_RESTRICT - 198)) | (1L << (KW_CASCADE - 198)) | (1L << (KW_SKEWED - 198)) | (1L << (KW_DIRECTORIES - 198)) | (1L << (KW_SETS - 198)) | (1L << (KW_NOSCAN - 198)) | (1L << (KW_ROLE - 198)) | (1L << (KW_ROLES - 198)) | (1L << (KW_URI - 198)) | (1L << (KW_SERVER - 198)) | (1L << (KW_ADMIN - 198)) | (1L << (KW_OWNER - 198)) | (1L << (KW_PRINCIPALS - 198)) | (1L << (KW_COMPACT - 198)) | (1L << (KW_COMPACTIONS - 198)) | (1L << (KW_TRANSACTIONS - 198)) | (1L << (KW_REWRITE - 198)) | (1L << (KW_REOPTIMIZATION - 198)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (KW_RELOAD - 264)) | (1L << (KW_YEAR - 264)) | (1L << (KW_QUERY - 264)) | (1L << (KW_QUARTER - 264)) | (1L << (KW_MONTH - 264)) | (1L << (KW_WEEK - 264)) | (1L << (KW_DAY - 264)) | (1L << (KW_DOW - 264)) | (1L << (KW_HOUR - 264)) | (1L << (KW_MINUTE - 264)) | (1L << (KW_SECOND - 264)) | (1L << (KW_TRANSACTION - 264)) | (1L << (KW_WORK - 264)) | (1L << (KW_WRITE - 264)) | (1L << (KW_ISOLATION - 264)) | (1L << (KW_LEVEL - 264)) | (1L << (KW_SNAPSHOT - 264)) | (1L << (KW_AUTOCOMMIT - 264)) | (1L << (KW_CACHE - 264)) | (1L << (KW_ENFORCED - 264)) | (1L << (KW_VALIDATE - 264)) | (1L << (KW_NOVALIDATE - 264)) | (1L << (KW_RELY - 264)) | (1L << (KW_NORELY - 264)) | (1L << (KW_KEY - 264)) | (1L << (KW_ABORT - 264)) | (1L << (KW_MATCHED - 264)) | (1L << (KW_REPL - 264)) | (1L << (KW_DUMP - 264)) | (1L << (KW_STATUS - 264)) | (1L << (KW_VECTORIZATION - 264)) | (1L << (KW_SUMMARY - 264)) | (1L << (KW_OPERATOR - 264)) | (1L << (KW_EXPRESSION - 264)) | (1L << (KW_DETAIL - 264)) | (1L << (KW_WAIT - 264)) | (1L << (KW_RESOURCE - 264)) | (1L << (KW_PLAN - 264)) | (1L << (KW_QUERY_PARALLELISM - 264)) | (1L << (KW_PLANS - 264)) | (1L << (KW_ACTIVATE - 264)) | (1L << (KW_DEFAULT - 264)) | (1L << (KW_CHECK - 264)) | (1L << (KW_POOL - 264)) | (1L << (KW_MOVE - 264)) | (1L << (KW_DO - 264)) | (1L << (KW_ALLOC_FRACTION - 264)) | (1L << (KW_SCHEDULING_POLICY - 264)) | (1L << (KW_PATH - 264)) | (1L << (KW_MAPPING - 264)) | (1L << (KW_WORKLOAD - 264)) | (1L << (KW_MANAGEMENT - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (KW_ACTIVE - 328)) | (1L << (KW_UNMANAGED - 328)) | (1L << (Identifier - 328)))) != 0)) {
				{
				State = 3468;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_AS) {
					{
					State = 3467;
					Match(KW_AS);
					}
				}

				State = 3470;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(HiveParser.DOT, 0); }
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 574, RULE_tableName);
		try {
			State = 3478;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,426,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3473;
				identifier();
				State = 3474;
				Match(DOT);
				State = 3475;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3477;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(HiveParser.DOT, 0); }
		public ViewNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterViewName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitViewName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewNameContext viewName() {
		ViewNameContext _localctx = new ViewNameContext(Context, State);
		EnterRule(_localctx, 576, RULE_viewName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,427,Context) ) {
			case 1:
				{
				State = 3480;
				identifier();
				State = 3481;
				Match(DOT);
				}
				break;
			}
			State = 3485;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubQuerySourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryStatementExpressionContext queryStatementExpression() {
			return GetRuleContext<QueryStatementExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		public SubQuerySourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subQuerySource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSubQuerySource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSubQuerySource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubQuerySource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubQuerySourceContext subQuerySource() {
		SubQuerySourceContext _localctx = new SubQuerySourceContext(Context, State);
		EnterRule(_localctx, 578, RULE_subQuerySource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3487;
			Match(LPAREN);
			State = 3488;
			queryStatementExpression();
			State = 3489;
			Match(RPAREN);
			State = 3491;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AS) {
				{
				State = 3490;
				Match(KW_AS);
				}
			}

			State = 3493;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitioningSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartitionByClauseContext partitionByClause() {
			return GetRuleContext<PartitionByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderByClauseContext orderByClause() {
			return GetRuleContext<OrderByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DistributeByClauseContext distributeByClause() {
			return GetRuleContext<DistributeByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortByClauseContext sortByClause() {
			return GetRuleContext<SortByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClusterByClauseContext clusterByClause() {
			return GetRuleContext<ClusterByClauseContext>(0);
		}
		public PartitioningSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitioningSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPartitioningSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPartitioningSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitioningSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitioningSpecContext partitioningSpec() {
		PartitioningSpecContext _localctx = new PartitioningSpecContext(Context, State);
		EnterRule(_localctx, 580, RULE_partitioningSpec);
		int _la;
		try {
			State = 3506;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_PARTITION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3495;
				partitionByClause();
				State = 3497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_ORDER) {
					{
					State = 3496;
					orderByClause();
					}
				}

				}
				break;
			case KW_ORDER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3499;
				orderByClause();
				}
				break;
			case KW_DISTRIBUTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3500;
				distributeByClause();
				State = 3502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_SORT) {
					{
					State = 3501;
					sortByClause();
					}
				}

				}
				break;
			case KW_SORT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3504;
				sortByClause();
				}
				break;
			case KW_CLUSTER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3505;
				clusterByClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionTableFunctionSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubQuerySourceContext subQuerySource() {
			return GetRuleContext<SubQuerySourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableSourceContext tableSource() {
			return GetRuleContext<TableSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionedTableFunctionContext partitionedTableFunction() {
			return GetRuleContext<PartitionedTableFunctionContext>(0);
		}
		public PartitionTableFunctionSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionTableFunctionSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPartitionTableFunctionSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPartitionTableFunctionSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionTableFunctionSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionTableFunctionSourceContext partitionTableFunctionSource() {
		PartitionTableFunctionSourceContext _localctx = new PartitionTableFunctionSourceContext(Context, State);
		EnterRule(_localctx, 582, RULE_partitionTableFunctionSource);
		try {
			State = 3511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,432,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3508;
				subQuerySource();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3509;
				tableSource();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3510;
				partitionedTableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionedTableFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(HiveParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(HiveParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ON() { return GetToken(HiveParser.KW_ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionTableFunctionSourceContext partitionTableFunctionSource() {
			return GetRuleContext<PartitionTableFunctionSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(HiveParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(HiveParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitioningSpecContext partitioningSpec() {
			return GetRuleContext<PartitioningSpecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(HiveParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(HiveParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public PartitionedTableFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionedTableFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPartitionedTableFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPartitionedTableFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionedTableFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionedTableFunctionContext partitionedTableFunction() {
		PartitionedTableFunctionContext _localctx = new PartitionedTableFunctionContext(Context, State);
		EnterRule(_localctx, 584, RULE_partitionedTableFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3513;
			identifier();
			State = 3514;
			Match(LPAREN);
			State = 3515;
			Match(KW_ON);
			State = 3516;
			partitionTableFunctionSource();
			State = 3518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_ORDER) | (1L << KW_PARTITION) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT))) != 0)) {
				{
				State = 3517;
				partitioningSpec();
				}
			}

			State = 3535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 3520;
				Match(Identifier);
				State = 3521;
				Match(LPAREN);
				State = 3522;
				expression(0);
				State = 3523;
				Match(RPAREN);
				State = 3532;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3524;
					Match(COMMA);
					State = 3525;
					Match(Identifier);
					State = 3526;
					Match(LPAREN);
					State = 3527;
					expression(0);
					State = 3528;
					Match(RPAREN);
					}
					}
					State = 3534;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3537;
			Match(RPAREN);
			State = 3539;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,436,Context) ) {
			case 1:
				{
				State = 3538;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHERE() { return GetToken(HiveParser.KW_WHERE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SearchConditionContext searchCondition() {
			return GetRuleContext<SearchConditionContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhereClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 586, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3541;
			Match(KW_WHERE);
			State = 3542;
			searchCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SearchConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SearchConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searchCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSearchCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSearchCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearchCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SearchConditionContext searchCondition() {
		SearchConditionContext _localctx = new SearchConditionContext(Context, State);
		EnterRule(_localctx, 588, RULE_searchCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3544;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALUES() { return GetToken(HiveParser.KW_VALUES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValuesTableConstructorContext valuesTableConstructor() {
			return GetRuleContext<ValuesTableConstructorContext>(0);
		}
		public ValuesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterValuesClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitValuesClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesClauseContext valuesClause() {
		ValuesClauseContext _localctx = new ValuesClauseContext(Context, State);
		EnterRule(_localctx, 590, RULE_valuesClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3546;
			Match(KW_VALUES);
			State = 3547;
			valuesTableConstructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesTableConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueRowConstructorContext[] valueRowConstructor() {
			return GetRuleContexts<ValueRowConstructorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueRowConstructorContext valueRowConstructor(int i) {
			return GetRuleContext<ValueRowConstructorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ValuesTableConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesTableConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterValuesTableConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitValuesTableConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuesTableConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValuesTableConstructorContext valuesTableConstructor() {
		ValuesTableConstructorContext _localctx = new ValuesTableConstructorContext(Context, State);
		EnterRule(_localctx, 592, RULE_valuesTableConstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3549;
			valueRowConstructor();
			State = 3554;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3550;
				Match(COMMA);
				State = 3551;
				valueRowConstructor();
				}
				}
				State = 3556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueRowConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsInParenthesisContext expressionsInParenthesis() {
			return GetRuleContext<ExpressionsInParenthesisContext>(0);
		}
		public ValueRowConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueRowConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterValueRowConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitValueRowConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueRowConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueRowConstructorContext valueRowConstructor() {
		ValueRowConstructorContext _localctx = new ValueRowConstructorContext(Context, State);
		EnterRule(_localctx, 594, RULE_valueRowConstructor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3557;
			expressionsInParenthesis();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtualTableSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLE() { return GetToken(HiveParser.KW_TABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LPAREN() { return GetTokens(HiveParser.LPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN(int i) {
			return GetToken(HiveParser.LPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesClauseContext valuesClause() {
			return GetRuleContext<ValuesClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RPAREN() { return GetTokens(HiveParser.RPAREN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN(int i) {
			return GetToken(HiveParser.RPAREN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public VirtualTableSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtualTableSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterVirtualTableSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitVirtualTableSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVirtualTableSource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VirtualTableSourceContext virtualTableSource() {
		VirtualTableSourceContext _localctx = new VirtualTableSourceContext(Context, State);
		EnterRule(_localctx, 596, RULE_virtualTableSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3559;
			Match(KW_TABLE);
			State = 3560;
			Match(LPAREN);
			State = 3561;
			valuesClause();
			State = 3562;
			Match(RPAREN);
			State = 3564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_AS) {
				{
				State = 3563;
				Match(KW_AS);
				}
			}

			State = 3566;
			tableAlias();
			State = 3576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 3567;
				Match(LPAREN);
				State = 3568;
				identifier();
				State = 3573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3569;
					Match(COMMA);
					State = 3570;
					identifier();
					}
					}
					State = 3575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 3578;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GROUP() { return GetToken(HiveParser.KW_GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Groupby_expressionContext groupby_expression() {
			return GetRuleContext<Groupby_expressionContext>(0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 598, RULE_groupByClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3580;
			Match(KW_GROUP);
			State = 3581;
			Match(KW_BY);
			State = 3582;
			groupby_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Groupby_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RollupStandardContext rollupStandard() {
			return GetRuleContext<RollupStandardContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RollupOldSyntaxContext rollupOldSyntax() {
			return GetRuleContext<RollupOldSyntaxContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByEmptyContext groupByEmpty() {
			return GetRuleContext<GroupByEmptyContext>(0);
		}
		public Groupby_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterGroupby_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitGroupby_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Groupby_expressionContext groupby_expression() {
		Groupby_expressionContext _localctx = new Groupby_expressionContext(Context, State);
		EnterRule(_localctx, 600, RULE_groupby_expression);
		try {
			State = 3587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,441,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3584;
				rollupStandard();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3585;
				rollupOldSyntax();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3586;
				groupByEmpty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public GroupByEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterGroupByEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitGroupByEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByEmpty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByEmptyContext groupByEmpty() {
		GroupByEmptyContext _localctx = new GroupByEmptyContext(Context, State);
		EnterRule(_localctx, 602, RULE_groupByEmpty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3589;
			Match(LPAREN);
			State = 3590;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollupStandardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLLUP() { return GetToken(HiveParser.KW_ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CUBE() { return GetToken(HiveParser.KW_CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public RollupStandardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollupStandard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRollupStandard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRollupStandard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollupStandard(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollupStandardContext rollupStandard() {
		RollupStandardContext _localctx = new RollupStandardContext(Context, State);
		EnterRule(_localctx, 604, RULE_rollupStandard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3592;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_ROLLUP || _la==KW_CUBE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3593;
			Match(LPAREN);
			State = 3594;
			expression(0);
			State = 3599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3595;
				Match(COMMA);
				State = 3596;
				expression(0);
				}
				}
				State = 3601;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3602;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RollupOldSyntaxContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsNotInParenthesisContext expressionsNotInParenthesis() {
			return GetRuleContext<ExpressionsNotInParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WITH() { return GetToken(HiveParser.KW_WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLLUP() { return GetToken(HiveParser.KW_ROLLUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CUBE() { return GetToken(HiveParser.KW_CUBE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GROUPING() { return GetToken(HiveParser.KW_GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SETS() { return GetToken(HiveParser.KW_SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupingSetExpressionContext[] groupingSetExpression() {
			return GetRuleContexts<GroupingSetExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingSetExpressionContext groupingSetExpression(int i) {
			return GetRuleContext<GroupingSetExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public RollupOldSyntaxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rollupOldSyntax; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterRollupOldSyntax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitRollupOldSyntax(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRollupOldSyntax(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RollupOldSyntaxContext rollupOldSyntax() {
		RollupOldSyntaxContext _localctx = new RollupOldSyntaxContext(Context, State);
		EnterRule(_localctx, 606, RULE_rollupOldSyntax);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3604;
			expressionsNotInParenthesis();
			State = 3609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
			case 1:
				{
				State = 3605;
				Match(KW_WITH);
				State = 3606;
				Match(KW_ROLLUP);
				}
				break;
			case 2:
				{
				State = 3607;
				Match(KW_WITH);
				State = 3608;
				Match(KW_CUBE);
				}
				break;
			}
			State = 3624;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_GROUPING) {
				{
				State = 3611;
				Match(KW_GROUPING);
				State = 3612;
				Match(KW_SETS);
				State = 3613;
				Match(LPAREN);
				State = 3614;
				groupingSetExpression();
				State = 3619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 3615;
					Match(COMMA);
					State = 3616;
					groupingSetExpression();
					}
					}
					State = 3621;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 3622;
				Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingSetExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingSetExpressionMultipleContext groupingSetExpressionMultiple() {
			return GetRuleContext<GroupingSetExpressionMultipleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingExpressionSingleContext groupingExpressionSingle() {
			return GetRuleContext<GroupingExpressionSingleContext>(0);
		}
		public GroupingSetExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingSetExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterGroupingSetExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitGroupingSetExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingSetExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingSetExpressionContext groupingSetExpression() {
		GroupingSetExpressionContext _localctx = new GroupingSetExpressionContext(Context, State);
		EnterRule(_localctx, 608, RULE_groupingSetExpression);
		try {
			State = 3628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3626;
				groupingSetExpressionMultiple();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3627;
				groupingExpressionSingle();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingSetExpressionMultipleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public GroupingSetExpressionMultipleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingSetExpressionMultiple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterGroupingSetExpressionMultiple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitGroupingSetExpressionMultiple(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingSetExpressionMultiple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingSetExpressionMultipleContext groupingSetExpressionMultiple() {
		GroupingSetExpressionMultipleContext _localctx = new GroupingSetExpressionMultipleContext(Context, State);
		EnterRule(_localctx, 610, RULE_groupingSetExpressionMultiple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3630;
			Match(LPAREN);
			State = 3632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_NOT) | (1L << KW_IF) | (1L << KW_EXISTS) | (1L << KW_ASC) | (1L << KW_DESC) | (1L << KW_NULLS) | (1L << KW_LAST) | (1L << KW_OVERWRITE) | (1L << KW_PARTITIONS) | (1L << KW_TABLES) | (1L << KW_COLUMNS) | (1L << KW_INDEX) | (1L << KW_INDEXES) | (1L << KW_REBUILD) | (1L << KW_FUNCTIONS) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_REPAIR) | (1L << KW_DIRECTORY) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT) | (1L << KW_LOAD) | (1L << KW_EXPORT) | (1L << KW_REPLICATION) | (1L << KW_METADATA) | (1L << KW_DATA) | (1L << KW_INPATH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (KW_NULL - 64)) | (1L << (KW_CHANGE - 64)) | (1L << (KW_FIRST - 64)) | (1L << (KW_AFTER - 64)) | (1L << (KW_RENAME - 64)) | (1L << (KW_COMMENT - 64)) | (1L << (KW_BOOLEAN - 64)) | (1L << (KW_TINYINT - 64)) | (1L << (KW_SMALLINT - 64)) | (1L << (KW_INT - 64)) | (1L << (KW_BIGINT - 64)) | (1L << (KW_FLOAT - 64)) | (1L << (KW_DOUBLE - 64)) | (1L << (KW_DATE - 64)) | (1L << (KW_DATETIME - 64)) | (1L << (KW_TIMESTAMP - 64)) | (1L << (KW_TIMESTAMPLOCALTZ - 64)) | (1L << (KW_ZONE - 64)) | (1L << (KW_INTERVAL - 64)) | (1L << (KW_STRING - 64)) | (1L << (KW_ARRAY - 64)) | (1L << (KW_STRUCT - 64)) | (1L << (KW_MAP - 64)) | (1L << (KW_UNIONTYPE - 64)) | (1L << (KW_PARTITIONED - 64)) | (1L << (KW_CLUSTERED - 64)) | (1L << (KW_SORTED - 64)) | (1L << (KW_BUCKETS - 64)) | (1L << (KW_FORMAT - 64)) | (1L << (KW_DELIMITED - 64)) | (1L << (KW_FIELDS - 64)) | (1L << (KW_TERMINATED - 64)) | (1L << (KW_ESCAPED - 64)) | (1L << (KW_COLLECTION - 64)) | (1L << (KW_ITEMS - 64)) | (1L << (KW_KEYS - 64)) | (1L << (KW_KEY_TYPE - 64)) | (1L << (KW_KILL - 64)) | (1L << (KW_LINES - 64)) | (1L << (KW_STORED - 64)) | (1L << (KW_FILEFORMAT - 64)) | (1L << (KW_INPUTFORMAT - 64)) | (1L << (KW_OUTPUTFORMAT - 64)) | (1L << (KW_INPUTDRIVER - 64)) | (1L << (KW_OUTPUTDRIVER - 64)) | (1L << (KW_ENABLE - 64)) | (1L << (KW_DISABLE - 64)) | (1L << (KW_LOCATION - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (KW_BUCKET - 129)) | (1L << (KW_CAST - 129)) | (1L << (KW_ADD - 129)) | (1L << (KW_REPLACE - 129)) | (1L << (KW_TEMPORARY - 129)) | (1L << (KW_FILE - 129)) | (1L << (KW_JAR - 129)) | (1L << (KW_EXPLAIN - 129)) | (1L << (KW_FORMATTED - 129)) | (1L << (KW_DEPENDENCY - 129)) | (1L << (KW_LOGICAL - 129)) | (1L << (KW_SERDE - 129)) | (1L << (KW_DEFERRED - 129)) | (1L << (KW_SERDEPROPERTIES - 129)) | (1L << (KW_DBPROPERTIES - 129)) | (1L << (KW_LIMIT - 129)) | (1L << (KW_OFFSET - 129)) | (1L << (KW_UNSET - 129)) | (1L << (KW_TBLPROPERTIES - 129)) | (1L << (KW_IDXPROPERTIES - 129)) | (1L << (KW_VALUE_TYPE - 129)) | (1L << (KW_ELEM_TYPE - 129)) | (1L << (KW_DEFINED - 129)) | (1L << (KW_CASE - 129)) | (1L << (KW_MAPJOIN - 129)) | (1L << (KW_STREAMTABLE - 129)) | (1L << (KW_CLUSTERSTATUS - 129)) | (1L << (KW_UTC - 129)) | (1L << (KW_UTCTIMESTAMP - 129)) | (1L << (KW_LONG - 129)) | (1L << (KW_PLUS - 129)) | (1L << (KW_VIEW - 129)) | (1L << (KW_VIEWS - 129)) | (1L << (KW_DATABASES - 129)) | (1L << (KW_MATERIALIZED - 129)) | (1L << (KW_SCHEMA - 129)) | (1L << (KW_SCHEMAS - 129)) | (1L << (KW_SSL - 129)) | (1L << (KW_UNDO - 129)) | (1L << (KW_LOCK - 129)) | (1L << (KW_LOCKS - 129)) | (1L << (KW_UNLOCK - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (KW_SHARED - 193)) | (1L << (KW_EXCLUSIVE - 193)) | (1L << (KW_UNSIGNED - 193)) | (1L << (KW_WHILE - 193)) | (1L << (KW_READ - 193)) | (1L << (KW_PURGE - 193)) | (1L << (KW_ANALYZE - 193)) | (1L << (KW_BEFORE - 193)) | (1L << (KW_BINARY - 193)) | (1L << (KW_CONTINUE - 193)) | (1L << (KW_RECORDREADER - 193)) | (1L << (KW_RECORDWRITER - 193)) | (1L << (KW_SEMI - 193)) | (1L << (KW_TOUCH - 193)) | (1L << (KW_ARCHIVE - 193)) | (1L << (KW_UNARCHIVE - 193)) | (1L << (KW_COMPUTE - 193)) | (1L << (KW_STATISTICS - 193)) | (1L << (KW_USE - 193)) | (1L << (KW_OPTION - 193)) | (1L << (KW_CONCATENATE - 193)) | (1L << (KW_SHOW_DATABASE - 193)) | (1L << (KW_RESTRICT - 193)) | (1L << (KW_CASCADE - 193)) | (1L << (KW_SKEWED - 193)) | (1L << (KW_DIRECTORIES - 193)) | (1L << (KW_CURRENT_DATE - 193)) | (1L << (KW_CURRENT_TIMESTAMP - 193)) | (1L << (KW_GROUPING - 193)) | (1L << (KW_SETS - 193)) | (1L << (KW_NOSCAN - 193)) | (1L << (KW_ROLE - 193)) | (1L << (KW_ROLES - 193)) | (1L << (KW_URI - 193)) | (1L << (KW_SERVER - 193)) | (1L << (KW_ADMIN - 193)) | (1L << (KW_OWNER - 193)) | (1L << (KW_PRINCIPALS - 193)) | (1L << (KW_COMPACT - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KW_COMPACTIONS - 257)) | (1L << (KW_TRANSACTIONS - 257)) | (1L << (KW_REWRITE - 257)) | (1L << (KW_REOPTIMIZATION - 257)) | (1L << (KW_RELOAD - 257)) | (1L << (KW_YEAR - 257)) | (1L << (KW_QUERY - 257)) | (1L << (KW_QUARTER - 257)) | (1L << (KW_MONTH - 257)) | (1L << (KW_WEEK - 257)) | (1L << (KW_DAY - 257)) | (1L << (KW_DOW - 257)) | (1L << (KW_HOUR - 257)) | (1L << (KW_MINUTE - 257)) | (1L << (KW_SECOND - 257)) | (1L << (KW_TRANSACTION - 257)) | (1L << (KW_WORK - 257)) | (1L << (KW_WRITE - 257)) | (1L << (KW_ISOLATION - 257)) | (1L << (KW_LEVEL - 257)) | (1L << (KW_SNAPSHOT - 257)) | (1L << (KW_AUTOCOMMIT - 257)) | (1L << (KW_CACHE - 257)) | (1L << (KW_ENFORCED - 257)) | (1L << (KW_VALIDATE - 257)) | (1L << (KW_NOVALIDATE - 257)) | (1L << (KW_RELY - 257)) | (1L << (KW_NORELY - 257)) | (1L << (KW_KEY - 257)) | (1L << (KW_ABORT - 257)) | (1L << (KW_EXTRACT - 257)) | (1L << (KW_FLOOR - 257)) | (1L << (KW_MATCHED - 257)) | (1L << (KW_REPL - 257)) | (1L << (KW_DUMP - 257)) | (1L << (KW_STATUS - 257)) | (1L << (KW_VECTORIZATION - 257)) | (1L << (KW_SUMMARY - 257)) | (1L << (KW_OPERATOR - 257)) | (1L << (KW_EXPRESSION - 257)) | (1L << (KW_DETAIL - 257)) | (1L << (KW_WAIT - 257)) | (1L << (KW_RESOURCE - 257)) | (1L << (KW_PLAN - 257)) | (1L << (KW_QUERY_PARALLELISM - 257)) | (1L << (KW_PLANS - 257)) | (1L << (KW_ACTIVATE - 257)) | (1L << (KW_DEFAULT - 257)) | (1L << (KW_CHECK - 257)) | (1L << (KW_POOL - 257)) | (1L << (KW_MOVE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (KW_DO - 321)) | (1L << (KW_ALLOC_FRACTION - 321)) | (1L << (KW_SCHEDULING_POLICY - 321)) | (1L << (KW_PATH - 321)) | (1L << (KW_MAPPING - 321)) | (1L << (KW_WORKLOAD - 321)) | (1L << (KW_MANAGEMENT - 321)) | (1L << (KW_ACTIVE - 321)) | (1L << (KW_UNMANAGED - 321)) | (1L << (LPAREN - 321)) | (1L << (PLUS - 321)) | (1L << (MINUS - 321)) | (1L << (TILDE - 321)) | (1L << (StringLiteral - 321)) | (1L << (IntegralLiteral - 321)) | (1L << (NumberLiteral - 321)) | (1L << (Number - 321)) | (1L << (Identifier - 321)) | (1L << (CharSetName - 321)))) != 0)) {
				{
				State = 3631;
				expression(0);
				}
			}

			State = 3638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3634;
				Match(COMMA);
				State = 3635;
				expression(0);
				}
				}
				State = 3640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3641;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingExpressionSingleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GroupingExpressionSingleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingExpressionSingle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterGroupingExpressionSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitGroupingExpressionSingle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupingExpressionSingle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupingExpressionSingleContext groupingExpressionSingle() {
		GroupingExpressionSingleContext _localctx = new GroupingExpressionSingleContext(Context, State);
		EnterRule(_localctx, 612, RULE_groupingExpressionSingle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3643;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_HAVING() { return GetToken(HiveParser.KW_HAVING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HavingConditionContext havingCondition() {
			return GetRuleContext<HavingConditionContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 614, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3645;
			Match(KW_HAVING);
			State = 3646;
			havingCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public HavingConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterHavingCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitHavingCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHavingCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HavingConditionContext havingCondition() {
		HavingConditionContext _localctx = new HavingConditionContext(Context, State);
		EnterRule(_localctx, 616, RULE_havingCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3648;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsInParenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsNotInParenthesisContext expressionsNotInParenthesis() {
			return GetRuleContext<ExpressionsNotInParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public ExpressionsInParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionsInParenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExpressionsInParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExpressionsInParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionsInParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsInParenthesisContext expressionsInParenthesis() {
		ExpressionsInParenthesisContext _localctx = new ExpressionsInParenthesisContext(Context, State);
		EnterRule(_localctx, 618, RULE_expressionsInParenthesis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3650;
			Match(LPAREN);
			State = 3651;
			expressionsNotInParenthesis();
			State = 3652;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsNotInParenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionPartContext expressionPart() {
			return GetRuleContext<ExpressionPartContext>(0);
		}
		public ExpressionsNotInParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionsNotInParenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExpressionsNotInParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExpressionsNotInParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionsNotInParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsNotInParenthesisContext expressionsNotInParenthesis() {
		ExpressionsNotInParenthesisContext _localctx = new ExpressionsNotInParenthesisContext(Context, State);
		EnterRule(_localctx, 620, RULE_expressionsNotInParenthesis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3654;
			expression(0);
			State = 3656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 3655;
				expressionPart();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExpressionPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExpressionPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionPartContext expressionPart() {
		ExpressionPartContext _localctx = new ExpressionPartContext(Context, State);
		EnterRule(_localctx, 622, RULE_expressionPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3658;
				Match(COMMA);
				State = 3659;
				expression(0);
				}
				}
				State = 3662;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsInParenthesisContext expressionsInParenthesis() {
			return GetRuleContext<ExpressionsInParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsNotInParenthesisContext expressionsNotInParenthesis() {
			return GetRuleContext<ExpressionsNotInParenthesisContext>(0);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExpressions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionsContext expressions() {
		ExpressionsContext _localctx = new ExpressionsContext(Context, State);
		EnterRule(_localctx, 624, RULE_expressions);
		try {
			State = 3666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3664;
				expressionsInParenthesis();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3665;
				expressionsNotInParenthesis();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnRefOrderInParenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefOrderContext[] columnRefOrder() {
			return GetRuleContexts<ColumnRefOrderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefOrderContext columnRefOrder(int i) {
			return GetRuleContext<ColumnRefOrderContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ColumnRefOrderInParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnRefOrderInParenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnRefOrderInParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnRefOrderInParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnRefOrderInParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnRefOrderInParenthesisContext columnRefOrderInParenthesis() {
		ColumnRefOrderInParenthesisContext _localctx = new ColumnRefOrderInParenthesisContext(Context, State);
		EnterRule(_localctx, 626, RULE_columnRefOrderInParenthesis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3668;
			Match(LPAREN);
			State = 3669;
			columnRefOrder();
			State = 3674;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3670;
				Match(COMMA);
				State = 3671;
				columnRefOrder();
				}
				}
				State = 3676;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3677;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnRefOrderNotInParenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefOrderContext[] columnRefOrder() {
			return GetRuleContexts<ColumnRefOrderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefOrderContext columnRefOrder(int i) {
			return GetRuleContext<ColumnRefOrderContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public ColumnRefOrderNotInParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnRefOrderNotInParenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterColumnRefOrderNotInParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitColumnRefOrderNotInParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnRefOrderNotInParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnRefOrderNotInParenthesisContext columnRefOrderNotInParenthesis() {
		ColumnRefOrderNotInParenthesisContext _localctx = new ColumnRefOrderNotInParenthesisContext(Context, State);
		EnterRule(_localctx, 628, RULE_columnRefOrderNotInParenthesis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3679;
			columnRefOrder();
			State = 3684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3680;
				Match(COMMA);
				State = 3681;
				columnRefOrder();
				}
				}
				State = 3686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ORDER() { return GetToken(HiveParser.KW_ORDER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefOrderContext[] columnRefOrder() {
			return GetRuleContexts<ColumnRefOrderContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefOrderContext columnRefOrder(int i) {
			return GetRuleContext<ColumnRefOrderContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterOrderByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitOrderByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderByClauseContext orderByClause() {
		OrderByClauseContext _localctx = new OrderByClauseContext(Context, State);
		EnterRule(_localctx, 630, RULE_orderByClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3687;
			Match(KW_ORDER);
			State = 3688;
			Match(KW_BY);
			State = 3689;
			columnRefOrder();
			State = 3694;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 3690;
				Match(COMMA);
				State = 3691;
				columnRefOrder();
				}
				}
				State = 3696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClusterByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CLUSTER() { return GetToken(HiveParser.KW_CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public ClusterByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_clusterByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterClusterByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitClusterByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClusterByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClusterByClauseContext clusterByClause() {
		ClusterByClauseContext _localctx = new ClusterByClauseContext(Context, State);
		EnterRule(_localctx, 632, RULE_clusterByClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3697;
			Match(KW_CLUSTER);
			State = 3698;
			Match(KW_BY);
			State = 3699;
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARTITION() { return GetToken(HiveParser.KW_PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public PartitionByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPartitionByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPartitionByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionByClauseContext partitionByClause() {
		PartitionByClauseContext _localctx = new PartitionByClauseContext(Context, State);
		EnterRule(_localctx, 634, RULE_partitionByClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3701;
			Match(KW_PARTITION);
			State = 3702;
			Match(KW_BY);
			State = 3703;
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DistributeByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISTRIBUTE() { return GetToken(HiveParser.KW_DISTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsContext expressions() {
			return GetRuleContext<ExpressionsContext>(0);
		}
		public DistributeByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_distributeByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDistributeByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDistributeByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDistributeByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DistributeByClauseContext distributeByClause() {
		DistributeByClauseContext _localctx = new DistributeByClauseContext(Context, State);
		EnterRule(_localctx, 636, RULE_distributeByClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3705;
			Match(KW_DISTRIBUTE);
			State = 3706;
			Match(KW_BY);
			State = 3707;
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SORT() { return GetToken(HiveParser.KW_SORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BY() { return GetToken(HiveParser.KW_BY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefOrderInParenthesisContext columnRefOrderInParenthesis() {
			return GetRuleContext<ColumnRefOrderInParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefOrderNotInParenthesisContext columnRefOrderNotInParenthesis() {
			return GetRuleContext<ColumnRefOrderNotInParenthesisContext>(0);
		}
		public SortByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sortByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSortByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSortByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSortByClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortByClauseContext sortByClause() {
		SortByClauseContext _localctx = new SortByClauseContext(Context, State);
		EnterRule(_localctx, 638, RULE_sortByClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3709;
			Match(KW_SORT);
			State = 3710;
			Match(KW_BY);
			State = 3713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,455,Context) ) {
			case 1:
				{
				State = 3711;
				columnRefOrderInParenthesis();
				}
				break;
			case 2:
				{
				State = 3712;
				columnRefOrderNotInParenthesis();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(HiveParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OVER() { return GetToken(HiveParser.KW_OVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Window_specificationContext window_specification() {
			return GetRuleContext<Window_specificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectExpressionContext[] selectExpression() {
			return GetRuleContexts<SelectExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectExpressionContext selectExpression(int i) {
			return GetRuleContext<SelectExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISTINCT() { return GetToken(HiveParser.KW_DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(HiveParser.KW_ALL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 640, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3715;
			functionName();
			State = 3716;
			Match(LPAREN);
			State = 3731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
			case 1:
				{
				State = 3717;
				Match(STAR);
				}
				break;
			case 2:
				{
				State = 3719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KW_ALL || _la==KW_DISTINCT) {
					{
					State = 3718;
					_la = TokenStream.LA(1);
					if ( !(_la==KW_ALL || _la==KW_DISTINCT) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3729;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_TRUE) | (1L << KW_FALSE) | (1L << KW_NOT) | (1L << KW_IF) | (1L << KW_EXISTS) | (1L << KW_ASC) | (1L << KW_DESC) | (1L << KW_NULLS) | (1L << KW_LAST) | (1L << KW_OVERWRITE) | (1L << KW_PARTITIONS) | (1L << KW_TABLES) | (1L << KW_COLUMNS) | (1L << KW_INDEX) | (1L << KW_INDEXES) | (1L << KW_REBUILD) | (1L << KW_FUNCTIONS) | (1L << KW_SHOW) | (1L << KW_MSCK) | (1L << KW_REPAIR) | (1L << KW_DIRECTORY) | (1L << KW_CLUSTER) | (1L << KW_DISTRIBUTE) | (1L << KW_SORT) | (1L << KW_LOAD) | (1L << KW_EXPORT) | (1L << KW_REPLICATION) | (1L << KW_METADATA) | (1L << KW_DATA) | (1L << KW_INPATH))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (KW_NULL - 64)) | (1L << (KW_CHANGE - 64)) | (1L << (KW_FIRST - 64)) | (1L << (KW_AFTER - 64)) | (1L << (KW_RENAME - 64)) | (1L << (KW_COMMENT - 64)) | (1L << (KW_BOOLEAN - 64)) | (1L << (KW_TINYINT - 64)) | (1L << (KW_SMALLINT - 64)) | (1L << (KW_INT - 64)) | (1L << (KW_BIGINT - 64)) | (1L << (KW_FLOAT - 64)) | (1L << (KW_DOUBLE - 64)) | (1L << (KW_DATE - 64)) | (1L << (KW_DATETIME - 64)) | (1L << (KW_TIMESTAMP - 64)) | (1L << (KW_TIMESTAMPLOCALTZ - 64)) | (1L << (KW_ZONE - 64)) | (1L << (KW_INTERVAL - 64)) | (1L << (KW_STRING - 64)) | (1L << (KW_ARRAY - 64)) | (1L << (KW_STRUCT - 64)) | (1L << (KW_MAP - 64)) | (1L << (KW_UNIONTYPE - 64)) | (1L << (KW_PARTITIONED - 64)) | (1L << (KW_CLUSTERED - 64)) | (1L << (KW_SORTED - 64)) | (1L << (KW_BUCKETS - 64)) | (1L << (KW_FORMAT - 64)) | (1L << (KW_DELIMITED - 64)) | (1L << (KW_FIELDS - 64)) | (1L << (KW_TERMINATED - 64)) | (1L << (KW_ESCAPED - 64)) | (1L << (KW_COLLECTION - 64)) | (1L << (KW_ITEMS - 64)) | (1L << (KW_KEYS - 64)) | (1L << (KW_KEY_TYPE - 64)) | (1L << (KW_KILL - 64)) | (1L << (KW_LINES - 64)) | (1L << (KW_STORED - 64)) | (1L << (KW_FILEFORMAT - 64)) | (1L << (KW_INPUTFORMAT - 64)) | (1L << (KW_OUTPUTFORMAT - 64)) | (1L << (KW_INPUTDRIVER - 64)) | (1L << (KW_OUTPUTDRIVER - 64)) | (1L << (KW_ENABLE - 64)) | (1L << (KW_DISABLE - 64)) | (1L << (KW_LOCATION - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (KW_BUCKET - 129)) | (1L << (KW_CAST - 129)) | (1L << (KW_ADD - 129)) | (1L << (KW_REPLACE - 129)) | (1L << (KW_TEMPORARY - 129)) | (1L << (KW_FILE - 129)) | (1L << (KW_JAR - 129)) | (1L << (KW_EXPLAIN - 129)) | (1L << (KW_FORMATTED - 129)) | (1L << (KW_DEPENDENCY - 129)) | (1L << (KW_LOGICAL - 129)) | (1L << (KW_SERDE - 129)) | (1L << (KW_DEFERRED - 129)) | (1L << (KW_SERDEPROPERTIES - 129)) | (1L << (KW_DBPROPERTIES - 129)) | (1L << (KW_LIMIT - 129)) | (1L << (KW_OFFSET - 129)) | (1L << (KW_UNSET - 129)) | (1L << (KW_TBLPROPERTIES - 129)) | (1L << (KW_IDXPROPERTIES - 129)) | (1L << (KW_VALUE_TYPE - 129)) | (1L << (KW_ELEM_TYPE - 129)) | (1L << (KW_DEFINED - 129)) | (1L << (KW_CASE - 129)) | (1L << (KW_MAPJOIN - 129)) | (1L << (KW_STREAMTABLE - 129)) | (1L << (KW_CLUSTERSTATUS - 129)) | (1L << (KW_UTC - 129)) | (1L << (KW_UTCTIMESTAMP - 129)) | (1L << (KW_LONG - 129)) | (1L << (KW_PLUS - 129)) | (1L << (KW_VIEW - 129)) | (1L << (KW_VIEWS - 129)) | (1L << (KW_DATABASES - 129)) | (1L << (KW_MATERIALIZED - 129)) | (1L << (KW_SCHEMA - 129)) | (1L << (KW_SCHEMAS - 129)) | (1L << (KW_SSL - 129)) | (1L << (KW_UNDO - 129)) | (1L << (KW_LOCK - 129)) | (1L << (KW_LOCKS - 129)) | (1L << (KW_UNLOCK - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (KW_SHARED - 193)) | (1L << (KW_EXCLUSIVE - 193)) | (1L << (KW_UNSIGNED - 193)) | (1L << (KW_WHILE - 193)) | (1L << (KW_READ - 193)) | (1L << (KW_PURGE - 193)) | (1L << (KW_ANALYZE - 193)) | (1L << (KW_BEFORE - 193)) | (1L << (KW_BINARY - 193)) | (1L << (KW_CONTINUE - 193)) | (1L << (KW_RECORDREADER - 193)) | (1L << (KW_RECORDWRITER - 193)) | (1L << (KW_SEMI - 193)) | (1L << (KW_TOUCH - 193)) | (1L << (KW_ARCHIVE - 193)) | (1L << (KW_UNARCHIVE - 193)) | (1L << (KW_COMPUTE - 193)) | (1L << (KW_STATISTICS - 193)) | (1L << (KW_USE - 193)) | (1L << (KW_OPTION - 193)) | (1L << (KW_CONCATENATE - 193)) | (1L << (KW_SHOW_DATABASE - 193)) | (1L << (KW_RESTRICT - 193)) | (1L << (KW_CASCADE - 193)) | (1L << (KW_SKEWED - 193)) | (1L << (KW_DIRECTORIES - 193)) | (1L << (KW_CURRENT_DATE - 193)) | (1L << (KW_CURRENT_TIMESTAMP - 193)) | (1L << (KW_GROUPING - 193)) | (1L << (KW_SETS - 193)) | (1L << (KW_NOSCAN - 193)) | (1L << (KW_ROLE - 193)) | (1L << (KW_ROLES - 193)) | (1L << (KW_URI - 193)) | (1L << (KW_SERVER - 193)) | (1L << (KW_ADMIN - 193)) | (1L << (KW_OWNER - 193)) | (1L << (KW_PRINCIPALS - 193)) | (1L << (KW_COMPACT - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (KW_COMPACTIONS - 257)) | (1L << (KW_TRANSACTIONS - 257)) | (1L << (KW_REWRITE - 257)) | (1L << (KW_REOPTIMIZATION - 257)) | (1L << (KW_RELOAD - 257)) | (1L << (KW_YEAR - 257)) | (1L << (KW_QUERY - 257)) | (1L << (KW_QUARTER - 257)) | (1L << (KW_MONTH - 257)) | (1L << (KW_WEEK - 257)) | (1L << (KW_DAY - 257)) | (1L << (KW_DOW - 257)) | (1L << (KW_HOUR - 257)) | (1L << (KW_MINUTE - 257)) | (1L << (KW_SECOND - 257)) | (1L << (KW_TRANSACTION - 257)) | (1L << (KW_WORK - 257)) | (1L << (KW_WRITE - 257)) | (1L << (KW_ISOLATION - 257)) | (1L << (KW_LEVEL - 257)) | (1L << (KW_SNAPSHOT - 257)) | (1L << (KW_AUTOCOMMIT - 257)) | (1L << (KW_CACHE - 257)) | (1L << (KW_ENFORCED - 257)) | (1L << (KW_VALIDATE - 257)) | (1L << (KW_NOVALIDATE - 257)) | (1L << (KW_RELY - 257)) | (1L << (KW_NORELY - 257)) | (1L << (KW_KEY - 257)) | (1L << (KW_ABORT - 257)) | (1L << (KW_EXTRACT - 257)) | (1L << (KW_FLOOR - 257)) | (1L << (KW_MATCHED - 257)) | (1L << (KW_REPL - 257)) | (1L << (KW_DUMP - 257)) | (1L << (KW_STATUS - 257)) | (1L << (KW_VECTORIZATION - 257)) | (1L << (KW_SUMMARY - 257)) | (1L << (KW_OPERATOR - 257)) | (1L << (KW_EXPRESSION - 257)) | (1L << (KW_DETAIL - 257)) | (1L << (KW_WAIT - 257)) | (1L << (KW_RESOURCE - 257)) | (1L << (KW_PLAN - 257)) | (1L << (KW_QUERY_PARALLELISM - 257)) | (1L << (KW_PLANS - 257)) | (1L << (KW_ACTIVATE - 257)) | (1L << (KW_DEFAULT - 257)) | (1L << (KW_CHECK - 257)) | (1L << (KW_POOL - 257)) | (1L << (KW_MOVE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (KW_DO - 321)) | (1L << (KW_ALLOC_FRACTION - 321)) | (1L << (KW_SCHEDULING_POLICY - 321)) | (1L << (KW_PATH - 321)) | (1L << (KW_MAPPING - 321)) | (1L << (KW_WORKLOAD - 321)) | (1L << (KW_MANAGEMENT - 321)) | (1L << (KW_ACTIVE - 321)) | (1L << (KW_UNMANAGED - 321)) | (1L << (LPAREN - 321)) | (1L << (PLUS - 321)) | (1L << (MINUS - 321)) | (1L << (STAR - 321)) | (1L << (TILDE - 321)) | (1L << (StringLiteral - 321)) | (1L << (IntegralLiteral - 321)) | (1L << (NumberLiteral - 321)) | (1L << (Number - 321)) | (1L << (Identifier - 321)) | (1L << (CharSetName - 321)))) != 0)) {
					{
					State = 3721;
					selectExpression();
					State = 3726;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 3722;
						Match(COMMA);
						State = 3723;
						selectExpression();
						}
						}
						State = 3728;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				}
				break;
			}
			State = 3733;
			Match(RPAREN);
			State = 3736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
			case 1:
				{
				State = 3734;
				Match(KW_OVER);
				State = 3735;
				window_specification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionIdentifierContext functionIdentifier() {
			return GetRuleContext<FunctionIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sql11ReservedKeywordsUsedAsFunctionNameContext sql11ReservedKeywordsUsedAsFunctionName() {
			return GetRuleContext<Sql11ReservedKeywordsUsedAsFunctionNameContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 642, RULE_functionName);
		try {
			State = 3740;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ASC:
			case KW_DESC:
			case KW_NULLS:
			case KW_LAST:
			case KW_OVERWRITE:
			case KW_PARTITIONS:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_AFTER:
			case KW_RENAME:
			case KW_COMMENT:
			case KW_TINYINT:
			case KW_DATETIME:
			case KW_ZONE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_UNIONTYPE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_BUCKETS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_LOCATION:
			case KW_BUCKET:
			case KW_ADD:
			case KW_REPLACE:
			case KW_TEMPORARY:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_STREAMTABLE:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_PLUS:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_PURGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_CONTINUE:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_DIRECTORIES:
			case KW_SETS:
			case KW_NOSCAN:
			case KW_ROLE:
			case KW_ROLES:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_QUERY:
			case KW_QUARTER:
			case KW_MONTH:
			case KW_WEEK:
			case KW_DAY:
			case KW_DOW:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_TRANSACTION:
			case KW_WORK:
			case KW_WRITE:
			case KW_ISOLATION:
			case KW_LEVEL:
			case KW_SNAPSHOT:
			case KW_AUTOCOMMIT:
			case KW_CACHE:
			case KW_ENFORCED:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_KEY:
			case KW_ABORT:
			case KW_MATCHED:
			case KW_REPL:
			case KW_DUMP:
			case KW_STATUS:
			case KW_VECTORIZATION:
			case KW_SUMMARY:
			case KW_OPERATOR:
			case KW_EXPRESSION:
			case KW_DETAIL:
			case KW_WAIT:
			case KW_RESOURCE:
			case KW_PLAN:
			case KW_QUERY_PARALLELISM:
			case KW_PLANS:
			case KW_ACTIVATE:
			case KW_DEFAULT:
			case KW_CHECK:
			case KW_POOL:
			case KW_MOVE:
			case KW_DO:
			case KW_ALLOC_FRACTION:
			case KW_SCHEDULING_POLICY:
			case KW_PATH:
			case KW_MAPPING:
			case KW_WORKLOAD:
			case KW_MANAGEMENT:
			case KW_ACTIVE:
			case KW_UNMANAGED:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3738;
				functionIdentifier();
				}
				break;
			case KW_IF:
			case KW_BOOLEAN:
			case KW_SMALLINT:
			case KW_INT:
			case KW_BIGINT:
			case KW_FLOAT:
			case KW_DOUBLE:
			case KW_DATE:
			case KW_TIMESTAMP:
			case KW_ARRAY:
			case KW_MAP:
			case KW_BINARY:
			case KW_CURRENT_DATE:
			case KW_CURRENT_TIMESTAMP:
			case KW_GROUPING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3739;
				sql11ReservedKeywordsUsedAsFunctionName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CAST() { return GetToken(HiveParser.KW_CAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AS() { return GetToken(HiveParser.KW_AS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext castExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 644, RULE_castExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3742;
			Match(KW_CAST);
			State = 3743;
			Match(LPAREN);
			State = 3744;
			expression(0);
			State = 3745;
			Match(KW_AS);
			State = 3746;
			primitiveType();
			State = 3747;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CASE() { return GetToken(HiveParser.KW_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(HiveParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_WHEN() { return GetTokens(HiveParser.KW_WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN(int i) {
			return GetToken(HiveParser.KW_WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_THEN() { return GetTokens(HiveParser.KW_THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THEN(int i) {
			return GetToken(HiveParser.KW_THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE() { return GetToken(HiveParser.KW_ELSE, 0); }
		public CaseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCaseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseExpressionContext caseExpression() {
		CaseExpressionContext _localctx = new CaseExpressionContext(Context, State);
		EnterRule(_localctx, 646, RULE_caseExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3749;
			Match(KW_CASE);
			State = 3750;
			expression(0);
			State = 3756;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3751;
				Match(KW_WHEN);
				State = 3752;
				expression(0);
				State = 3753;
				Match(KW_THEN);
				State = 3754;
				expression(0);
				}
				}
				State = 3758;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KW_WHEN );
			State = 3762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ELSE) {
				{
				State = 3760;
				Match(KW_ELSE);
				State = 3761;
				expression(0);
				}
			}

			State = 3764;
			Match(KW_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CASE() { return GetToken(HiveParser.KW_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_END() { return GetToken(HiveParser.KW_END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_WHEN() { return GetTokens(HiveParser.KW_WHEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN(int i) {
			return GetToken(HiveParser.KW_WHEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] KW_THEN() { return GetTokens(HiveParser.KW_THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_THEN(int i) {
			return GetToken(HiveParser.KW_THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELSE() { return GetToken(HiveParser.KW_ELSE, 0); }
		public WhenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterWhenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitWhenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhenExpressionContext whenExpression() {
		WhenExpressionContext _localctx = new WhenExpressionContext(Context, State);
		EnterRule(_localctx, 648, RULE_whenExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3766;
			Match(KW_CASE);
			State = 3772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3767;
				Match(KW_WHEN);
				State = 3768;
				expression(0);
				State = 3769;
				Match(KW_THEN);
				State = 3770;
				expression(0);
				}
				}
				State = 3774;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KW_WHEN );
			State = 3778;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_ELSE) {
				{
				State = 3776;
				Match(KW_ELSE);
				State = 3777;
				expression(0);
				}
			}

			State = 3780;
			Match(KW_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloorExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FLOOR() { return GetToken(HiveParser.KW_FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TO() { return GetToken(HiveParser.KW_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FloorDateQualifiersContext floorDateQualifiers() {
			return GetRuleContext<FloorDateQualifiersContext>(0);
		}
		public FloorExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floorExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterFloorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitFloorExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloorExpressionContext floorExpression() {
		FloorExpressionContext _localctx = new FloorExpressionContext(Context, State);
		EnterRule(_localctx, 650, RULE_floorExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3782;
			Match(KW_FLOOR);
			State = 3783;
			Match(LPAREN);
			State = 3784;
			expression(0);
			State = 3787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_TO) {
				{
				State = 3785;
				Match(KW_TO);
				State = 3786;
				floorDateQualifiers();
				}
			}

			State = 3789;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloorDateQualifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_YEAR() { return GetToken(HiveParser.KW_YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_QUARTER() { return GetToken(HiveParser.KW_QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MONTH() { return GetToken(HiveParser.KW_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WEEK() { return GetToken(HiveParser.KW_WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DAY() { return GetToken(HiveParser.KW_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_HOUR() { return GetToken(HiveParser.KW_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MINUTE() { return GetToken(HiveParser.KW_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SECOND() { return GetToken(HiveParser.KW_SECOND, 0); }
		public FloorDateQualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floorDateQualifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterFloorDateQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitFloorDateQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloorDateQualifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloorDateQualifiersContext floorDateQualifiers() {
		FloorDateQualifiersContext _localctx = new FloorDateQualifiersContext(Context, State);
		EnterRule(_localctx, 652, RULE_floorDateQualifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3791;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (KW_YEAR - 265)) | (1L << (KW_QUARTER - 265)) | (1L << (KW_MONTH - 265)) | (1L << (KW_WEEK - 265)) | (1L << (KW_DAY - 265)) | (1L << (KW_HOUR - 265)) | (1L << (KW_MINUTE - 265)) | (1L << (KW_SECOND - 265)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXTRACT() { return GetToken(HiveParser.KW_EXTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeQualifiersContext timeQualifiers() {
			return GetRuleContext<TimeQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FROM() { return GetToken(HiveParser.KW_FROM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public ExtractExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExtractExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExtractExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtractExpressionContext extractExpression() {
		ExtractExpressionContext _localctx = new ExtractExpressionContext(Context, State);
		EnterRule(_localctx, 654, RULE_extractExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3793;
			Match(KW_EXTRACT);
			State = 3794;
			Match(LPAREN);
			State = 3795;
			timeQualifiers();
			State = 3796;
			Match(KW_FROM);
			State = 3797;
			expression(0);
			State = 3798;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeQualifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_YEAR() { return GetToken(HiveParser.KW_YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_QUARTER() { return GetToken(HiveParser.KW_QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MONTH() { return GetToken(HiveParser.KW_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WEEK() { return GetToken(HiveParser.KW_WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DAY() { return GetToken(HiveParser.KW_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DOW() { return GetToken(HiveParser.KW_DOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_HOUR() { return GetToken(HiveParser.KW_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MINUTE() { return GetToken(HiveParser.KW_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SECOND() { return GetToken(HiveParser.KW_SECOND, 0); }
		public TimeQualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeQualifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTimeQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTimeQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeQualifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeQualifiersContext timeQualifiers() {
		TimeQualifiersContext _localctx = new TimeQualifiersContext(Context, State);
		EnterRule(_localctx, 656, RULE_timeQualifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3800;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (KW_YEAR - 265)) | (1L << (KW_QUARTER - 265)) | (1L << (KW_MONTH - 265)) | (1L << (KW_WEEK - 265)) | (1L << (KW_DAY - 265)) | (1L << (KW_DOW - 265)) | (1L << (KW_HOUR - 265)) | (1L << (KW_MINUTE - 265)) | (1L << (KW_SECOND - 265)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalLiteralContext intervalLiteral() {
			return GetRuleContext<IntervalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(HiveParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateLiteralContext dateLiteral() {
			return GetRuleContext<DateLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimestampLiteralContext timestampLiteral() {
			return GetRuleContext<TimestampLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimestampLocalTZLiteralContext timestampLocalTZLiteral() {
			return GetRuleContext<TimestampLocalTZLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralSequenceContext stringLiteralSequence() {
			return GetRuleContext<StringLiteralSequenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegralLiteral() { return GetToken(HiveParser.IntegralLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NumberLiteral() { return GetToken(HiveParser.NumberLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharSetStringLiteralContext charSetStringLiteral() {
			return GetRuleContext<CharSetStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanValueContext booleanValue() {
			return GetRuleContext<BooleanValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULL() { return GetToken(HiveParser.KW_NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 658, RULE_constant);
		try {
			State = 3814;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,467,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3802;
				intervalLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3803;
				Match(Number);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3804;
				dateLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3805;
				timestampLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3806;
				timestampLocalTZLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3807;
				Match(StringLiteral);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3808;
				stringLiteralSequence();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3809;
				Match(IntegralLiteral);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3810;
				Match(NumberLiteral);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3811;
				charSetStringLiteral();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3812;
				booleanValue();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 3813;
				Match(KW_NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] StringLiteral() { return GetTokens(HiveParser.StringLiteral); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral(int i) {
			return GetToken(HiveParser.StringLiteral, i);
		}
		public StringLiteralSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteralSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterStringLiteralSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitStringLiteralSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteralSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralSequenceContext stringLiteralSequence() {
		StringLiteralSequenceContext _localctx = new StringLiteralSequenceContext(Context, State);
		EnterRule(_localctx, 660, RULE_stringLiteralSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3816;
			Match(StringLiteral);
			State = 3818;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3817;
					Match(StringLiteral);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3820;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,468,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharSetStringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharSetName() { return GetToken(HiveParser.CharSetName, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharSetLiteral() { return GetToken(HiveParser.CharSetLiteral, 0); }
		public CharSetStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charSetStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterCharSetStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitCharSetStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharSetStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharSetStringLiteralContext charSetStringLiteral() {
		CharSetStringLiteralContext _localctx = new CharSetStringLiteralContext(Context, State);
		EnterRule(_localctx, 662, RULE_charSetStringLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3822;
			Match(CharSetName);
			State = 3823;
			Match(CharSetLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATE() { return GetToken(HiveParser.KW_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CURRENT_DATE() { return GetToken(HiveParser.KW_CURRENT_DATE, 0); }
		public DateLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDateLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDateLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateLiteralContext dateLiteral() {
		DateLiteralContext _localctx = new DateLiteralContext(Context, State);
		EnterRule(_localctx, 664, RULE_dateLiteral);
		try {
			State = 3828;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_DATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3825;
				Match(KW_DATE);
				State = 3826;
				Match(StringLiteral);
				}
				break;
			case KW_CURRENT_DATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3827;
				Match(KW_CURRENT_DATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimestampLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TIMESTAMP() { return GetToken(HiveParser.KW_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CURRENT_TIMESTAMP() { return GetToken(HiveParser.KW_CURRENT_TIMESTAMP, 0); }
		public TimestampLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestampLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTimestampLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTimestampLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestampLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimestampLiteralContext timestampLiteral() {
		TimestampLiteralContext _localctx = new TimestampLiteralContext(Context, State);
		EnterRule(_localctx, 666, RULE_timestampLiteral);
		try {
			State = 3833;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_TIMESTAMP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3830;
				Match(KW_TIMESTAMP);
				State = 3831;
				Match(StringLiteral);
				}
				break;
			case KW_CURRENT_TIMESTAMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3832;
				Match(KW_CURRENT_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimestampLocalTZLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TIMESTAMPLOCALTZ() { return GetToken(HiveParser.KW_TIMESTAMPLOCALTZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		public TimestampLocalTZLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timestampLocalTZLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTimestampLocalTZLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTimestampLocalTZLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestampLocalTZLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimestampLocalTZLiteralContext timestampLocalTZLiteral() {
		TimestampLocalTZLiteralContext _localctx = new TimestampLocalTZLiteralContext(Context, State);
		EnterRule(_localctx, 668, RULE_timestampLocalTZLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3835;
			Match(KW_TIMESTAMPLOCALTZ);
			State = 3836;
			Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(HiveParser.Number, 0); }
		public IntervalValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterIntervalValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitIntervalValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalValueContext intervalValue() {
		IntervalValueContext _localctx = new IntervalValueContext(Context, State);
		EnterRule(_localctx, 670, RULE_intervalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3838;
			_la = TokenStream.LA(1);
			if ( !(_la==StringLiteral || _la==Number) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalValueContext intervalValue() {
			return GetRuleContext<IntervalValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalQualifiersContext intervalQualifiers() {
			return GetRuleContext<IntervalQualifiersContext>(0);
		}
		public IntervalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterIntervalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitIntervalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalLiteralContext intervalLiteral() {
		IntervalLiteralContext _localctx = new IntervalLiteralContext(Context, State);
		EnterRule(_localctx, 672, RULE_intervalLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3840;
			intervalValue();
			State = 3841;
			intervalQualifiers();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalValueContext intervalValue() {
			return GetRuleContext<IntervalValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalQualifiersContext intervalQualifiers() {
			return GetRuleContext<IntervalQualifiersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INTERVAL() { return GetToken(HiveParser.KW_INTERVAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IntervalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterIntervalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitIntervalExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalExpressionContext intervalExpression() {
		IntervalExpressionContext _localctx = new IntervalExpressionContext(Context, State);
		EnterRule(_localctx, 674, RULE_intervalExpression);
		try {
			State = 3858;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,471,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3843;
				Match(LPAREN);
				State = 3844;
				intervalValue();
				State = 3845;
				Match(RPAREN);
				State = 3846;
				intervalQualifiers();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3848;
				Match(KW_INTERVAL);
				State = 3849;
				intervalValue();
				State = 3850;
				intervalQualifiers();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3852;
				Match(KW_INTERVAL);
				State = 3853;
				Match(LPAREN);
				State = 3854;
				expression(0);
				State = 3855;
				Match(RPAREN);
				State = 3856;
				intervalQualifiers();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalQualifiersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_YEAR() { return GetToken(HiveParser.KW_YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TO() { return GetToken(HiveParser.KW_TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MONTH() { return GetToken(HiveParser.KW_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DAY() { return GetToken(HiveParser.KW_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SECOND() { return GetToken(HiveParser.KW_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_HOUR() { return GetToken(HiveParser.KW_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MINUTE() { return GetToken(HiveParser.KW_MINUTE, 0); }
		public IntervalQualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalQualifiers; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterIntervalQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitIntervalQualifiers(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalQualifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalQualifiersContext intervalQualifiers() {
		IntervalQualifiersContext _localctx = new IntervalQualifiersContext(Context, State);
		EnterRule(_localctx, 676, RULE_intervalQualifiers);
		try {
			State = 3872;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,472,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3860;
				Match(KW_YEAR);
				State = 3861;
				Match(KW_TO);
				State = 3862;
				Match(KW_MONTH);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3863;
				Match(KW_DAY);
				State = 3864;
				Match(KW_TO);
				State = 3865;
				Match(KW_SECOND);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3866;
				Match(KW_YEAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3867;
				Match(KW_MONTH);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3868;
				Match(KW_DAY);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3869;
				Match(KW_HOUR);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3870;
				Match(KW_MINUTE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3871;
				Match(KW_SECOND);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalExpressionContext intervalExpression() {
			return GetRuleContext<IntervalExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtractExpressionContext extractExpression() {
			return GetRuleContext<ExtractExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloorExpressionContext floorExpression() {
			return GetRuleContext<FloorExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseExpressionContext caseExpression() {
			return GetRuleContext<CaseExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext whenExpression() {
			return GetRuleContext<WhenExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExpressionContext subQueryExpression() {
			return GetRuleContext<SubQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableOrColumnContext tableOrColumn() {
			return GetRuleContext<TableOrColumnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsInParenthesisContext expressionsInParenthesis() {
			return GetRuleContext<ExpressionsInParenthesisContext>(0);
		}
		public AtomExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atomExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterAtomExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitAtomExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomExpressionContext atomExpression() {
		AtomExpressionContext _localctx = new AtomExpressionContext(Context, State);
		EnterRule(_localctx, 678, RULE_atomExpression);
		try {
			State = 3885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,473,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3874;
				constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3875;
				intervalExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3876;
				castExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3877;
				extractExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3878;
				floorExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3879;
				caseExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3880;
				whenExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3881;
				subQueryExpression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 3882;
				function();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 3883;
				tableOrColumn();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 3884;
				expressionsInParenthesis();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceUnaryOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(HiveParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(HiveParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(HiveParser.TILDE, 0); }
		public PrecedenceUnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceUnaryOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceUnaryOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceUnaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceUnaryOperatorContext precedenceUnaryOperator() {
		PrecedenceUnaryOperatorContext _localctx = new PrecedenceUnaryOperatorContext(Context, State);
		EnterRule(_localctx, 680, RULE_precedenceUnaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3887;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (PLUS - 350)) | (1L << (MINUS - 350)) | (1L << (TILDE - 350)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULL() { return GetToken(HiveParser.KW_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRUE() { return GetToken(HiveParser.KW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FALSE() { return GetToken(HiveParser.KW_FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(HiveParser.KW_NOT, 0); }
		public IsConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterIsCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitIsCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsConditionContext isCondition() {
		IsConditionContext _localctx = new IsConditionContext(Context, State);
		EnterRule(_localctx, 682, RULE_isCondition);
		try {
			State = 3898;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,474,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3889;
				Match(KW_NULL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3890;
				Match(KW_TRUE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3891;
				Match(KW_FALSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3892;
				Match(KW_NOT);
				State = 3893;
				Match(KW_NULL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3894;
				Match(KW_NOT);
				State = 3895;
				Match(KW_TRUE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3896;
				Match(KW_NOT);
				State = 3897;
				Match(KW_FALSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceBitwiseXorOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISEXOR() { return GetToken(HiveParser.BITWISEXOR, 0); }
		public PrecedenceBitwiseXorOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceBitwiseXorOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceBitwiseXorOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceBitwiseXorOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceBitwiseXorOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceBitwiseXorOperatorContext precedenceBitwiseXorOperator() {
		PrecedenceBitwiseXorOperatorContext _localctx = new PrecedenceBitwiseXorOperatorContext(Context, State);
		EnterRule(_localctx, 684, RULE_precedenceBitwiseXorOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3900;
			Match(BITWISEXOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceStarOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(HiveParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(HiveParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(HiveParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(HiveParser.DIV, 0); }
		public PrecedenceStarOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceStarOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceStarOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceStarOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceStarOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceStarOperatorContext precedenceStarOperator() {
		PrecedenceStarOperatorContext _localctx = new PrecedenceStarOperatorContext(Context, State);
		EnterRule(_localctx, 686, RULE_precedenceStarOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3902;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (DIVIDE - 349)) | (1L << (STAR - 349)) | (1L << (MOD - 349)) | (1L << (DIV - 349)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedencePlusOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(HiveParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(HiveParser.MINUS, 0); }
		public PrecedencePlusOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedencePlusOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedencePlusOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedencePlusOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedencePlusOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedencePlusOperatorContext precedencePlusOperator() {
		PrecedencePlusOperatorContext _localctx = new PrecedencePlusOperatorContext(Context, State);
		EnterRule(_localctx, 688, RULE_precedencePlusOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3904;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceConcatenateOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCATENATE() { return GetToken(HiveParser.CONCATENATE, 0); }
		public PrecedenceConcatenateOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceConcatenateOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceConcatenateOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceConcatenateOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceConcatenateOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceConcatenateOperatorContext precedenceConcatenateOperator() {
		PrecedenceConcatenateOperatorContext _localctx = new PrecedenceConcatenateOperatorContext(Context, State);
		EnterRule(_localctx, 690, RULE_precedenceConcatenateOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3906;
			Match(CONCATENATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceAmpersandOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(HiveParser.AMPERSAND, 0); }
		public PrecedenceAmpersandOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceAmpersandOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceAmpersandOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceAmpersandOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceAmpersandOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceAmpersandOperatorContext precedenceAmpersandOperator() {
		PrecedenceAmpersandOperatorContext _localctx = new PrecedenceAmpersandOperatorContext(Context, State);
		EnterRule(_localctx, 692, RULE_precedenceAmpersandOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3908;
			Match(AMPERSAND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceBitwiseOrOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISEOR() { return GetToken(HiveParser.BITWISEOR, 0); }
		public PrecedenceBitwiseOrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceBitwiseOrOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceBitwiseOrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceBitwiseOrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceBitwiseOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceBitwiseOrOperatorContext precedenceBitwiseOrOperator() {
		PrecedenceBitwiseOrOperatorContext _localctx = new PrecedenceBitwiseOrOperatorContext(Context, State);
		EnterRule(_localctx, 694, RULE_precedenceBitwiseOrOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3910;
			Match(BITWISEOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceRegexpOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LIKE() { return GetToken(HiveParser.KW_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RLIKE() { return GetToken(HiveParser.KW_RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REGEXP() { return GetToken(HiveParser.KW_REGEXP, 0); }
		public PrecedenceRegexpOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceRegexpOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceRegexpOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceRegexpOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceRegexpOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceRegexpOperatorContext precedenceRegexpOperator() {
		PrecedenceRegexpOperatorContext _localctx = new PrecedenceRegexpOperatorContext(Context, State);
		EnterRule(_localctx, 696, RULE_precedenceRegexpOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3912;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_LIKE || _la==KW_RLIKE || _la==KW_REGEXP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceSimilarOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceRegexpOperatorContext precedenceRegexpOperator() {
			return GetRuleContext<PrecedenceRegexpOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHANOREQUALTO() { return GetToken(HiveParser.LESSTHANOREQUALTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(HiveParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHANOREQUALTO() { return GetToken(HiveParser.GREATERTHANOREQUALTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(HiveParser.GREATERTHAN, 0); }
		public PrecedenceSimilarOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceSimilarOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceSimilarOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceSimilarOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceSimilarOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceSimilarOperatorContext precedenceSimilarOperator() {
		PrecedenceSimilarOperatorContext _localctx = new PrecedenceSimilarOperatorContext(Context, State);
		EnterRule(_localctx, 698, RULE_precedenceSimilarOperator);
		try {
			State = 3919;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_LIKE:
			case KW_RLIKE:
			case KW_REGEXP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3914;
				precedenceRegexpOperator();
				}
				break;
			case LESSTHANOREQUALTO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3915;
				Match(LESSTHANOREQUALTO);
				}
				break;
			case LESSTHAN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3916;
				Match(LESSTHAN);
				}
				break;
			case GREATERTHANOREQUALTO:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3917;
				Match(GREATERTHANOREQUALTO);
				}
				break;
			case GREATERTHAN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3918;
				Match(GREATERTHAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceDistinctOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(HiveParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISTINCT() { return GetToken(HiveParser.KW_DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FROM() { return GetToken(HiveParser.KW_FROM, 0); }
		public PrecedenceDistinctOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceDistinctOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceDistinctOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceDistinctOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceDistinctOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceDistinctOperatorContext precedenceDistinctOperator() {
		PrecedenceDistinctOperatorContext _localctx = new PrecedenceDistinctOperatorContext(Context, State);
		EnterRule(_localctx, 700, RULE_precedenceDistinctOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3921;
			Match(KW_IS);
			State = 3922;
			Match(KW_DISTINCT);
			State = 3923;
			Match(KW_FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceEqualOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HiveParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_NS() { return GetToken(HiveParser.EQUAL_NS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(HiveParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(HiveParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(HiveParser.KW_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISTINCT() { return GetToken(HiveParser.KW_DISTINCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FROM() { return GetToken(HiveParser.KW_FROM, 0); }
		public PrecedenceEqualOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceEqualOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceEqualOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceEqualOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceEqualOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceEqualOperatorContext precedenceEqualOperator() {
		PrecedenceEqualOperatorContext _localctx = new PrecedenceEqualOperatorContext(Context, State);
		EnterRule(_localctx, 702, RULE_precedenceEqualOperator);
		try {
			State = 3932;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3925;
				Match(EQUAL);
				}
				break;
			case EQUAL_NS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3926;
				Match(EQUAL_NS);
				}
				break;
			case NOTEQUAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3927;
				Match(NOTEQUAL);
				}
				break;
			case KW_IS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3928;
				Match(KW_IS);
				State = 3929;
				Match(KW_NOT);
				State = 3930;
				Match(KW_DISTINCT);
				State = 3931;
				Match(KW_FROM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceNotOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(HiveParser.KW_NOT, 0); }
		public PrecedenceNotOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceNotOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceNotOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceNotOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceNotOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceNotOperatorContext precedenceNotOperator() {
		PrecedenceNotOperatorContext _localctx = new PrecedenceNotOperatorContext(Context, State);
		EnterRule(_localctx, 704, RULE_precedenceNotOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3934;
			Match(KW_NOT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceAndOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AND() { return GetToken(HiveParser.KW_AND, 0); }
		public PrecedenceAndOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceAndOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceAndOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceAndOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceAndOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceAndOperatorContext precedenceAndOperator() {
		PrecedenceAndOperatorContext _localctx = new PrecedenceAndOperatorContext(Context, State);
		EnterRule(_localctx, 706, RULE_precedenceAndOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3936;
			Match(KW_AND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceOrOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OR() { return GetToken(HiveParser.KW_OR, 0); }
		public PrecedenceOrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceOrOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceOrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceOrOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceOrOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceOrOperatorContext precedenceOrOperator() {
		PrecedenceOrOperatorContext _localctx = new PrecedenceOrOperatorContext(Context, State);
		EnterRule(_localctx, 708, RULE_precedenceOrOperator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3938;
			Match(KW_OR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AtomExpressionContext atomExpression() {
			return GetRuleContext<AtomExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LSQUARE() { return GetTokens(HiveParser.LSQUARE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSQUARE(int i) {
			return GetToken(HiveParser.LSQUARE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] RSQUARE() { return GetTokens(HiveParser.RSQUARE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSQUARE(int i) {
			return GetToken(HiveParser.RSQUARE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(HiveParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(HiveParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceUnaryOperatorContext precedenceUnaryOperator() {
			return GetRuleContext<PrecedenceUnaryOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXISTS() { return GetToken(HiveParser.KW_EXISTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExpressionContext subQueryExpression() {
			return GetRuleContext<SubQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceNotOperatorContext precedenceNotOperator() {
			return GetRuleContext<PrecedenceNotOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceBitwiseXorOperatorContext precedenceBitwiseXorOperator() {
			return GetRuleContext<PrecedenceBitwiseXorOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceStarOperatorContext precedenceStarOperator() {
			return GetRuleContext<PrecedenceStarOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedencePlusOperatorContext precedencePlusOperator() {
			return GetRuleContext<PrecedencePlusOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceConcatenateOperatorContext precedenceConcatenateOperator() {
			return GetRuleContext<PrecedenceConcatenateOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceAmpersandOperatorContext precedenceAmpersandOperator() {
			return GetRuleContext<PrecedenceAmpersandOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceBitwiseOrOperatorContext precedenceBitwiseOrOperator() {
			return GetRuleContext<PrecedenceBitwiseOrOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceEqualOperatorContext precedenceEqualOperator() {
			return GetRuleContext<PrecedenceEqualOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceDistinctOperatorContext precedenceDistinctOperator() {
			return GetRuleContext<PrecedenceDistinctOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceAndOperatorContext precedenceAndOperator() {
			return GetRuleContext<PrecedenceAndOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceOrOperatorContext precedenceOrOperator() {
			return GetRuleContext<PrecedenceOrOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IS() { return GetToken(HiveParser.KW_IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IsConditionContext isCondition() {
			return GetRuleContext<IsConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceSimilarExpressionPartContext precedenceSimilarExpressionPart() {
			return GetRuleContext<PrecedenceSimilarExpressionPartContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 710;
		EnterRecursionRule(_localctx, 710, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3965;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,479,Context) ) {
			case 1:
				{
				State = 3941;
				atomExpression();
				State = 3950;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,478,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 3948;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case LSQUARE:
							{
							{
							State = 3942;
							Match(LSQUARE);
							State = 3943;
							expression(0);
							State = 3944;
							Match(RSQUARE);
							}
							}
							break;
						case DOT:
							{
							{
							State = 3946;
							Match(DOT);
							State = 3947;
							identifier();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						} 
					}
					State = 3952;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,478,Context);
				}
				}
				break;
			case 2:
				{
				State = 3953;
				precedenceUnaryOperator();
				State = 3954;
				expression(15);
				}
				break;
			case 3:
				{
				State = 3956;
				Match(KW_EXISTS);
				State = 3957;
				subQueryExpression();
				}
				break;
			case 4:
				{
				State = 3958;
				precedenceNotOperator();
				State = 3959;
				expression(4);
				}
				break;
			case 5:
				{
				State = 3961;
				Match(LPAREN);
				State = 3962;
				expression(0);
				State = 3963;
				Match(RPAREN);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 4013;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,482,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 4011;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,481,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3967;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 3968;
						precedenceBitwiseXorOperator();
						State = 3969;
						expression(14);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3971;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 3972;
						precedenceStarOperator();
						State = 3973;
						expression(13);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3975;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 3976;
						precedencePlusOperator();
						State = 3977;
						expression(12);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3979;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 3980;
						precedenceConcatenateOperator();
						State = 3981;
						expression(11);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3983;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 3984;
						precedenceAmpersandOperator();
						State = 3985;
						expression(10);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3987;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 3988;
						precedenceBitwiseOrOperator();
						State = 3989;
						expression(9);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3991;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 3994;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,480,Context) ) {
						case 1:
							{
							State = 3992;
							precedenceEqualOperator();
							}
							break;
						case 2:
							{
							State = 3993;
							precedenceDistinctOperator();
							}
							break;
						}
						State = 3996;
						expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 3998;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 3999;
						precedenceAndOperator();
						State = 4000;
						expression(4);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 4002;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 4003;
						precedenceOrOperator();
						State = 4004;
						expression(3);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 4006;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 4007;
						Match(KW_IS);
						State = 4008;
						isCondition();
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 4009;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 4010;
						precedenceSimilarExpressionPart();
						}
						break;
					}
					} 
				}
				State = 4015;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,482,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SubQueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		public SubQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subQueryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSubQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSubQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubQueryExpressionContext subQueryExpression() {
		SubQueryExpressionContext _localctx = new SubQueryExpressionContext(Context, State);
		EnterRule(_localctx, 712, RULE_subQueryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4016;
			Match(LPAREN);
			State = 4017;
			selectStatement();
			State = 4018;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceSimilarExpressionPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceSimilarOperatorContext precedenceSimilarOperator() {
			return GetRuleContext<PrecedenceSimilarOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceSimilarExpressionAtomContext precedenceSimilarExpressionAtom() {
			return GetRuleContext<PrecedenceSimilarExpressionAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(HiveParser.KW_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceSimilarExpressionPartNotContext precedenceSimilarExpressionPartNot() {
			return GetRuleContext<PrecedenceSimilarExpressionPartNotContext>(0);
		}
		public PrecedenceSimilarExpressionPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceSimilarExpressionPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceSimilarExpressionPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceSimilarExpressionPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceSimilarExpressionPart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceSimilarExpressionPartContext precedenceSimilarExpressionPart() {
		PrecedenceSimilarExpressionPartContext _localctx = new PrecedenceSimilarExpressionPartContext(Context, State);
		EnterRule(_localctx, 714, RULE_precedenceSimilarExpressionPart);
		try {
			State = 4026;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,483,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4020;
				precedenceSimilarOperator();
				State = 4021;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4023;
				precedenceSimilarExpressionAtom();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4024;
				Match(KW_NOT);
				State = 4025;
				precedenceSimilarExpressionPartNot();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceSimilarExpressionAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(HiveParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceSimilarExpressionInContext precedenceSimilarExpressionIn() {
			return GetRuleContext<PrecedenceSimilarExpressionInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BETWEEN() { return GetToken(HiveParser.KW_BETWEEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AND() { return GetToken(HiveParser.KW_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LIKE() { return GetToken(HiveParser.KW_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ANY() { return GetToken(HiveParser.KW_ANY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsInParenthesisContext expressionsInParenthesis() {
			return GetRuleContext<ExpressionsInParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALL() { return GetToken(HiveParser.KW_ALL, 0); }
		public PrecedenceSimilarExpressionAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceSimilarExpressionAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceSimilarExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceSimilarExpressionAtom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceSimilarExpressionAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceSimilarExpressionAtomContext precedenceSimilarExpressionAtom() {
		PrecedenceSimilarExpressionAtomContext _localctx = new PrecedenceSimilarExpressionAtomContext(Context, State);
		EnterRule(_localctx, 716, RULE_precedenceSimilarExpressionAtom);
		try {
			State = 4041;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,484,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4028;
				Match(KW_IN);
				State = 4029;
				precedenceSimilarExpressionIn();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4030;
				Match(KW_BETWEEN);
				State = 4031;
				expression(0);
				State = 4032;
				Match(KW_AND);
				State = 4033;
				expression(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4035;
				Match(KW_LIKE);
				State = 4036;
				Match(KW_ANY);
				State = 4037;
				expressionsInParenthesis();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4038;
				Match(KW_LIKE);
				State = 4039;
				Match(KW_ALL);
				State = 4040;
				expressionsInParenthesis();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceSimilarExpressionInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubQueryExpressionContext subQueryExpression() {
			return GetRuleContext<SubQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionsInParenthesisContext expressionsInParenthesis() {
			return GetRuleContext<ExpressionsInParenthesisContext>(0);
		}
		public PrecedenceSimilarExpressionInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceSimilarExpressionIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceSimilarExpressionIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceSimilarExpressionIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceSimilarExpressionIn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceSimilarExpressionInContext precedenceSimilarExpressionIn() {
		PrecedenceSimilarExpressionInContext _localctx = new PrecedenceSimilarExpressionInContext(Context, State);
		EnterRule(_localctx, 718, RULE_precedenceSimilarExpressionIn);
		try {
			State = 4045;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,485,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4043;
				subQueryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4044;
				expressionsInParenthesis();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecedenceSimilarExpressionPartNotContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceRegexpOperatorContext precedenceRegexpOperator() {
			return GetRuleContext<PrecedenceRegexpOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecedenceSimilarExpressionAtomContext precedenceSimilarExpressionAtom() {
			return GetRuleContext<PrecedenceSimilarExpressionAtomContext>(0);
		}
		public PrecedenceSimilarExpressionPartNotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precedenceSimilarExpressionPartNot; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrecedenceSimilarExpressionPartNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrecedenceSimilarExpressionPartNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecedenceSimilarExpressionPartNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrecedenceSimilarExpressionPartNotContext precedenceSimilarExpressionPartNot() {
		PrecedenceSimilarExpressionPartNotContext _localctx = new PrecedenceSimilarExpressionPartNotContext(Context, State);
		EnterRule(_localctx, 720, RULE_precedenceSimilarExpressionPartNot);
		try {
			State = 4051;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,486,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4047;
				precedenceRegexpOperator();
				State = 4048;
				expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4050;
				precedenceSimilarExpressionAtom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRUE() { return GetToken(HiveParser.KW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FALSE() { return GetToken(HiveParser.KW_FALSE, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterBooleanValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitBooleanValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanValueContext booleanValue() {
		BooleanValueContext _localctx = new BooleanValueContext(Context, State);
		EnterRule(_localctx, 722, RULE_booleanValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4053;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_TRUE || _la==KW_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanValueTokContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRUE() { return GetToken(HiveParser.KW_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FALSE() { return GetToken(HiveParser.KW_FALSE, 0); }
		public BooleanValueTokContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanValueTok; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterBooleanValueTok(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitBooleanValueTok(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanValueTok(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanValueTokContext booleanValueTok() {
		BooleanValueTokContext _localctx = new BooleanValueTokContext(Context, State);
		EnterRule(_localctx, 724, RULE_booleanValueTok);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4055;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_TRUE || _la==KW_FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableOrPartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionSpecContext partitionSpec() {
			return GetRuleContext<PartitionSpecContext>(0);
		}
		public TableOrPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableOrPartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterTableOrPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitTableOrPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableOrPartition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableOrPartitionContext tableOrPartition() {
		TableOrPartitionContext _localctx = new TableOrPartitionContext(Context, State);
		EnterRule(_localctx, 726, RULE_tableOrPartition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4057;
			tableName();
			State = 4059;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_PARTITION) {
				{
				State = 4058;
				partitionSpec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARTITION() { return GetToken(HiveParser.KW_PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValContext[] partitionVal() {
			return GetRuleContexts<PartitionValContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValContext partitionVal(int i) {
			return GetRuleContext<PartitionValContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public PartitionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPartitionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPartitionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionSpecContext partitionSpec() {
		PartitionSpecContext _localctx = new PartitionSpecContext(Context, State);
		EnterRule(_localctx, 728, RULE_partitionSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4061;
			Match(KW_PARTITION);
			State = 4062;
			Match(LPAREN);
			State = 4063;
			partitionVal();
			State = 4068;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4064;
				Match(COMMA);
				State = 4065;
				partitionVal();
				}
				}
				State = 4070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4071;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HiveParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public PartitionValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPartitionVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPartitionVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartitionVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValContext partitionVal() {
		PartitionValContext _localctx = new PartitionValContext(Context, State);
		EnterRule(_localctx, 730, RULE_partitionVal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4073;
			identifier();
			State = 4076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 4074;
				Match(EQUAL);
				State = 4075;
				constant();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropPartitionSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARTITION() { return GetToken(HiveParser.KW_PARTITION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(HiveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DropPartitionValContext[] dropPartitionVal() {
			return GetRuleContexts<DropPartitionValContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropPartitionValContext dropPartitionVal(int i) {
			return GetRuleContext<DropPartitionValContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(HiveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(HiveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(HiveParser.COMMA, i);
		}
		public DropPartitionSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropPartitionSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDropPartitionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDropPartitionSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropPartitionSpec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropPartitionSpecContext dropPartitionSpec() {
		DropPartitionSpecContext _localctx = new DropPartitionSpecContext(Context, State);
		EnterRule(_localctx, 732, RULE_dropPartitionSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4078;
			Match(KW_PARTITION);
			State = 4079;
			Match(LPAREN);
			State = 4080;
			dropPartitionVal();
			State = 4085;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 4081;
				Match(COMMA);
				State = 4082;
				dropPartitionVal();
				}
				}
				State = 4087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4088;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropPartitionValContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropPartitionOperatorContext dropPartitionOperator() {
			return GetRuleContext<DropPartitionOperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public DropPartitionValContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropPartitionVal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDropPartitionVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDropPartitionVal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropPartitionVal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropPartitionValContext dropPartitionVal() {
		DropPartitionValContext _localctx = new DropPartitionValContext(Context, State);
		EnterRule(_localctx, 734, RULE_dropPartitionVal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4090;
			identifier();
			State = 4091;
			dropPartitionOperator();
			State = 4092;
			constant();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropPartitionOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HiveParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(HiveParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHANOREQUALTO() { return GetToken(HiveParser.LESSTHANOREQUALTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(HiveParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHANOREQUALTO() { return GetToken(HiveParser.GREATERTHANOREQUALTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(HiveParser.GREATERTHAN, 0); }
		public DropPartitionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropPartitionOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDropPartitionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDropPartitionOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDropPartitionOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DropPartitionOperatorContext dropPartitionOperator() {
		DropPartitionOperatorContext _localctx = new DropPartitionOperatorContext(Context, State);
		EnterRule(_localctx, 736, RULE_dropPartitionOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4094;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (EQUAL - 342)) | (1L << (NOTEQUAL - 342)) | (1L << (LESSTHANOREQUALTO - 342)) | (1L << (LESSTHAN - 342)) | (1L << (GREATERTHANOREQUALTO - 342)) | (1L << (GREATERTHAN - 342)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SysFuncNamesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AND() { return GetToken(HiveParser.KW_AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OR() { return GetToken(HiveParser.KW_OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOT() { return GetToken(HiveParser.KW_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LIKE() { return GetToken(HiveParser.KW_LIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(HiveParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CASE() { return GetToken(HiveParser.KW_CASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHEN() { return GetToken(HiveParser.KW_WHEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FLOOR() { return GetToken(HiveParser.KW_FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TINYINT() { return GetToken(HiveParser.KW_TINYINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SMALLINT() { return GetToken(HiveParser.KW_SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INT() { return GetToken(HiveParser.KW_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BIGINT() { return GetToken(HiveParser.KW_BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FLOAT() { return GetToken(HiveParser.KW_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DOUBLE() { return GetToken(HiveParser.KW_DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BOOLEAN() { return GetToken(HiveParser.KW_BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRING() { return GetToken(HiveParser.KW_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BINARY() { return GetToken(HiveParser.KW_BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARRAY() { return GetToken(HiveParser.KW_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAP() { return GetToken(HiveParser.KW_MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRUCT() { return GetToken(HiveParser.KW_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNIONTYPE() { return GetToken(HiveParser.KW_UNIONTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(HiveParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_NS() { return GetToken(HiveParser.EQUAL_NS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTEQUAL() { return GetToken(HiveParser.NOTEQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHANOREQUALTO() { return GetToken(HiveParser.LESSTHANOREQUALTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESSTHAN() { return GetToken(HiveParser.LESSTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHANOREQUALTO() { return GetToken(HiveParser.GREATERTHANOREQUALTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATERTHAN() { return GetToken(HiveParser.GREATERTHAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE() { return GetToken(HiveParser.DIVIDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(HiveParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(HiveParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STAR() { return GetToken(HiveParser.STAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(HiveParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(HiveParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND() { return GetToken(HiveParser.AMPERSAND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TILDE() { return GetToken(HiveParser.TILDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISEOR() { return GetToken(HiveParser.BITWISEOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISEXOR() { return GetToken(HiveParser.BITWISEXOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RLIKE() { return GetToken(HiveParser.KW_RLIKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REGEXP() { return GetToken(HiveParser.KW_REGEXP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IN() { return GetToken(HiveParser.KW_IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BETWEEN() { return GetToken(HiveParser.KW_BETWEEN, 0); }
		public SysFuncNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sysFuncNames; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSysFuncNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSysFuncNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSysFuncNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SysFuncNamesContext sysFuncNames() {
		SysFuncNamesContext _localctx = new SysFuncNamesContext(Context, State);
		EnterRule(_localctx, 738, RULE_sysFuncNames);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4096;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << KW_AND) | (1L << KW_OR) | (1L << KW_NOT) | (1L << KW_LIKE) | (1L << KW_IF))) != 0) || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (KW_BOOLEAN - 77)) | (1L << (KW_TINYINT - 77)) | (1L << (KW_SMALLINT - 77)) | (1L << (KW_INT - 77)) | (1L << (KW_BIGINT - 77)) | (1L << (KW_FLOAT - 77)) | (1L << (KW_DOUBLE - 77)) | (1L << (KW_STRING - 77)) | (1L << (KW_ARRAY - 77)) | (1L << (KW_STRUCT - 77)) | (1L << (KW_MAP - 77)) | (1L << (KW_UNIONTYPE - 77)) | (1L << (KW_RLIKE - 77)) | (1L << (KW_REGEXP - 77)))) != 0) || ((((_la - 162)) & ~0x3f) == 0 && ((1L << (_la - 162)) & ((1L << (KW_CASE - 162)) | (1L << (KW_WHEN - 162)) | (1L << (KW_IN - 162)) | (1L << (KW_BETWEEN - 162)) | (1L << (KW_BINARY - 162)))) != 0) || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (KW_FLOOR - 300)) | (1L << (EQUAL - 300)) | (1L << (EQUAL_NS - 300)) | (1L << (NOTEQUAL - 300)) | (1L << (LESSTHANOREQUALTO - 300)) | (1L << (LESSTHAN - 300)) | (1L << (GREATERTHANOREQUALTO - 300)) | (1L << (GREATERTHAN - 300)) | (1L << (DIVIDE - 300)) | (1L << (PLUS - 300)) | (1L << (MINUS - 300)) | (1L << (STAR - 300)) | (1L << (MOD - 300)) | (1L << (DIV - 300)) | (1L << (AMPERSAND - 300)) | (1L << (TILDE - 300)) | (1L << (BITWISEOR - 300)) | (1L << (BITWISEXOR - 300)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescFuncNamesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SysFuncNamesContext sysFuncNames() {
			return GetRuleContext<SysFuncNamesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(HiveParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionIdentifierContext functionIdentifier() {
			return GetRuleContext<FunctionIdentifierContext>(0);
		}
		public DescFuncNamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descFuncNames; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterDescFuncNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitDescFuncNames(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescFuncNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescFuncNamesContext descFuncNames() {
		DescFuncNamesContext _localctx = new DescFuncNamesContext(Context, State);
		EnterRule(_localctx, 740, RULE_descFuncNames);
		try {
			State = 4101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,491,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4098;
				sysFuncNames();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4099;
				Match(StringLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4100;
				functionIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(HiveParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NonReservedContext nonReserved() {
			return GetRuleContext<NonReservedContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 742, RULE_identifier);
		try {
			State = 4105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4103;
				Match(Identifier);
				}
				break;
			case KW_ASC:
			case KW_DESC:
			case KW_NULLS:
			case KW_LAST:
			case KW_OVERWRITE:
			case KW_PARTITIONS:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_AFTER:
			case KW_RENAME:
			case KW_COMMENT:
			case KW_TINYINT:
			case KW_DATETIME:
			case KW_ZONE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_UNIONTYPE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_BUCKETS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_LOCATION:
			case KW_BUCKET:
			case KW_ADD:
			case KW_REPLACE:
			case KW_TEMPORARY:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_STREAMTABLE:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_PLUS:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_PURGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_CONTINUE:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_DIRECTORIES:
			case KW_SETS:
			case KW_NOSCAN:
			case KW_ROLE:
			case KW_ROLES:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_QUERY:
			case KW_QUARTER:
			case KW_MONTH:
			case KW_WEEK:
			case KW_DAY:
			case KW_DOW:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_TRANSACTION:
			case KW_WORK:
			case KW_WRITE:
			case KW_ISOLATION:
			case KW_LEVEL:
			case KW_SNAPSHOT:
			case KW_AUTOCOMMIT:
			case KW_CACHE:
			case KW_ENFORCED:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_KEY:
			case KW_ABORT:
			case KW_MATCHED:
			case KW_REPL:
			case KW_DUMP:
			case KW_STATUS:
			case KW_VECTORIZATION:
			case KW_SUMMARY:
			case KW_OPERATOR:
			case KW_EXPRESSION:
			case KW_DETAIL:
			case KW_WAIT:
			case KW_RESOURCE:
			case KW_PLAN:
			case KW_QUERY_PARALLELISM:
			case KW_PLANS:
			case KW_ACTIVATE:
			case KW_DEFAULT:
			case KW_CHECK:
			case KW_POOL:
			case KW_MOVE:
			case KW_DO:
			case KW_ALLOC_FRACTION:
			case KW_SCHEDULING_POLICY:
			case KW_PATH:
			case KW_MAPPING:
			case KW_WORKLOAD:
			case KW_MANAGEMENT:
			case KW_ACTIVE:
			case KW_UNMANAGED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4104;
				nonReserved();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(HiveParser.DOT, 0); }
		public FunctionIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitFunctionIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionIdentifierContext functionIdentifier() {
		FunctionIdentifierContext _localctx = new FunctionIdentifierContext(Context, State);
		EnterRule(_localctx, 744, RULE_functionIdentifier);
		try {
			State = 4112;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,493,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4107;
				identifier();
				State = 4108;
				Match(DOT);
				State = 4109;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4111;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrincipalIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuotedIdentifier() { return GetToken(HiveParser.QuotedIdentifier, 0); }
		public PrincipalIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_principalIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterPrincipalIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitPrincipalIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrincipalIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrincipalIdentifierContext principalIdentifier() {
		PrincipalIdentifierContext _localctx = new PrincipalIdentifierContext(Context, State);
		EnterRule(_localctx, 746, RULE_principalIdentifier);
		try {
			State = 4116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case KW_ASC:
			case KW_DESC:
			case KW_NULLS:
			case KW_LAST:
			case KW_OVERWRITE:
			case KW_PARTITIONS:
			case KW_TABLES:
			case KW_COLUMNS:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_REBUILD:
			case KW_FUNCTIONS:
			case KW_SHOW:
			case KW_MSCK:
			case KW_REPAIR:
			case KW_DIRECTORY:
			case KW_CLUSTER:
			case KW_DISTRIBUTE:
			case KW_SORT:
			case KW_LOAD:
			case KW_EXPORT:
			case KW_REPLICATION:
			case KW_METADATA:
			case KW_DATA:
			case KW_INPATH:
			case KW_CHANGE:
			case KW_FIRST:
			case KW_AFTER:
			case KW_RENAME:
			case KW_COMMENT:
			case KW_TINYINT:
			case KW_DATETIME:
			case KW_ZONE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_UNIONTYPE:
			case KW_PARTITIONED:
			case KW_CLUSTERED:
			case KW_SORTED:
			case KW_BUCKETS:
			case KW_FORMAT:
			case KW_DELIMITED:
			case KW_FIELDS:
			case KW_TERMINATED:
			case KW_ESCAPED:
			case KW_COLLECTION:
			case KW_ITEMS:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_KILL:
			case KW_LINES:
			case KW_STORED:
			case KW_FILEFORMAT:
			case KW_INPUTFORMAT:
			case KW_OUTPUTFORMAT:
			case KW_INPUTDRIVER:
			case KW_OUTPUTDRIVER:
			case KW_ENABLE:
			case KW_DISABLE:
			case KW_LOCATION:
			case KW_BUCKET:
			case KW_ADD:
			case KW_REPLACE:
			case KW_TEMPORARY:
			case KW_FILE:
			case KW_JAR:
			case KW_EXPLAIN:
			case KW_FORMATTED:
			case KW_DEPENDENCY:
			case KW_LOGICAL:
			case KW_SERDE:
			case KW_DEFERRED:
			case KW_SERDEPROPERTIES:
			case KW_DBPROPERTIES:
			case KW_LIMIT:
			case KW_OFFSET:
			case KW_UNSET:
			case KW_TBLPROPERTIES:
			case KW_IDXPROPERTIES:
			case KW_VALUE_TYPE:
			case KW_ELEM_TYPE:
			case KW_DEFINED:
			case KW_MAPJOIN:
			case KW_STREAMTABLE:
			case KW_CLUSTERSTATUS:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_LONG:
			case KW_PLUS:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_DATABASES:
			case KW_MATERIALIZED:
			case KW_SCHEMA:
			case KW_SCHEMAS:
			case KW_SSL:
			case KW_UNDO:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_UNLOCK:
			case KW_SHARED:
			case KW_EXCLUSIVE:
			case KW_UNSIGNED:
			case KW_WHILE:
			case KW_READ:
			case KW_PURGE:
			case KW_ANALYZE:
			case KW_BEFORE:
			case KW_CONTINUE:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_SEMI:
			case KW_TOUCH:
			case KW_ARCHIVE:
			case KW_UNARCHIVE:
			case KW_COMPUTE:
			case KW_STATISTICS:
			case KW_USE:
			case KW_OPTION:
			case KW_CONCATENATE:
			case KW_SHOW_DATABASE:
			case KW_RESTRICT:
			case KW_CASCADE:
			case KW_SKEWED:
			case KW_DIRECTORIES:
			case KW_SETS:
			case KW_NOSCAN:
			case KW_ROLE:
			case KW_ROLES:
			case KW_URI:
			case KW_SERVER:
			case KW_ADMIN:
			case KW_OWNER:
			case KW_PRINCIPALS:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_TRANSACTIONS:
			case KW_REWRITE:
			case KW_REOPTIMIZATION:
			case KW_RELOAD:
			case KW_YEAR:
			case KW_QUERY:
			case KW_QUARTER:
			case KW_MONTH:
			case KW_WEEK:
			case KW_DAY:
			case KW_DOW:
			case KW_HOUR:
			case KW_MINUTE:
			case KW_SECOND:
			case KW_TRANSACTION:
			case KW_WORK:
			case KW_WRITE:
			case KW_ISOLATION:
			case KW_LEVEL:
			case KW_SNAPSHOT:
			case KW_AUTOCOMMIT:
			case KW_CACHE:
			case KW_ENFORCED:
			case KW_VALIDATE:
			case KW_NOVALIDATE:
			case KW_RELY:
			case KW_NORELY:
			case KW_KEY:
			case KW_ABORT:
			case KW_MATCHED:
			case KW_REPL:
			case KW_DUMP:
			case KW_STATUS:
			case KW_VECTORIZATION:
			case KW_SUMMARY:
			case KW_OPERATOR:
			case KW_EXPRESSION:
			case KW_DETAIL:
			case KW_WAIT:
			case KW_RESOURCE:
			case KW_PLAN:
			case KW_QUERY_PARALLELISM:
			case KW_PLANS:
			case KW_ACTIVATE:
			case KW_DEFAULT:
			case KW_CHECK:
			case KW_POOL:
			case KW_MOVE:
			case KW_DO:
			case KW_ALLOC_FRACTION:
			case KW_SCHEDULING_POLICY:
			case KW_PATH:
			case KW_MAPPING:
			case KW_WORKLOAD:
			case KW_MANAGEMENT:
			case KW_ACTIVE:
			case KW_UNMANAGED:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4114;
				identifier();
				}
				break;
			case QuotedIdentifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4115;
				Match(QuotedIdentifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonReservedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ABORT() { return GetToken(HiveParser.KW_ABORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ADD() { return GetToken(HiveParser.KW_ADD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ADMIN() { return GetToken(HiveParser.KW_ADMIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AFTER() { return GetToken(HiveParser.KW_AFTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ANALYZE() { return GetToken(HiveParser.KW_ANALYZE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARCHIVE() { return GetToken(HiveParser.KW_ARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ASC() { return GetToken(HiveParser.KW_ASC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BEFORE() { return GetToken(HiveParser.KW_BEFORE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BUCKET() { return GetToken(HiveParser.KW_BUCKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BUCKETS() { return GetToken(HiveParser.KW_BUCKETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CASCADE() { return GetToken(HiveParser.KW_CASCADE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CHANGE() { return GetToken(HiveParser.KW_CHANGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CHECK() { return GetToken(HiveParser.KW_CHECK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CLUSTER() { return GetToken(HiveParser.KW_CLUSTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CLUSTERED() { return GetToken(HiveParser.KW_CLUSTERED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CLUSTERSTATUS() { return GetToken(HiveParser.KW_CLUSTERSTATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COLLECTION() { return GetToken(HiveParser.KW_COLLECTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COLUMNS() { return GetToken(HiveParser.KW_COLUMNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMMENT() { return GetToken(HiveParser.KW_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPACT() { return GetToken(HiveParser.KW_COMPACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPACTIONS() { return GetToken(HiveParser.KW_COMPACTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_COMPUTE() { return GetToken(HiveParser.KW_COMPUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONCATENATE() { return GetToken(HiveParser.KW_CONCATENATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CONTINUE() { return GetToken(HiveParser.KW_CONTINUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATA() { return GetToken(HiveParser.KW_DATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DAY() { return GetToken(HiveParser.KW_DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATABASES() { return GetToken(HiveParser.KW_DATABASES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATETIME() { return GetToken(HiveParser.KW_DATETIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DBPROPERTIES() { return GetToken(HiveParser.KW_DBPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFERRED() { return GetToken(HiveParser.KW_DEFERRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFINED() { return GetToken(HiveParser.KW_DEFINED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DELIMITED() { return GetToken(HiveParser.KW_DELIMITED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEPENDENCY() { return GetToken(HiveParser.KW_DEPENDENCY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DESC() { return GetToken(HiveParser.KW_DESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DIRECTORIES() { return GetToken(HiveParser.KW_DIRECTORIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DIRECTORY() { return GetToken(HiveParser.KW_DIRECTORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISABLE() { return GetToken(HiveParser.KW_DISABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DISTRIBUTE() { return GetToken(HiveParser.KW_DISTRIBUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DOW() { return GetToken(HiveParser.KW_DOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ELEM_TYPE() { return GetToken(HiveParser.KW_ELEM_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENABLE() { return GetToken(HiveParser.KW_ENABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ENFORCED() { return GetToken(HiveParser.KW_ENFORCED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ESCAPED() { return GetToken(HiveParser.KW_ESCAPED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXCLUSIVE() { return GetToken(HiveParser.KW_EXCLUSIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXPLAIN() { return GetToken(HiveParser.KW_EXPLAIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXPORT() { return GetToken(HiveParser.KW_EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FIELDS() { return GetToken(HiveParser.KW_FIELDS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FILE() { return GetToken(HiveParser.KW_FILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FILEFORMAT() { return GetToken(HiveParser.KW_FILEFORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FIRST() { return GetToken(HiveParser.KW_FIRST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FORMAT() { return GetToken(HiveParser.KW_FORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FORMATTED() { return GetToken(HiveParser.KW_FORMATTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FUNCTIONS() { return GetToken(HiveParser.KW_FUNCTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_HOUR() { return GetToken(HiveParser.KW_HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IDXPROPERTIES() { return GetToken(HiveParser.KW_IDXPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INDEX() { return GetToken(HiveParser.KW_INDEX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INDEXES() { return GetToken(HiveParser.KW_INDEXES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INPATH() { return GetToken(HiveParser.KW_INPATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INPUTDRIVER() { return GetToken(HiveParser.KW_INPUTDRIVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INPUTFORMAT() { return GetToken(HiveParser.KW_INPUTFORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ITEMS() { return GetToken(HiveParser.KW_ITEMS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_JAR() { return GetToken(HiveParser.KW_JAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_KILL() { return GetToken(HiveParser.KW_KILL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_KEYS() { return GetToken(HiveParser.KW_KEYS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_KEY_TYPE() { return GetToken(HiveParser.KW_KEY_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LAST() { return GetToken(HiveParser.KW_LAST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LIMIT() { return GetToken(HiveParser.KW_LIMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OFFSET() { return GetToken(HiveParser.KW_OFFSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LINES() { return GetToken(HiveParser.KW_LINES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOAD() { return GetToken(HiveParser.KW_LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCATION() { return GetToken(HiveParser.KW_LOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCK() { return GetToken(HiveParser.KW_LOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOCKS() { return GetToken(HiveParser.KW_LOCKS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LOGICAL() { return GetToken(HiveParser.KW_LOGICAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LONG() { return GetToken(HiveParser.KW_LONG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAPJOIN() { return GetToken(HiveParser.KW_MAPJOIN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MATERIALIZED() { return GetToken(HiveParser.KW_MATERIALIZED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_METADATA() { return GetToken(HiveParser.KW_METADATA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MINUTE() { return GetToken(HiveParser.KW_MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MONTH() { return GetToken(HiveParser.KW_MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MSCK() { return GetToken(HiveParser.KW_MSCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOSCAN() { return GetToken(HiveParser.KW_NOSCAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NULLS() { return GetToken(HiveParser.KW_NULLS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPTION() { return GetToken(HiveParser.KW_OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUTPUTDRIVER() { return GetToken(HiveParser.KW_OUTPUTDRIVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OUTPUTFORMAT() { return GetToken(HiveParser.KW_OUTPUTFORMAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OVERWRITE() { return GetToken(HiveParser.KW_OVERWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OWNER() { return GetToken(HiveParser.KW_OWNER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARTITIONED() { return GetToken(HiveParser.KW_PARTITIONED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PARTITIONS() { return GetToken(HiveParser.KW_PARTITIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PLUS() { return GetToken(HiveParser.KW_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PRINCIPALS() { return GetToken(HiveParser.KW_PRINCIPALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PURGE() { return GetToken(HiveParser.KW_PURGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_QUERY() { return GetToken(HiveParser.KW_QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_QUARTER() { return GetToken(HiveParser.KW_QUARTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_READ() { return GetToken(HiveParser.KW_READ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REBUILD() { return GetToken(HiveParser.KW_REBUILD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RECORDREADER() { return GetToken(HiveParser.KW_RECORDREADER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RECORDWRITER() { return GetToken(HiveParser.KW_RECORDWRITER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RELOAD() { return GetToken(HiveParser.KW_RELOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RENAME() { return GetToken(HiveParser.KW_RENAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPAIR() { return GetToken(HiveParser.KW_REPAIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPLACE() { return GetToken(HiveParser.KW_REPLACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPLICATION() { return GetToken(HiveParser.KW_REPLICATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RESTRICT() { return GetToken(HiveParser.KW_RESTRICT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REWRITE() { return GetToken(HiveParser.KW_REWRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLE() { return GetToken(HiveParser.KW_ROLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ROLES() { return GetToken(HiveParser.KW_ROLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMA() { return GetToken(HiveParser.KW_SCHEMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEMAS() { return GetToken(HiveParser.KW_SCHEMAS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SECOND() { return GetToken(HiveParser.KW_SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SEMI() { return GetToken(HiveParser.KW_SEMI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERDE() { return GetToken(HiveParser.KW_SERDE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERDEPROPERTIES() { return GetToken(HiveParser.KW_SERDEPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SERVER() { return GetToken(HiveParser.KW_SERVER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SETS() { return GetToken(HiveParser.KW_SETS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHARED() { return GetToken(HiveParser.KW_SHARED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHOW() { return GetToken(HiveParser.KW_SHOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SHOW_DATABASE() { return GetToken(HiveParser.KW_SHOW_DATABASE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SKEWED() { return GetToken(HiveParser.KW_SKEWED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SORT() { return GetToken(HiveParser.KW_SORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SORTED() { return GetToken(HiveParser.KW_SORTED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SSL() { return GetToken(HiveParser.KW_SSL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATISTICS() { return GetToken(HiveParser.KW_STATISTICS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STORED() { return GetToken(HiveParser.KW_STORED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STREAMTABLE() { return GetToken(HiveParser.KW_STREAMTABLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRING() { return GetToken(HiveParser.KW_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STRUCT() { return GetToken(HiveParser.KW_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TABLES() { return GetToken(HiveParser.KW_TABLES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TBLPROPERTIES() { return GetToken(HiveParser.KW_TBLPROPERTIES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TEMPORARY() { return GetToken(HiveParser.KW_TEMPORARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TERMINATED() { return GetToken(HiveParser.KW_TERMINATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TINYINT() { return GetToken(HiveParser.KW_TINYINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TOUCH() { return GetToken(HiveParser.KW_TOUCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRANSACTIONS() { return GetToken(HiveParser.KW_TRANSACTIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNARCHIVE() { return GetToken(HiveParser.KW_UNARCHIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNDO() { return GetToken(HiveParser.KW_UNDO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNIONTYPE() { return GetToken(HiveParser.KW_UNIONTYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNLOCK() { return GetToken(HiveParser.KW_UNLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSET() { return GetToken(HiveParser.KW_UNSET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNSIGNED() { return GetToken(HiveParser.KW_UNSIGNED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_URI() { return GetToken(HiveParser.KW_URI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_USE() { return GetToken(HiveParser.KW_USE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UTC() { return GetToken(HiveParser.KW_UTC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UTCTIMESTAMP() { return GetToken(HiveParser.KW_UTCTIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALUE_TYPE() { return GetToken(HiveParser.KW_VALUE_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VIEW() { return GetToken(HiveParser.KW_VIEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WEEK() { return GetToken(HiveParser.KW_WEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WHILE() { return GetToken(HiveParser.KW_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_YEAR() { return GetToken(HiveParser.KW_YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WORK() { return GetToken(HiveParser.KW_WORK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TRANSACTION() { return GetToken(HiveParser.KW_TRANSACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WRITE() { return GetToken(HiveParser.KW_WRITE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ISOLATION() { return GetToken(HiveParser.KW_ISOLATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_LEVEL() { return GetToken(HiveParser.KW_LEVEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SNAPSHOT() { return GetToken(HiveParser.KW_SNAPSHOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_AUTOCOMMIT() { return GetToken(HiveParser.KW_AUTOCOMMIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RELY() { return GetToken(HiveParser.KW_RELY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NORELY() { return GetToken(HiveParser.KW_NORELY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VALIDATE() { return GetToken(HiveParser.KW_VALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_NOVALIDATE() { return GetToken(HiveParser.KW_NOVALIDATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_KEY() { return GetToken(HiveParser.KW_KEY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MATCHED() { return GetToken(HiveParser.KW_MATCHED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REPL() { return GetToken(HiveParser.KW_REPL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DUMP() { return GetToken(HiveParser.KW_DUMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_STATUS() { return GetToken(HiveParser.KW_STATUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CACHE() { return GetToken(HiveParser.KW_CACHE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VIEWS() { return GetToken(HiveParser.KW_VIEWS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_VECTORIZATION() { return GetToken(HiveParser.KW_VECTORIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SUMMARY() { return GetToken(HiveParser.KW_SUMMARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_OPERATOR() { return GetToken(HiveParser.KW_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_EXPRESSION() { return GetToken(HiveParser.KW_EXPRESSION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DETAIL() { return GetToken(HiveParser.KW_DETAIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WAIT() { return GetToken(HiveParser.KW_WAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ZONE() { return GetToken(HiveParser.KW_ZONE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DEFAULT() { return GetToken(HiveParser.KW_DEFAULT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_REOPTIMIZATION() { return GetToken(HiveParser.KW_REOPTIMIZATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_RESOURCE() { return GetToken(HiveParser.KW_RESOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PLAN() { return GetToken(HiveParser.KW_PLAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PLANS() { return GetToken(HiveParser.KW_PLANS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_QUERY_PARALLELISM() { return GetToken(HiveParser.KW_QUERY_PARALLELISM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ACTIVATE() { return GetToken(HiveParser.KW_ACTIVATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MOVE() { return GetToken(HiveParser.KW_MOVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DO() { return GetToken(HiveParser.KW_DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_POOL() { return GetToken(HiveParser.KW_POOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ALLOC_FRACTION() { return GetToken(HiveParser.KW_ALLOC_FRACTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SCHEDULING_POLICY() { return GetToken(HiveParser.KW_SCHEDULING_POLICY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_PATH() { return GetToken(HiveParser.KW_PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAPPING() { return GetToken(HiveParser.KW_MAPPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_WORKLOAD() { return GetToken(HiveParser.KW_WORKLOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MANAGEMENT() { return GetToken(HiveParser.KW_MANAGEMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ACTIVE() { return GetToken(HiveParser.KW_ACTIVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_UNMANAGED() { return GetToken(HiveParser.KW_UNMANAGED, 0); }
		public NonReservedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonReserved; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterNonReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitNonReserved(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonReserved(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonReservedContext nonReserved() {
		NonReservedContext _localctx = new NonReservedContext(Context, State);
		EnterRule(_localctx, 748, RULE_nonReserved);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4118;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (KW_ASC - 12)) | (1L << (KW_DESC - 12)) | (1L << (KW_NULLS - 12)) | (1L << (KW_LAST - 12)) | (1L << (KW_OVERWRITE - 12)) | (1L << (KW_PARTITIONS - 12)) | (1L << (KW_TABLES - 12)) | (1L << (KW_COLUMNS - 12)) | (1L << (KW_INDEX - 12)) | (1L << (KW_INDEXES - 12)) | (1L << (KW_REBUILD - 12)) | (1L << (KW_FUNCTIONS - 12)) | (1L << (KW_SHOW - 12)) | (1L << (KW_MSCK - 12)) | (1L << (KW_REPAIR - 12)) | (1L << (KW_DIRECTORY - 12)) | (1L << (KW_CLUSTER - 12)) | (1L << (KW_DISTRIBUTE - 12)) | (1L << (KW_SORT - 12)) | (1L << (KW_LOAD - 12)) | (1L << (KW_EXPORT - 12)) | (1L << (KW_REPLICATION - 12)) | (1L << (KW_METADATA - 12)) | (1L << (KW_DATA - 12)) | (1L << (KW_INPATH - 12)) | (1L << (KW_CHANGE - 12)) | (1L << (KW_FIRST - 12)) | (1L << (KW_AFTER - 12)) | (1L << (KW_RENAME - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (KW_COMMENT - 76)) | (1L << (KW_TINYINT - 76)) | (1L << (KW_DATETIME - 76)) | (1L << (KW_ZONE - 76)) | (1L << (KW_STRING - 76)) | (1L << (KW_STRUCT - 76)) | (1L << (KW_UNIONTYPE - 76)) | (1L << (KW_PARTITIONED - 76)) | (1L << (KW_CLUSTERED - 76)) | (1L << (KW_SORTED - 76)) | (1L << (KW_BUCKETS - 76)) | (1L << (KW_FORMAT - 76)) | (1L << (KW_DELIMITED - 76)) | (1L << (KW_FIELDS - 76)) | (1L << (KW_TERMINATED - 76)) | (1L << (KW_ESCAPED - 76)) | (1L << (KW_COLLECTION - 76)) | (1L << (KW_ITEMS - 76)) | (1L << (KW_KEYS - 76)) | (1L << (KW_KEY_TYPE - 76)) | (1L << (KW_KILL - 76)) | (1L << (KW_LINES - 76)) | (1L << (KW_STORED - 76)) | (1L << (KW_FILEFORMAT - 76)) | (1L << (KW_INPUTFORMAT - 76)) | (1L << (KW_OUTPUTFORMAT - 76)) | (1L << (KW_INPUTDRIVER - 76)) | (1L << (KW_OUTPUTDRIVER - 76)) | (1L << (KW_ENABLE - 76)) | (1L << (KW_DISABLE - 76)) | (1L << (KW_LOCATION - 76)) | (1L << (KW_BUCKET - 76)) | (1L << (KW_ADD - 76)) | (1L << (KW_REPLACE - 76)) | (1L << (KW_TEMPORARY - 76)))) != 0) || ((((_la - 141)) & ~0x3f) == 0 && ((1L << (_la - 141)) & ((1L << (KW_FILE - 141)) | (1L << (KW_JAR - 141)) | (1L << (KW_EXPLAIN - 141)) | (1L << (KW_FORMATTED - 141)) | (1L << (KW_DEPENDENCY - 141)) | (1L << (KW_LOGICAL - 141)) | (1L << (KW_SERDE - 141)) | (1L << (KW_DEFERRED - 141)) | (1L << (KW_SERDEPROPERTIES - 141)) | (1L << (KW_DBPROPERTIES - 141)) | (1L << (KW_LIMIT - 141)) | (1L << (KW_OFFSET - 141)) | (1L << (KW_UNSET - 141)) | (1L << (KW_TBLPROPERTIES - 141)) | (1L << (KW_IDXPROPERTIES - 141)) | (1L << (KW_VALUE_TYPE - 141)) | (1L << (KW_ELEM_TYPE - 141)) | (1L << (KW_DEFINED - 141)) | (1L << (KW_MAPJOIN - 141)) | (1L << (KW_STREAMTABLE - 141)) | (1L << (KW_CLUSTERSTATUS - 141)) | (1L << (KW_UTC - 141)) | (1L << (KW_UTCTIMESTAMP - 141)) | (1L << (KW_LONG - 141)) | (1L << (KW_PLUS - 141)) | (1L << (KW_VIEW - 141)) | (1L << (KW_VIEWS - 141)) | (1L << (KW_DATABASES - 141)) | (1L << (KW_MATERIALIZED - 141)) | (1L << (KW_SCHEMA - 141)) | (1L << (KW_SCHEMAS - 141)) | (1L << (KW_SSL - 141)) | (1L << (KW_UNDO - 141)) | (1L << (KW_LOCK - 141)) | (1L << (KW_LOCKS - 141)) | (1L << (KW_UNLOCK - 141)) | (1L << (KW_SHARED - 141)) | (1L << (KW_EXCLUSIVE - 141)) | (1L << (KW_UNSIGNED - 141)) | (1L << (KW_WHILE - 141)) | (1L << (KW_READ - 141)) | (1L << (KW_PURGE - 141)) | (1L << (KW_ANALYZE - 141)) | (1L << (KW_BEFORE - 141)))) != 0) || ((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (KW_CONTINUE - 208)) | (1L << (KW_RECORDREADER - 208)) | (1L << (KW_RECORDWRITER - 208)) | (1L << (KW_SEMI - 208)) | (1L << (KW_TOUCH - 208)) | (1L << (KW_ARCHIVE - 208)) | (1L << (KW_UNARCHIVE - 208)) | (1L << (KW_COMPUTE - 208)) | (1L << (KW_STATISTICS - 208)) | (1L << (KW_USE - 208)) | (1L << (KW_OPTION - 208)) | (1L << (KW_CONCATENATE - 208)) | (1L << (KW_SHOW_DATABASE - 208)) | (1L << (KW_RESTRICT - 208)) | (1L << (KW_CASCADE - 208)) | (1L << (KW_SKEWED - 208)) | (1L << (KW_DIRECTORIES - 208)) | (1L << (KW_SETS - 208)) | (1L << (KW_NOSCAN - 208)) | (1L << (KW_ROLE - 208)) | (1L << (KW_ROLES - 208)) | (1L << (KW_URI - 208)) | (1L << (KW_SERVER - 208)) | (1L << (KW_ADMIN - 208)) | (1L << (KW_OWNER - 208)) | (1L << (KW_PRINCIPALS - 208)) | (1L << (KW_COMPACT - 208)) | (1L << (KW_COMPACTIONS - 208)) | (1L << (KW_TRANSACTIONS - 208)) | (1L << (KW_REWRITE - 208)) | (1L << (KW_REOPTIMIZATION - 208)) | (1L << (KW_RELOAD - 208)) | (1L << (KW_YEAR - 208)) | (1L << (KW_QUERY - 208)) | (1L << (KW_QUARTER - 208)) | (1L << (KW_MONTH - 208)) | (1L << (KW_WEEK - 208)) | (1L << (KW_DAY - 208)) | (1L << (KW_DOW - 208)))) != 0) || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & ((1L << (KW_HOUR - 272)) | (1L << (KW_MINUTE - 272)) | (1L << (KW_SECOND - 272)) | (1L << (KW_TRANSACTION - 272)) | (1L << (KW_WORK - 272)) | (1L << (KW_WRITE - 272)) | (1L << (KW_ISOLATION - 272)) | (1L << (KW_LEVEL - 272)) | (1L << (KW_SNAPSHOT - 272)) | (1L << (KW_AUTOCOMMIT - 272)) | (1L << (KW_CACHE - 272)) | (1L << (KW_ENFORCED - 272)) | (1L << (KW_VALIDATE - 272)) | (1L << (KW_NOVALIDATE - 272)) | (1L << (KW_RELY - 272)) | (1L << (KW_NORELY - 272)) | (1L << (KW_KEY - 272)) | (1L << (KW_ABORT - 272)) | (1L << (KW_MATCHED - 272)) | (1L << (KW_REPL - 272)) | (1L << (KW_DUMP - 272)) | (1L << (KW_STATUS - 272)) | (1L << (KW_VECTORIZATION - 272)) | (1L << (KW_SUMMARY - 272)) | (1L << (KW_OPERATOR - 272)) | (1L << (KW_EXPRESSION - 272)) | (1L << (KW_DETAIL - 272)) | (1L << (KW_WAIT - 272)) | (1L << (KW_RESOURCE - 272)) | (1L << (KW_PLAN - 272)) | (1L << (KW_QUERY_PARALLELISM - 272)) | (1L << (KW_PLANS - 272)) | (1L << (KW_ACTIVATE - 272)) | (1L << (KW_DEFAULT - 272)) | (1L << (KW_CHECK - 272)) | (1L << (KW_POOL - 272)) | (1L << (KW_MOVE - 272)) | (1L << (KW_DO - 272)) | (1L << (KW_ALLOC_FRACTION - 272)) | (1L << (KW_SCHEDULING_POLICY - 272)) | (1L << (KW_PATH - 272)) | (1L << (KW_MAPPING - 272)) | (1L << (KW_WORKLOAD - 272)) | (1L << (KW_MANAGEMENT - 272)) | (1L << (KW_ACTIVE - 272)) | (1L << (KW_UNMANAGED - 272)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql11ReservedKeywordsUsedAsFunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IF() { return GetToken(HiveParser.KW_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_ARRAY() { return GetToken(HiveParser.KW_ARRAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_MAP() { return GetToken(HiveParser.KW_MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BIGINT() { return GetToken(HiveParser.KW_BIGINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BINARY() { return GetToken(HiveParser.KW_BINARY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_BOOLEAN() { return GetToken(HiveParser.KW_BOOLEAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CURRENT_DATE() { return GetToken(HiveParser.KW_CURRENT_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_CURRENT_TIMESTAMP() { return GetToken(HiveParser.KW_CURRENT_TIMESTAMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DATE() { return GetToken(HiveParser.KW_DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_DOUBLE() { return GetToken(HiveParser.KW_DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_FLOAT() { return GetToken(HiveParser.KW_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_GROUPING() { return GetToken(HiveParser.KW_GROUPING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_INT() { return GetToken(HiveParser.KW_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_SMALLINT() { return GetToken(HiveParser.KW_SMALLINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_TIMESTAMP() { return GetToken(HiveParser.KW_TIMESTAMP, 0); }
		public Sql11ReservedKeywordsUsedAsFunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql11ReservedKeywordsUsedAsFunctionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.EnterSql11ReservedKeywordsUsedAsFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IHiveParserListener typedListener = listener as IHiveParserListener;
			if (typedListener != null) typedListener.ExitSql11ReservedKeywordsUsedAsFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHiveParserVisitor<TResult> typedVisitor = visitor as IHiveParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql11ReservedKeywordsUsedAsFunctionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql11ReservedKeywordsUsedAsFunctionNameContext sql11ReservedKeywordsUsedAsFunctionName() {
		Sql11ReservedKeywordsUsedAsFunctionNameContext _localctx = new Sql11ReservedKeywordsUsedAsFunctionNameContext(Context, State);
		EnterRule(_localctx, 750, RULE_sql11ReservedKeywordsUsedAsFunctionName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4120;
			_la = TokenStream.LA(1);
			if ( !(_la==KW_IF || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (KW_BOOLEAN - 77)) | (1L << (KW_SMALLINT - 77)) | (1L << (KW_INT - 77)) | (1L << (KW_BIGINT - 77)) | (1L << (KW_FLOAT - 77)) | (1L << (KW_DOUBLE - 77)) | (1L << (KW_DATE - 77)) | (1L << (KW_TIMESTAMP - 77)) | (1L << (KW_ARRAY - 77)) | (1L << (KW_MAP - 77)))) != 0) || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (KW_BINARY - 206)) | (1L << (KW_CURRENT_DATE - 206)) | (1L << (KW_CURRENT_TIMESTAMP - 206)) | (1L << (KW_GROUPING - 206)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 355: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 14);
		case 10: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x179', '\x101D', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC', 
		'\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF', 
		'\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1', 
		'\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4', 
		'\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6', 
		'\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9', 
		'\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB', 
		'\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE', 
		'\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0', 
		'\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3', 
		'\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5', 
		'\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8', 
		'\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA', 
		'\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD', 
		'\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF', 
		'\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102', 
		'\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104', 
		'\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107', 
		'\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109', 
		'\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C', 
		'\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E', 
		'\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111', 
		'\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113', 
		'\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116', 
		'\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118', 
		'\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B', 
		'\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D', 
		'\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120', 
		'\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122', 
		'\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125', 
		'\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127', 
		'\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A', 
		'\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C', 
		'\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F', 
		'\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131', 
		'\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134', 
		'\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x4', '\x136', '\t', '\x136', 
		'\x4', '\x137', '\t', '\x137', '\x4', '\x138', '\t', '\x138', '\x4', '\x139', 
		'\t', '\x139', '\x4', '\x13A', '\t', '\x13A', '\x4', '\x13B', '\t', '\x13B', 
		'\x4', '\x13C', '\t', '\x13C', '\x4', '\x13D', '\t', '\x13D', '\x4', '\x13E', 
		'\t', '\x13E', '\x4', '\x13F', '\t', '\x13F', '\x4', '\x140', '\t', '\x140', 
		'\x4', '\x141', '\t', '\x141', '\x4', '\x142', '\t', '\x142', '\x4', '\x143', 
		'\t', '\x143', '\x4', '\x144', '\t', '\x144', '\x4', '\x145', '\t', '\x145', 
		'\x4', '\x146', '\t', '\x146', '\x4', '\x147', '\t', '\x147', '\x4', '\x148', 
		'\t', '\x148', '\x4', '\x149', '\t', '\x149', '\x4', '\x14A', '\t', '\x14A', 
		'\x4', '\x14B', '\t', '\x14B', '\x4', '\x14C', '\t', '\x14C', '\x4', '\x14D', 
		'\t', '\x14D', '\x4', '\x14E', '\t', '\x14E', '\x4', '\x14F', '\t', '\x14F', 
		'\x4', '\x150', '\t', '\x150', '\x4', '\x151', '\t', '\x151', '\x4', '\x152', 
		'\t', '\x152', '\x4', '\x153', '\t', '\x153', '\x4', '\x154', '\t', '\x154', 
		'\x4', '\x155', '\t', '\x155', '\x4', '\x156', '\t', '\x156', '\x4', '\x157', 
		'\t', '\x157', '\x4', '\x158', '\t', '\x158', '\x4', '\x159', '\t', '\x159', 
		'\x4', '\x15A', '\t', '\x15A', '\x4', '\x15B', '\t', '\x15B', '\x4', '\x15C', 
		'\t', '\x15C', '\x4', '\x15D', '\t', '\x15D', '\x4', '\x15E', '\t', '\x15E', 
		'\x4', '\x15F', '\t', '\x15F', '\x4', '\x160', '\t', '\x160', '\x4', '\x161', 
		'\t', '\x161', '\x4', '\x162', '\t', '\x162', '\x4', '\x163', '\t', '\x163', 
		'\x4', '\x164', '\t', '\x164', '\x4', '\x165', '\t', '\x165', '\x4', '\x166', 
		'\t', '\x166', '\x4', '\x167', '\t', '\x167', '\x4', '\x168', '\t', '\x168', 
		'\x4', '\x169', '\t', '\x169', '\x4', '\x16A', '\t', '\x16A', '\x4', '\x16B', 
		'\t', '\x16B', '\x4', '\x16C', '\t', '\x16C', '\x4', '\x16D', '\t', '\x16D', 
		'\x4', '\x16E', '\t', '\x16E', '\x4', '\x16F', '\t', '\x16F', '\x4', '\x170', 
		'\t', '\x170', '\x4', '\x171', '\t', '\x171', '\x4', '\x172', '\t', '\x172', 
		'\x4', '\x173', '\t', '\x173', '\x4', '\x174', '\t', '\x174', '\x4', '\x175', 
		'\t', '\x175', '\x4', '\x176', '\t', '\x176', '\x4', '\x177', '\t', '\x177', 
		'\x4', '\x178', '\t', '\x178', '\x4', '\x179', '\t', '\x179', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x2F7', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '\x2FA', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x304', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\a', '\x6', '\x308', '\n', '\x6', '\f', '\x6', '\xE', 
		'\x6', '\x30B', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x310', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x31B', '\n', '\a', '\x3', '\a', '\x5', '\a', '\x31E', 
		'\n', '\a', '\x5', '\a', '\x320', '\n', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x332', '\n', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x337', '\n', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x33C', '\n', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x342', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x346', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x353', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x357', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x35B', 
		'\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x360', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '\x367', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x36D', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x371', '\n', '\xF', '\x5', '\xF', 
		'\x373', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x377', 
		'\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x37E', '\n', '\x10', '\x5', '\x10', '\x380', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x386', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', 
		'\x12', '\x38F', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x392', '\v', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x399', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x39D', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x3C7', '\n', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\x3E2', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\x3E6', '\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x3E9', 
		'\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x3EE', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\a', '\x1F', '\x3FA', '\n', '\x1F', '\f', '\x1F', 
		'\xE', '\x1F', '\x3FD', '\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x405', '\n', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x409', '\n', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '#', '\x3', '#', '\x5', '#', '\x410', '\n', '#', '\x3', 
		'#', '\x5', '#', '\x413', '\n', '#', '\x3', '#', '\x3', '#', '\x5', '#', 
		'\x417', '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x41D', '\n', '#', '\x3', '#', '\x5', '#', '\x420', '\n', '#', '\x3', 
		'#', '\x5', '#', '\x423', '\n', '#', '\x3', '#', '\x5', '#', '\x426', 
		'\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', 
		'\x42C', '\n', '#', '\x3', '#', '\x5', '#', '\x42F', '\n', '#', '\x3', 
		'#', '\x5', '#', '\x432', '\n', '#', '\x3', '#', '\x5', '#', '\x435', 
		'\n', '#', '\x3', '#', '\x5', '#', '\x438', '\n', '#', '\x3', '#', '\x5', 
		'#', '\x43B', '\n', '#', '\x3', '#', '\x5', '#', '\x43E', '\n', '#', '\x3', 
		'#', '\x5', '#', '\x441', '\n', '#', '\x3', '#', '\x5', '#', '\x444', 
		'\n', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x448', '\n', '#', '\x5', 
		'#', '\x44A', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x454', '\n', 
		'$', '\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x459', '\n', '%', 
		'\x3', '%', '\x3', '%', '\x5', '%', '\x45D', '\n', '%', '\x3', '%', '\x5', 
		'%', '\x460', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', 
		'\x46B', '\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x47B', '\n', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x48A', '\n', '\'', '\x3', '\'', 
		'\x3', '\'', '\x5', '\'', '\x48E', '\n', '\'', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x5', '(', 
		'\x49D', '\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', 
		'*', '\x5', '*', '\x4AA', '\n', '*', '\x3', '+', '\x3', '+', '\x5', '+', 
		'\x4AE', '\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x4B3', 
		'\n', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x4CE', 
		'\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x4D3', '\n', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x4DB', '\n', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', 
		'\x4E1', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x4E5', 
		'\n', '\x34', '\x3', '\x34', '\x5', '\x34', '\x4E8', '\n', '\x34', '\x3', 
		'\x34', '\x5', '\x34', '\x4EB', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x4F1', '\n', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', 
		'\x35', '\x4F8', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x5', '\x37', '\x502', '\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x5', 
		'\x38', '\x506', '\n', '\x38', '\x3', '\x38', '\x6', '\x38', '\x509', 
		'\n', '\x38', '\r', '\x38', '\xE', '\x38', '\x50A', '\x3', '\x39', '\x3', 
		'\x39', '\x5', '\x39', '\x50F', '\n', '\x39', '\x3', ':', '\x3', ':', 
		'\a', ':', '\x513', '\n', ':', '\f', ':', '\xE', ':', '\x516', '\v', ':', 
		'\x3', ';', '\x3', ';', '\a', ';', '\x51A', '\n', ';', '\f', ';', '\xE', 
		';', '\x51D', '\v', ';', '\x3', '<', '\x3', '<', '\a', '<', '\x521', '\n', 
		'<', '\f', '<', '\xE', '<', '\x524', '\v', '<', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '>', '\x3', '>', '\x5', '>', '\x52B', '\n', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\a', '>', '\x530', '\n', '>', '\f', '>', 
		'\xE', '>', '\x533', '\v', '>', '\x3', '>', '\x5', '>', '\x536', '\n', 
		'>', '\x3', '>', '\x5', '>', '\x539', '\n', '>', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x5', '?', '\x541', '\n', 
		'?', '\x3', '?', '\x5', '?', '\x544', '\n', '?', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x54C', '\n', 
		'@', '\x3', '@', '\x5', '@', '\x54F', '\n', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x5', '\x41', '\x553', '\n', '\x41', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x5', '\x43', '\x55D', '\n', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x5', '\x43', '\x562', '\n', '\x43', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x568', '\n', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x5', '\x46', '\x575', '\n', '\x46', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\a', 'I', 
		'\x583', '\n', 'I', '\f', 'I', '\xE', 'I', '\x586', '\v', 'I', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 
		'K', '\x3', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x5', 'L', '\x595', '\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', 
		'\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', 
		'\x5A5', '\n', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 
		'O', '\x5', 'O', '\x5AC', '\n', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x5C0', '\n', 'R', '\x3', 
		'R', '\x3', 'R', '\x5', 'R', '\x5C4', '\n', 'R', '\x3', 'R', '\x3', 'R', 
		'\x3', 'R', '\x5', 'R', '\x5C9', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x3', 
		'R', '\x5', 'R', '\x5CE', '\n', 'R', '\x3', 'R', '\x5', 'R', '\x5D1', 
		'\n', 'R', '\x3', 'R', '\x5', 'R', '\x5D4', '\n', 'R', '\x3', 'R', '\x3', 
		'R', '\x5', 'R', '\x5D8', '\n', 'R', '\x3', 'R', '\x5', 'R', '\x5DB', 
		'\n', 'R', '\x3', 'R', '\x5', 'R', '\x5DE', '\n', 'R', '\x3', 'S', '\x3', 
		'S', '\x3', 'S', '\a', 'S', '\x5E3', '\n', 'S', '\f', 'S', '\xE', 'S', 
		'\x5E6', '\v', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x5F0', '\n', 'U', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', 
		'\x5', 'W', '\x5F8', '\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 
		'W', '\x5', 'W', '\x5FE', '\n', 'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', 
		'\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', 
		'\x60E', '\n', 'Y', '\x3', 'Y', '\x5', 'Y', '\x611', '\n', 'Y', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', '[', '\x3', 
		'[', '\x3', '[', '\x5', '[', '\x61B', '\n', '[', '\x3', '[', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x623', '\n', 
		'[', '\a', '[', '\x625', '\n', '[', '\f', '[', '\xE', '[', '\x628', '\v', 
		'[', '\x5', '[', '\x62A', '\n', '[', '\x3', '\\', '\x3', '\\', '\x5', 
		'\\', '\x62E', '\n', '\\', '\x3', ']', '\x3', ']', '\x5', ']', '\x632', 
		'\n', ']', '\x3', ']', '\x5', ']', '\x635', '\n', ']', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x5', '^', '\x63A', '\n', '^', '\x3', '^', '\x3', '^', 
		'\x3', '^', '\x5', '^', '\x63F', '\n', '^', '\x3', '^', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x5', '^', '\x645', '\n', '^', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', 
		'\x3', '_', '\x5', '_', '\x650', '\n', '_', '\x5', '_', '\x652', '\n', 
		'_', '\x3', '_', '\x3', '_', '\x5', '_', '\x656', '\n', '_', '\x3', '`', 
		'\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x65C', '\n', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x662', '\n', '`', 
		'\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x667', '\n', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x66D', '\n', '`', 
		'\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x672', '\n', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x679', 
		'\n', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x67E', '\n', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x5', '`', '\x686', '\n', '`', '\x3', '`', '\x3', '`', '\x3', '`', 
		'\x5', '`', '\x68B', '\n', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x5', '`', '\x692', '\n', '`', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x3', '`', '\x5', '`', '\x698', '\n', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x6A0', 
		'\n', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', 
		'\x5', '`', '\x6A7', '\n', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', 
		'`', '\x6AC', '\n', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x3', '`', '\x5', '`', '\x6B4', '\n', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x6BB', '\n', '`', 
		'\x3', '`', '\x5', '`', '\x6BE', '\n', '`', '\x3', '`', '\x5', '`', '\x6C1', 
		'\n', '`', '\x5', '`', '\x6C3', '\n', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', 
		'`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', '\x6D1', '\n', '`', 
		'\x5', '`', '\x6D3', '\n', '`', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x5', '\x61', '\x6D9', '\n', '\x61', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\x5', '\x64', '\x6E8', '\n', '\x64', '\x3', '\x65', 
		'\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', '\x3', '\x66', 
		'\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 
		'g', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\x6F9', '\n', 'h', 
		'\x3', 'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\x6FE', '\n', 'h', '\x3', 
		'i', '\x3', 'i', '\x5', 'i', '\x702', '\n', 'i', '\x3', 'i', '\x3', 'i', 
		'\x5', 'i', '\x706', '\n', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 
		'j', '\x3', 'j', '\x5', 'j', '\x70D', '\n', 'j', '\x3', 'j', '\x3', 'j', 
		'\x3', 'j', '\a', 'j', '\x712', '\n', 'j', '\f', 'j', '\xE', 'j', '\x715', 
		'\v', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\x71A', '\n', 
		'j', '\x3', 'k', '\x3', 'k', '\x5', 'k', '\x71E', '\n', 'k', '\x3', 'k', 
		'\x5', 'k', '\x721', '\n', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\a', 
		'k', '\x726', '\n', 'k', '\f', 'k', '\xE', 'k', '\x729', '\v', 'k', '\x3', 
		'k', '\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'n', '\x3', 
		'n', '\x3', 'n', '\x3', 'n', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 
		'o', '\x3', 'o', '\x5', 'o', '\x73F', '\n', 'o', '\x3', 'p', '\x3', 'p', 
		'\x3', 'p', '\x5', 'p', '\x744', '\n', 'p', '\x3', 'p', '\x3', 'p', '\x5', 
		'p', '\x748', '\n', 'p', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', 
		'\x3', 'r', '\x3', 'r', '\x5', 'r', '\x750', '\n', 'r', '\x3', 's', '\x3', 
		's', '\x3', 's', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\x758', 
		'\n', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\x75C', '\n', 't', '\x3', 
		't', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', '\x762', '\n', 't', 
		'\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\x767', '\n', 'u', '\x3', 
		'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\x76E', 
		'\n', 'u', '\x3', 'u', '\x5', 'u', '\x771', '\n', 'u', '\x3', 'u', '\x3', 
		'u', '\x3', 'u', '\x3', 'u', '\x5', 'u', '\x777', '\n', 'u', '\x3', 'v', 
		'\x3', 'v', '\x3', 'v', '\a', 'v', '\x77C', '\n', 'v', '\f', 'v', '\xE', 
		'v', '\x77F', '\v', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', 
		'\x3', 'w', '\x5', 'w', '\x786', '\n', 'w', '\x3', 'x', '\x3', 'x', '\x3', 
		'y', '\x3', 'y', '\x3', 'y', '\a', 'y', '\x78D', '\n', 'y', '\f', 'y', 
		'\xE', 'y', '\x790', '\v', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 
		'z', '\x3', 'z', '\x3', 'z', '\x5', 'z', '\x798', '\n', 'z', '\x3', '{', 
		'\x3', '{', '\x3', '{', '\x3', '{', '\x3', '|', '\x3', '|', '\x3', '|', 
		'\x3', '|', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '}', '\x3', '~', 
		'\x3', '~', '\x3', '~', '\x3', '~', '\x3', '\x7F', '\x3', '\x7F', '\x5', 
		'\x7F', '\x7AC', '\n', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', 
		'\x3', '\x7F', '\x5', '\x7F', '\x7B2', '\n', '\x7F', '\x3', '\x7F', '\x5', 
		'\x7F', '\x7B5', '\n', '\x7F', '\x5', '\x7F', '\x7B7', '\n', '\x7F', '\x3', 
		'\x80', '\x3', '\x80', '\x3', '\x80', '\a', '\x80', '\x7BC', '\n', '\x80', 
		'\f', '\x80', '\xE', '\x80', '\x7BF', '\v', '\x80', '\x3', '\x81', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x82', '\x3', '\x82', '\x3', '\x83', '\x3', 
		'\x83', '\x5', '\x83', '\x7C8', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', 
		'\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', '\x83', 
		'\x7D0', '\n', '\x83', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\x7D4', 
		'\n', '\x84', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\x7D8', '\n', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x85', '\x3', '\x85', '\x3', 
		'\x85', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\x3', 
		'\x86', '\x3', '\x86', '\x5', '\x86', '\x7E5', '\n', '\x86', '\x3', '\x86', 
		'\x3', '\x86', '\x3', '\x86', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x5', '\x87', '\x7EE', '\n', '\x87', '\x3', '\x87', '\x3', 
		'\x87', '\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\x7F4', '\n', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\x7F8', '\n', '\x88', '\x3', 
		'\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x5', 
		'\x88', '\x7FF', '\n', '\x88', '\x3', '\x88', '\x5', '\x88', '\x802', 
		'\n', '\x88', '\x3', '\x88', '\x5', '\x88', '\x805', '\n', '\x88', '\x3', 
		'\x88', '\x5', '\x88', '\x808', '\n', '\x88', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', 
		'\x5', '\x89', '\x811', '\n', '\x89', '\x3', '\x89', '\x3', '\x89', '\x5', 
		'\x89', '\x815', '\n', '\x89', '\x3', '\x89', '\x5', '\x89', '\x818', 
		'\n', '\x89', '\x3', '\x89', '\x5', '\x89', '\x81B', '\n', '\x89', '\x3', 
		'\x89', '\x5', '\x89', '\x81E', '\n', '\x89', '\x3', '\x89', '\x5', '\x89', 
		'\x821', '\n', '\x89', '\x3', '\x89', '\x5', '\x89', '\x824', '\n', '\x89', 
		'\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x8A', '\x3', '\x8A', 
		'\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8B', 
		'\x3', '\x8B', '\x3', '\x8B', '\x5', '\x8B', '\x832', '\n', '\x8B', '\x3', 
		'\x8B', '\x3', '\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', 
		'\x8C', '\x5', '\x8C', '\x83A', '\n', '\x8C', '\x3', '\x8C', '\x3', '\x8C', 
		'\x3', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\x840', '\n', '\x8D', '\x3', 
		'\x8E', '\x3', '\x8E', '\x5', '\x8E', '\x844', '\n', '\x8E', '\x3', '\x8F', 
		'\x3', '\x8F', '\x3', '\x8F', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\a', '\x90', '\x84F', '\n', 
		'\x90', '\f', '\x90', '\xE', '\x90', '\x852', '\v', '\x90', '\x3', '\x90', 
		'\x3', '\x90', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\x861', '\n', '\x91', '\x3', 
		'\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x92', '\x3', 
		'\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', 
		'\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x5', '\x92', '\x871', 
		'\n', '\x92', '\x3', '\x93', '\x3', '\x93', '\x5', '\x93', '\x875', '\n', 
		'\x93', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x95', '\x3', 
		'\x95', '\x3', '\x95', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', 
		'\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x5', '\x96', '\x884', 
		'\n', '\x96', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', 
		'\x5', '\x97', '\x88A', '\n', '\x97', '\x3', '\x97', '\x5', '\x97', '\x88D', 
		'\n', '\x97', '\x3', '\x97', '\x5', '\x97', '\x890', '\n', '\x97', '\x3', 
		'\x97', '\x5', '\x97', '\x893', '\n', '\x97', '\x3', '\x97', '\x5', '\x97', 
		'\x896', '\n', '\x97', '\x3', '\x98', '\x3', '\x98', '\x5', '\x98', '\x89A', 
		'\n', '\x98', '\x3', '\x99', '\x3', '\x99', '\x3', '\x99', '\x3', '\x9A', 
		'\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\a', '\x9B', '\x8A6', '\n', '\x9B', '\f', '\x9B', '\xE', 
		'\x9B', '\x8A9', '\v', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', 
		'\a', '\x9B', '\x8AE', '\n', '\x9B', '\f', '\x9B', '\xE', '\x9B', '\x8B1', 
		'\v', '\x9B', '\x5', '\x9B', '\x8B3', '\n', '\x9B', '\x3', '\x9C', '\x3', 
		'\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x3', 
		'\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\x3', '\x9E', '\x5', '\x9E', '\x8C2', '\n', '\x9E', '\x3', '\x9F', 
		'\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', 
		'\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', 
		'\x3', '\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA1', 
		'\x3', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', 
		'\x3', '\xA2', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', 
		'\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', 
		'\x3', '\xA3', '\x5', '\xA3', '\x8E4', '\n', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x5', 
		'\xA3', '\x8EC', '\n', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', 
		'\x5', '\xA3', '\x8F1', '\n', '\xA3', '\x3', '\xA4', '\x3', '\xA4', '\x3', 
		'\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\a', '\xA5', '\x8F9', 
		'\n', '\xA5', '\f', '\xA5', '\xE', '\xA5', '\x8FC', '\v', '\xA5', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA6', '\a', '\xA6', '\x901', '\n', '\xA6', 
		'\f', '\xA6', '\xE', '\xA6', '\x904', '\v', '\xA6', '\x3', '\xA7', '\x3', 
		'\xA7', '\x3', '\xA7', '\a', '\xA7', '\x909', '\n', '\xA7', '\f', '\xA7', 
		'\xE', '\xA7', '\x90C', '\v', '\xA7', '\x3', '\xA8', '\x3', '\xA8', '\x3', 
		'\xA8', '\a', '\xA8', '\x911', '\n', '\xA8', '\f', '\xA8', '\xE', '\xA8', 
		'\x914', '\v', '\xA8', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', 
		'\xAA', '\x91E', '\n', '\xAA', '\a', '\xAA', '\x920', '\n', '\xAA', '\f', 
		'\xAA', '\xE', '\xAA', '\x923', '\v', '\xAA', '\x3', '\xAB', '\x3', '\xAB', 
		'\x3', '\xAB', '\a', '\xAB', '\x928', '\n', '\xAB', '\f', '\xAB', '\xE', 
		'\xAB', '\x92B', '\v', '\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', 
		'\x3', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\x933', '\n', 
		'\xAD', '\x3', '\xAD', '\x5', '\xAD', '\x936', '\n', '\xAD', '\x3', '\xAE', 
		'\x3', '\xAE', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xB0', '\x3', '\xB0', 
		'\x3', '\xB0', '\x5', '\xB0', '\x93F', '\n', '\xB0', '\x3', '\xB1', '\x3', 
		'\xB1', '\x5', '\xB1', '\x943', '\n', '\xB1', '\x5', '\xB1', '\x945', 
		'\n', '\xB1', '\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', '\x949', '\n', 
		'\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', '\x94D', '\n', '\xB2', 
		'\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', 
		'\x953', '\n', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', 
		'\xB5', '\x3', '\xB5', '\x5', '\xB5', '\x95A', '\n', '\xB5', '\x3', '\xB5', 
		'\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', 
		'\x3', '\xB5', '\x5', '\xB5', '\x963', '\n', '\xB5', '\x3', '\xB6', '\x3', 
		'\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', 
		'\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x5', '\xB6', '\x96E', '\n', '\xB6', 
		'\x3', '\xB7', '\x3', '\xB7', '\x5', '\xB7', '\x972', '\n', '\xB7', '\x3', 
		'\xB8', '\x3', '\xB8', '\x3', '\xB8', '\a', '\xB8', '\x977', '\n', '\xB8', 
		'\f', '\xB8', '\xE', '\xB8', '\x97A', '\v', '\xB8', '\x3', '\xB9', '\x3', 
		'\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xBA', '\x3', '\xBA', '\x3', 
		'\xBA', '\a', '\xBA', '\x983', '\n', '\xBA', '\f', '\xBA', '\xE', '\xBA', 
		'\x986', '\v', '\xBA', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBC', '\x3', 
		'\xBC', '\x5', '\xBC', '\x98C', '\n', '\xBC', '\x3', '\xBD', '\x3', '\xBD', 
		'\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', 
		'\x994', '\n', '\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\x998', 
		'\n', '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\x99B', '\n', '\xBF', '\x3', 
		'\xC0', '\x3', '\xC0', '\x3', '\xC0', '\a', '\xC0', '\x9A0', '\n', '\xC0', 
		'\f', '\xC0', '\xE', '\xC0', '\x9A3', '\v', '\xC0', '\x3', '\xC1', '\x3', 
		'\xC1', '\x3', '\xC1', '\x5', '\xC1', '\x9A8', '\n', '\xC1', '\x3', '\xC2', 
		'\x3', '\xC2', '\x5', '\xC2', '\x9AC', '\n', '\xC2', '\x3', '\xC2', '\x5', 
		'\xC2', '\x9AF', '\n', '\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', 
		'\x3', '\xC3', '\x5', '\xC3', '\x9B5', '\n', '\xC3', '\x3', '\xC4', '\x3', 
		'\xC4', '\x5', '\xC4', '\x9B9', '\n', '\xC4', '\x3', '\xC5', '\x3', '\xC5', 
		'\x5', '\xC5', '\x9BD', '\n', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x3', 
		'\xC6', '\x5', '\xC6', '\x9C2', '\n', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x5', '\xC6', '\x9C6', '\n', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x5', 
		'\xC7', '\x9CA', '\n', '\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', 
		'\x9CE', '\n', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', 
		'\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x5', '\xC8', '\x9D6', '\n', '\xC8', 
		'\x3', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x9DA', '\n', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x9DE', '\n', '\xC9', '\x3', '\xCA', 
		'\x3', '\xCA', '\x5', '\xCA', '\x9E2', '\n', '\xCA', '\x3', '\xCB', '\x3', 
		'\xCB', '\x5', '\xCB', '\x9E6', '\n', '\xCB', '\x3', '\xCB', '\x3', '\xCB', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', 
		'\x9EE', '\n', '\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\x9F2', 
		'\n', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x5', '\xCC', '\x9F6', '\n', 
		'\xCC', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCE', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xCF', '\x3', 
		'\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x5', 
		'\xD0', '\xA06', '\n', '\xD0', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD2', 
		'\x3', '\xD2', '\x3', '\xD2', '\a', '\xD2', '\xA0D', '\n', '\xD2', '\f', 
		'\xD2', '\xE', '\xD2', '\xA10', '\v', '\xD2', '\x3', '\xD3', '\x3', '\xD3', 
		'\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x5', '\xD3', '\xA17', '\n', 
		'\xD3', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', 
		'\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\xA21', 
		'\n', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', 
		'\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', 
		'\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', 
		'\x3', '\xD4', '\x3', '\xD4', '\x5', '\xD4', '\xA33', '\n', '\xD4', '\x3', 
		'\xD4', '\x5', '\xD4', '\xA36', '\n', '\xD4', '\x3', '\xD4', '\x3', '\xD4', 
		'\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', '\x3', '\xD4', 
		'\x3', '\xD4', '\x5', '\xD4', '\xA40', '\n', '\xD4', '\x3', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD7', '\x3', 
		'\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', 
		'\xD7', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', 
		'\xD8', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x5', 
		'\xD9', '\xA5C', '\n', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', 
		'\x3', '\xD9', '\x5', '\xD9', '\xA62', '\n', '\xD9', '\x3', '\xD9', '\x3', 
		'\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x5', '\xD9', '\xA68', '\n', '\xD9', 
		'\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x5', '\xD9', 
		'\xA6E', '\n', '\xD9', '\x5', '\xD9', '\xA70', '\n', '\xD9', '\x3', '\xDA', 
		'\x5', '\xDA', '\xA73', '\n', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', 
		'\xDB', '\x3', '\xDB', '\x5', '\xDB', '\xA79', '\n', '\xDB', '\x3', '\xDC', 
		'\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\a', '\xDC', '\xA7F', '\n', 
		'\xDC', '\f', '\xDC', '\xE', '\xDC', '\xA82', '\v', '\xDC', '\x3', '\xDD', 
		'\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', 
		'\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\a', '\xDE', 
		'\xA8E', '\n', '\xDE', '\f', '\xDE', '\xE', '\xDE', '\xA91', '\v', '\xDE', 
		'\x3', '\xDF', '\x3', '\xDF', '\x6', '\xDF', '\xA95', '\n', '\xDF', '\r', 
		'\xDF', '\xE', '\xDF', '\xA96', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', 
		'\x5', '\xE0', '\xA9C', '\n', '\xE0', '\x3', '\xE0', '\x5', '\xE0', '\xA9F', 
		'\n', '\xE0', '\x3', '\xE1', '\x3', '\xE1', '\x5', '\xE1', '\xAA3', '\n', 
		'\xE1', '\x3', '\xE1', '\x5', '\xE1', '\xAA6', '\n', '\xE1', '\x3', '\xE1', 
		'\x5', '\xE1', '\xAA9', '\n', '\xE1', '\x3', '\xE1', '\x5', '\xE1', '\xAAC', 
		'\n', '\xE1', '\x3', '\xE1', '\x5', '\xE1', '\xAAF', '\n', '\xE1', '\x3', 
		'\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1', '\x5', '\xE1', '\xAB5', 
		'\n', '\xE1', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xAB9', '\n', 
		'\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xABC', '\n', '\xE2', '\x3', '\xE2', 
		'\x5', '\xE2', '\xABF', '\n', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xAC2', 
		'\n', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\xAC5', '\n', '\xE2', '\x3', 
		'\xE2', '\x5', '\xE2', '\xAC8', '\n', '\xE2', '\x3', '\xE3', '\x3', '\xE3', 
		'\x3', '\xE3', '\x6', '\xE3', '\xACD', '\n', '\xE3', '\r', '\xE3', '\xE', 
		'\xE3', '\xACE', '\x3', '\xE4', '\x5', '\xE4', '\xAD2', '\n', '\xE4', 
		'\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', 
		'\x5', '\xE5', '\xAD9', '\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xADC', 
		'\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xADF', '\n', '\xE5', '\x3', 
		'\xE5', '\x5', '\xE5', '\xAE2', '\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', 
		'\xAE5', '\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xAE8', '\n', '\xE5', 
		'\x3', '\xE5', '\x5', '\xE5', '\xAEB', '\n', '\xE5', '\x3', '\xE5', '\x5', 
		'\xE5', '\xAEE', '\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xAF1', 
		'\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xAF4', '\n', '\xE5', '\x3', 
		'\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xAF8', '\n', '\xE5', '\x3', '\xE5', 
		'\x5', '\xE5', '\xAFB', '\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xAFE', 
		'\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xB01', '\n', '\xE5', '\x3', 
		'\xE5', '\x5', '\xE5', '\xB04', '\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', 
		'\xB07', '\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xB0A', '\n', '\xE5', 
		'\x3', '\xE5', '\x5', '\xE5', '\xB0D', '\n', '\xE5', '\x3', '\xE5', '\x5', 
		'\xE5', '\xB10', '\n', '\xE5', '\x3', '\xE5', '\x5', '\xE5', '\xB13', 
		'\n', '\xE5', '\x5', '\xE5', '\xB15', '\n', '\xE5', '\x3', '\xE6', '\x3', 
		'\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x5', '\xE6', '\xB1B', '\n', '\xE6', 
		'\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x5', '\xE6', '\xB20', '\n', 
		'\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', 
		'\xE6', '\x5', '\xE6', '\xB27', '\n', '\xE6', '\x5', '\xE6', '\xB29', 
		'\n', '\xE6', '\x3', '\xE7', '\x5', '\xE7', '\xB2C', '\n', '\xE7', '\x3', 
		'\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x5', '\xE7', '\xB31', '\n', '\xE7', 
		'\x3', '\xE7', '\x5', '\xE7', '\xB34', '\n', '\xE7', '\x3', '\xE7', '\x3', 
		'\xE7', '\x5', '\xE7', '\xB38', '\n', '\xE7', '\x3', '\xE8', '\x3', '\xE8', 
		'\x3', '\xE8', '\x5', '\xE8', '\xB3D', '\n', '\xE8', '\x3', '\xE8', '\x3', 
		'\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x3', '\xE8', '\x5', '\xE8', '\xB44', 
		'\n', '\xE8', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', 
		'\x5', '\xE9', '\xB4A', '\n', '\xE9', '\x3', '\xEA', '\x3', '\xEA', '\x3', 
		'\xEA', '\x3', '\xEA', '\x3', '\xEB', '\x3', '\xEB', '\x3', '\xEB', '\x3', 
		'\xEB', '\a', '\xEB', '\xB54', '\n', '\xEB', '\f', '\xEB', '\xE', '\xEB', 
		'\xB57', '\v', '\xEB', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', 
		'\xEC', '\x5', '\xEC', '\xB5D', '\n', '\xEC', '\x3', '\xED', '\x3', '\xED', 
		'\x3', '\xED', '\x3', '\xED', '\x5', '\xED', '\xB63', '\n', '\xED', '\x3', 
		'\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\a', 
		'\xEE', '\xB6A', '\n', '\xEE', '\f', '\xEE', '\xE', '\xEE', '\xB6D', '\v', 
		'\xEE', '\x5', '\xEE', '\xB6F', '\n', '\xEE', '\x3', '\xEF', '\x3', '\xEF', 
		'\x5', '\xEF', '\xB73', '\n', '\xEF', '\x3', '\xF0', '\x3', '\xF0', '\x3', 
		'\xF0', '\x3', '\xF0', '\x5', '\xF0', '\xB79', '\n', '\xF0', '\x3', '\xF1', 
		'\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF2', '\x3', '\xF2', 
		'\x3', '\xF3', '\x3', '\xF3', '\x5', '\xF3', '\xB83', '\n', '\xF3', '\x3', 
		'\xF4', '\x3', '\xF4', '\x5', '\xF4', '\xB87', '\n', '\xF4', '\x3', '\xF5', 
		'\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF6', '\x3', '\xF6', 
		'\x3', '\xF6', '\x6', '\xF6', '\xB90', '\n', '\xF6', '\r', '\xF6', '\xE', 
		'\xF6', '\xB91', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', 
		'\x5', '\xF7', '\xB98', '\n', '\xF7', '\x3', '\xF7', '\x5', '\xF7', '\xB9B', 
		'\n', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', 
		'\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF8', '\x3', '\xF8', '\a', '\xF8', 
		'\xBA5', '\n', '\xF8', '\f', '\xF8', '\xE', '\xF8', '\xBA8', '\v', '\xF8', 
		'\x3', '\xF8', '\x5', '\xF8', '\xBAB', '\n', '\xF8', '\x3', '\xF9', '\x3', 
		'\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x5', '\xF9', '\xBB2', 
		'\n', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', 
		'\x3', '\xF9', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', 
		'\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x3', '\xFB', '\x3', '\xFB', 
		'\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFC', '\x3', '\xFC', 
		'\x3', '\xFC', '\x5', '\xFC', '\xBC8', '\n', '\xFC', '\x3', '\xFD', '\x3', 
		'\xFD', '\x3', '\xFD', '\x6', '\xFD', '\xBCD', '\n', '\xFD', '\r', '\xFD', 
		'\xE', '\xFD', '\xBCE', '\x3', '\xFE', '\x3', '\xFE', '\x5', '\xFE', '\xBD3', 
		'\n', '\xFE', '\x3', '\xFE', '\x5', '\xFE', '\xBD6', '\n', '\xFE', '\x3', 
		'\xFE', '\x3', '\xFE', '\x3', '\xFE', '\x5', '\xFE', '\xBDB', '\n', '\xFE', 
		'\x3', '\xFE', '\x5', '\xFE', '\xBDE', '\n', '\xFE', '\x3', '\xFF', '\x3', 
		'\xFF', '\x3', '\xFF', '\a', '\xFF', '\xBE3', '\n', '\xFF', '\f', '\xFF', 
		'\xE', '\xFF', '\xBE6', '\v', '\xFF', '\x3', '\x100', '\x3', '\x100', 
		'\x3', '\x100', '\x3', '\x100', '\x5', '\x100', '\xBEC', '\n', '\x100', 
		'\x3', '\x100', '\x5', '\x100', '\xBEF', '\n', '\x100', '\x3', '\x100', 
		'\x3', '\x100', '\x3', '\x100', '\x3', '\x100', '\x3', '\x100', '\x3', 
		'\x100', '\x5', '\x100', '\xBF7', '\n', '\x100', '\x3', '\x100', '\x3', 
		'\x100', '\x3', '\x100', '\x3', '\x100', '\x5', '\x100', '\xBFD', '\n', 
		'\x100', '\x5', '\x100', '\xBFF', '\n', '\x100', '\x5', '\x100', '\xC01', 
		'\n', '\x100', '\x3', '\x100', '\x5', '\x100', '\xC04', '\n', '\x100', 
		'\x3', '\x100', '\x5', '\x100', '\xC07', '\n', '\x100', '\x3', '\x101', 
		'\x3', '\x101', '\x3', '\x101', '\x5', '\x101', '\xC0C', '\n', '\x101', 
		'\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', '\x101', '\x3', 
		'\x101', '\x3', '\x101', '\a', '\x101', '\xC14', '\n', '\x101', '\f', 
		'\x101', '\xE', '\x101', '\xC17', '\v', '\x101', '\x3', '\x101', '\x3', 
		'\x101', '\x5', '\x101', '\xC1B', '\n', '\x101', '\x5', '\x101', '\xC1D', 
		'\n', '\x101', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x5', '\x102', '\xC23', '\n', '\x102', '\x3', '\x102', '\x5', 
		'\x102', '\xC26', '\n', '\x102', '\x3', '\x102', '\x5', '\x102', '\xC29', 
		'\n', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x5', '\x102', '\xC31', '\n', 
		'\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', '\x3', '\x102', 
		'\x5', '\x102', '\xC37', '\n', '\x102', '\x5', '\x102', '\xC39', '\n', 
		'\x102', '\x5', '\x102', '\xC3B', '\n', '\x102', '\x3', '\x102', '\x5', 
		'\x102', '\xC3E', '\n', '\x102', '\x3', '\x102', '\x5', '\x102', '\xC41', 
		'\n', '\x102', '\x3', '\x103', '\x3', '\x103', '\x5', '\x103', '\xC45', 
		'\n', '\x103', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\a', '\x104', 
		'\xC4A', '\n', '\x104', '\f', '\x104', '\xE', '\x104', '\xC4D', '\v', 
		'\x104', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', 
		'\a', '\x105', '\xC53', '\n', '\x105', '\f', '\x105', '\xE', '\x105', 
		'\xC56', '\v', '\x105', '\x3', '\x106', '\x3', '\x106', '\x3', '\x106', 
		'\x3', '\x106', '\x3', '\x107', '\x3', '\x107', '\x3', '\x107', '\x5', 
		'\x107', '\xC5F', '\n', '\x107', '\x3', '\x107', '\x5', '\x107', '\xC62', 
		'\n', '\x107', '\x3', '\x107', '\x5', '\x107', '\xC65', '\n', '\x107', 
		'\x3', '\x107', '\x5', '\x107', '\xC68', '\n', '\x107', '\x3', '\x108', 
		'\x3', '\x108', '\x5', '\x108', '\xC6C', '\n', '\x108', '\x3', '\x109', 
		'\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109', '\x3', 
		'\x109', '\x3', '\x109', '\x3', '\x109', '\x5', '\x109', '\xC76', '\n', 
		'\x109', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', 
		'\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x3', '\x10A', '\x5', 
		'\x10A', '\xC80', '\n', '\x10A', '\x3', '\x10B', '\x3', '\x10B', '\x3', 
		'\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x3', '\x10B', '\x5', '\x10B', 
		'\xC88', '\n', '\x10B', '\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', 
		'\x3', '\x10C', '\x3', '\x10C', '\x3', '\x10C', '\x5', '\x10C', '\xC90', 
		'\n', '\x10C', '\x3', '\x10D', '\x3', '\x10D', '\x3', '\x10D', '\x3', 
		'\x10D', '\x3', '\x10D', '\x5', '\x10D', '\xC97', '\n', '\x10D', '\x3', 
		'\x10E', '\x3', '\x10E', '\x3', '\x10F', '\x3', '\x10F', '\x3', '\x10F', 
		'\a', '\x10F', '\xC9E', '\n', '\x10F', '\f', '\x10F', '\xE', '\x10F', 
		'\xCA1', '\v', '\x10F', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', 
		'\a', '\x110', '\xCA6', '\n', '\x110', '\f', '\x110', '\xE', '\x110', 
		'\xCA9', '\v', '\x110', '\x3', '\x111', '\x3', '\x111', '\x3', '\x111', 
		'\x3', '\x112', '\x3', '\x112', '\x3', '\x112', '\x3', '\x112', '\x6', 
		'\x112', '\xCB2', '\n', '\x112', '\r', '\x112', '\xE', '\x112', '\xCB3', 
		'\x3', '\x112', '\x5', '\x112', '\xCB7', '\n', '\x112', '\x3', '\x113', 
		'\x3', '\x113', '\a', '\x113', '\xCBB', '\n', '\x113', '\f', '\x113', 
		'\xE', '\x113', '\xCBE', '\v', '\x113', '\x3', '\x113', '\x3', '\x113', 
		'\a', '\x113', '\xCC2', '\n', '\x113', '\f', '\x113', '\xE', '\x113', 
		'\xCC5', '\v', '\x113', '\x3', '\x113', '\x3', '\x113', '\a', '\x113', 
		'\xCC9', '\n', '\x113', '\f', '\x113', '\xE', '\x113', '\xCCC', '\v', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\a', '\x113', '\xCD0', '\n', 
		'\x113', '\f', '\x113', '\xE', '\x113', '\xCD3', '\v', '\x113', '\x3', 
		'\x113', '\x3', '\x113', '\x3', '\x113', '\x3', '\x113', '\x5', '\x113', 
		'\xCD9', '\n', '\x113', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', 
		'\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114', '\x5', 
		'\x114', '\xCE2', '\n', '\x114', '\a', '\x114', '\xCE4', '\n', '\x114', 
		'\f', '\x114', '\xE', '\x114', '\xCE7', '\v', '\x114', '\x3', '\x115', 
		'\x3', '\x115', '\x3', '\x115', '\x3', '\x115', '\x5', '\x115', '\xCED', 
		'\n', '\x115', '\x3', '\x115', '\a', '\x115', '\xCF0', '\n', '\x115', 
		'\f', '\x115', '\xE', '\x115', '\xCF3', '\v', '\x115', '\x3', '\x116', 
		'\x5', '\x116', '\xCF6', '\n', '\x116', '\x3', '\x116', '\x3', '\x116', 
		'\x3', '\x116', '\x3', '\x117', '\x3', '\x117', '\x3', '\x117', '\x3', 
		'\x117', '\x3', '\x118', '\x3', '\x118', '\x3', '\x119', '\x3', '\x119', 
		'\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x3', 
		'\x119', '\x3', '\x119', '\x5', '\x119', '\xD09', '\n', '\x119', '\x3', 
		'\x119', '\x3', '\x119', '\x3', '\x119', '\x5', '\x119', '\xD0E', '\n', 
		'\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', '\x5', '\x119', 
		'\xD13', '\n', '\x119', '\x3', '\x119', '\x3', '\x119', '\x3', '\x119', 
		'\x3', '\x119', '\x5', '\x119', '\xD19', '\n', '\x119', '\x3', '\x11A', 
		'\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', 
		'\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\a', '\x11A', 
		'\xD24', '\n', '\x11A', '\f', '\x11A', '\xE', '\x11A', '\xD27', '\v', 
		'\x11A', '\x5', '\x11A', '\xD29', '\n', '\x11A', '\x3', '\x11A', '\x5', 
		'\x11A', '\xD2C', '\n', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', 
		'\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', 
		'\x3', '\x11A', '\a', '\x11A', '\xD36', '\n', '\x11A', '\f', '\x11A', 
		'\xE', '\x11A', '\xD39', '\v', '\x11A', '\x5', '\x11A', '\xD3B', '\n', 
		'\x11A', '\x3', '\x11A', '\x5', '\x11A', '\xD3E', '\n', '\x11A', '\x3', 
		'\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', 
		'\x3', '\x11A', '\x5', '\x11A', '\xD46', '\n', '\x11A', '\x3', '\x11A', 
		'\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\a', 
		'\x11A', '\xD4D', '\n', '\x11A', '\f', '\x11A', '\xE', '\x11A', '\xD50', 
		'\v', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\x5', '\x11A', '\xD54', 
		'\n', '\x11A', '\x5', '\x11A', '\xD56', '\n', '\x11A', '\x3', '\x11B', 
		'\x3', '\x11B', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', 
		'\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', 
		'\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\a', '\x11C', '\xD65', 
		'\n', '\x11C', '\f', '\x11C', '\xE', '\x11C', '\xD68', '\v', '\x11C', 
		'\x5', '\x11C', '\xD6A', '\n', '\x11C', '\x3', '\x11C', '\x3', '\x11C', 
		'\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', 
		'\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', 
		'\x5', '\x11D', '\xD77', '\n', '\x11D', '\x3', '\x11E', '\x3', '\x11E', 
		'\x5', '\x11E', '\xD7B', '\n', '\x11E', '\x3', '\x11F', '\x3', '\x11F', 
		'\x5', '\x11F', '\xD7F', '\n', '\x11F', '\x3', '\x11F', '\x5', '\x11F', 
		'\xD82', '\n', '\x11F', '\x3', '\x11F', '\x5', '\x11F', '\xD85', '\n', 
		'\x11F', '\x3', '\x11F', '\x5', '\x11F', '\xD88', '\n', '\x11F', '\x3', 
		'\x120', '\x3', '\x120', '\x5', '\x120', '\xD8C', '\n', '\x120', '\x3', 
		'\x120', '\x5', '\x120', '\xD8F', '\n', '\x120', '\x3', '\x120', '\x5', 
		'\x120', '\xD92', '\n', '\x120', '\x3', '\x121', '\x3', '\x121', '\x3', 
		'\x121', '\x3', '\x121', '\x3', '\x121', '\x5', '\x121', '\xD99', '\n', 
		'\x121', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122', '\x5', '\x122', 
		'\xD9E', '\n', '\x122', '\x3', '\x122', '\x3', '\x122', '\x3', '\x123', 
		'\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x5', '\x123', '\xDA6', 
		'\n', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x124', '\x3', 
		'\x124', '\x5', '\x124', '\xDAC', '\n', '\x124', '\x3', '\x124', '\x3', 
		'\x124', '\x3', '\x124', '\x5', '\x124', '\xDB1', '\n', '\x124', '\x3', 
		'\x124', '\x3', '\x124', '\x5', '\x124', '\xDB5', '\n', '\x124', '\x3', 
		'\x125', '\x3', '\x125', '\x3', '\x125', '\x5', '\x125', '\xDBA', '\n', 
		'\x125', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', 
		'\x3', '\x126', '\x5', '\x126', '\xDC1', '\n', '\x126', '\x3', '\x126', 
		'\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', 
		'\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', 
		'\a', '\x126', '\xDCD', '\n', '\x126', '\f', '\x126', '\xE', '\x126', 
		'\xDD0', '\v', '\x126', '\x5', '\x126', '\xDD2', '\n', '\x126', '\x3', 
		'\x126', '\x3', '\x126', '\x5', '\x126', '\xDD6', '\n', '\x126', '\x3', 
		'\x127', '\x3', '\x127', '\x3', '\x127', '\x3', '\x128', '\x3', '\x128', 
		'\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x12A', '\x3', 
		'\x12A', '\x3', '\x12A', '\a', '\x12A', '\xDE3', '\n', '\x12A', '\f', 
		'\x12A', '\xE', '\x12A', '\xDE6', '\v', '\x12A', '\x3', '\x12B', '\x3', 
		'\x12B', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', 
		'\x3', '\x12C', '\x5', '\x12C', '\xDEF', '\n', '\x12C', '\x3', '\x12C', 
		'\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\a', 
		'\x12C', '\xDF6', '\n', '\x12C', '\f', '\x12C', '\xE', '\x12C', '\xDF9', 
		'\v', '\x12C', '\x5', '\x12C', '\xDFB', '\n', '\x12C', '\x3', '\x12C', 
		'\x3', '\x12C', '\x3', '\x12D', '\x3', '\x12D', '\x3', '\x12D', '\x3', 
		'\x12D', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', 
		'\xE06', '\n', '\x12E', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', 
		'\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', 
		'\x130', '\a', '\x130', '\xE10', '\n', '\x130', '\f', '\x130', '\xE', 
		'\x130', '\xE13', '\v', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', 
		'\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', 
		'\x5', '\x131', '\xE1C', '\n', '\x131', '\x3', '\x131', '\x3', '\x131', 
		'\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\x3', '\x131', '\a', 
		'\x131', '\xE24', '\n', '\x131', '\f', '\x131', '\xE', '\x131', '\xE27', 
		'\v', '\x131', '\x3', '\x131', '\x3', '\x131', '\x5', '\x131', '\xE2B', 
		'\n', '\x131', '\x3', '\x132', '\x3', '\x132', '\x5', '\x132', '\xE2F', 
		'\n', '\x132', '\x3', '\x133', '\x3', '\x133', '\x5', '\x133', '\xE33', 
		'\n', '\x133', '\x3', '\x133', '\x3', '\x133', '\a', '\x133', '\xE37', 
		'\n', '\x133', '\f', '\x133', '\xE', '\x133', '\xE3A', '\v', '\x133', 
		'\x3', '\x133', '\x3', '\x133', '\x3', '\x134', '\x3', '\x134', '\x3', 
		'\x135', '\x3', '\x135', '\x3', '\x135', '\x3', '\x136', '\x3', '\x136', 
		'\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', '\x137', '\x3', 
		'\x138', '\x3', '\x138', '\x5', '\x138', '\xE4B', '\n', '\x138', '\x3', 
		'\x139', '\x3', '\x139', '\x6', '\x139', '\xE4F', '\n', '\x139', '\r', 
		'\x139', '\xE', '\x139', '\xE50', '\x3', '\x13A', '\x3', '\x13A', '\x5', 
		'\x13A', '\xE55', '\n', '\x13A', '\x3', '\x13B', '\x3', '\x13B', '\x3', 
		'\x13B', '\x3', '\x13B', '\a', '\x13B', '\xE5B', '\n', '\x13B', '\f', 
		'\x13B', '\xE', '\x13B', '\xE5E', '\v', '\x13B', '\x3', '\x13B', '\x3', 
		'\x13B', '\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C', '\a', '\x13C', 
		'\xE65', '\n', '\x13C', '\f', '\x13C', '\xE', '\x13C', '\xE68', '\v', 
		'\x13C', '\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', '\x3', '\x13D', 
		'\x3', '\x13D', '\a', '\x13D', '\xE6F', '\n', '\x13D', '\f', '\x13D', 
		'\xE', '\x13D', '\xE72', '\v', '\x13D', '\x3', '\x13E', '\x3', '\x13E', 
		'\x3', '\x13E', '\x3', '\x13E', '\x3', '\x13F', '\x3', '\x13F', '\x3', 
		'\x13F', '\x3', '\x13F', '\x3', '\x140', '\x3', '\x140', '\x3', '\x140', 
		'\x3', '\x140', '\x3', '\x141', '\x3', '\x141', '\x3', '\x141', '\x3', 
		'\x141', '\x5', '\x141', '\xE84', '\n', '\x141', '\x3', '\x142', '\x3', 
		'\x142', '\x3', '\x142', '\x3', '\x142', '\x5', '\x142', '\xE8A', '\n', 
		'\x142', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\a', '\x142', 
		'\xE8F', '\n', '\x142', '\f', '\x142', '\xE', '\x142', '\xE92', '\v', 
		'\x142', '\x5', '\x142', '\xE94', '\n', '\x142', '\x5', '\x142', '\xE96', 
		'\n', '\x142', '\x3', '\x142', '\x3', '\x142', '\x3', '\x142', '\x5', 
		'\x142', '\xE9B', '\n', '\x142', '\x3', '\x143', '\x3', '\x143', '\x5', 
		'\x143', '\xE9F', '\n', '\x143', '\x3', '\x144', '\x3', '\x144', '\x3', 
		'\x144', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', '\x3', '\x144', 
		'\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', '\x145', '\x3', 
		'\x145', '\x3', '\x145', '\x3', '\x145', '\x6', '\x145', '\xEAF', '\n', 
		'\x145', '\r', '\x145', '\xE', '\x145', '\xEB0', '\x3', '\x145', '\x3', 
		'\x145', '\x5', '\x145', '\xEB5', '\n', '\x145', '\x3', '\x145', '\x3', 
		'\x145', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', '\x3', '\x146', 
		'\x3', '\x146', '\x3', '\x146', '\x6', '\x146', '\xEBF', '\n', '\x146', 
		'\r', '\x146', '\xE', '\x146', '\xEC0', '\x3', '\x146', '\x3', '\x146', 
		'\x5', '\x146', '\xEC5', '\n', '\x146', '\x3', '\x146', '\x3', '\x146', 
		'\x3', '\x147', '\x3', '\x147', '\x3', '\x147', '\x3', '\x147', '\x3', 
		'\x147', '\x5', '\x147', '\xECE', '\n', '\x147', '\x3', '\x147', '\x3', 
		'\x147', '\x3', '\x148', '\x3', '\x148', '\x3', '\x149', '\x3', '\x149', 
		'\x3', '\x149', '\x3', '\x149', '\x3', '\x149', '\x3', '\x149', '\x3', 
		'\x149', '\x3', '\x14A', '\x3', '\x14A', '\x3', '\x14B', '\x3', '\x14B', 
		'\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', 
		'\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', '\x3', '\x14B', 
		'\x3', '\x14B', '\x5', '\x14B', '\xEE9', '\n', '\x14B', '\x3', '\x14C', 
		'\x3', '\x14C', '\x6', '\x14C', '\xEED', '\n', '\x14C', '\r', '\x14C', 
		'\xE', '\x14C', '\xEEE', '\x3', '\x14D', '\x3', '\x14D', '\x3', '\x14D', 
		'\x3', '\x14E', '\x3', '\x14E', '\x3', '\x14E', '\x5', '\x14E', '\xEF7', 
		'\n', '\x14E', '\x3', '\x14F', '\x3', '\x14F', '\x3', '\x14F', '\x5', 
		'\x14F', '\xEFC', '\n', '\x14F', '\x3', '\x150', '\x3', '\x150', '\x3', 
		'\x150', '\x3', '\x151', '\x3', '\x151', '\x3', '\x152', '\x3', '\x152', 
		'\x3', '\x152', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', 
		'\x153', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', 
		'\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', '\x153', '\x3', 
		'\x153', '\x3', '\x153', '\x3', '\x153', '\x5', '\x153', '\xF15', '\n', 
		'\x153', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', 
		'\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x3', 
		'\x154', '\x3', '\x154', '\x3', '\x154', '\x3', '\x154', '\x5', '\x154', 
		'\xF23', '\n', '\x154', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', 
		'\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x3', 
		'\x155', '\x3', '\x155', '\x3', '\x155', '\x3', '\x155', '\x5', '\x155', 
		'\xF30', '\n', '\x155', '\x3', '\x156', '\x3', '\x156', '\x3', '\x157', 
		'\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x3', 
		'\x157', '\x3', '\x157', '\x3', '\x157', '\x3', '\x157', '\x5', '\x157', 
		'\xF3D', '\n', '\x157', '\x3', '\x158', '\x3', '\x158', '\x3', '\x159', 
		'\x3', '\x159', '\x3', '\x15A', '\x3', '\x15A', '\x3', '\x15B', '\x3', 
		'\x15B', '\x3', '\x15C', '\x3', '\x15C', '\x3', '\x15D', '\x3', '\x15D', 
		'\x3', '\x15E', '\x3', '\x15E', '\x3', '\x15F', '\x3', '\x15F', '\x3', 
		'\x15F', '\x3', '\x15F', '\x3', '\x15F', '\x5', '\x15F', '\xF52', '\n', 
		'\x15F', '\x3', '\x160', '\x3', '\x160', '\x3', '\x160', '\x3', '\x160', 
		'\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x3', '\x161', '\x3', 
		'\x161', '\x3', '\x161', '\x3', '\x161', '\x5', '\x161', '\xF5F', '\n', 
		'\x161', '\x3', '\x162', '\x3', '\x162', '\x3', '\x163', '\x3', '\x163', 
		'\x3', '\x164', '\x3', '\x164', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\a', '\x165', '\xF6F', '\n', '\x165', '\f', '\x165', 
		'\xE', '\x165', '\xF72', '\v', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x5', '\x165', '\xF80', '\n', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x5', '\x165', 
		'\xF9D', '\n', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', 
		'\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\x3', '\x165', 
		'\x3', '\x165', '\x3', '\x165', '\x3', '\x165', '\a', '\x165', '\xFAE', 
		'\n', '\x165', '\f', '\x165', '\xE', '\x165', '\xFB1', '\v', '\x165', 
		'\x3', '\x166', '\x3', '\x166', '\x3', '\x166', '\x3', '\x166', '\x3', 
		'\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', '\x3', '\x167', 
		'\x3', '\x167', '\x5', '\x167', '\xFBD', '\n', '\x167', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', 
		'\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x3', '\x168', 
		'\x3', '\x168', '\x3', '\x168', '\x3', '\x168', '\x5', '\x168', '\xFCC', 
		'\n', '\x168', '\x3', '\x169', '\x3', '\x169', '\x5', '\x169', '\xFD0', 
		'\n', '\x169', '\x3', '\x16A', '\x3', '\x16A', '\x3', '\x16A', '\x3', 
		'\x16A', '\x5', '\x16A', '\xFD6', '\n', '\x16A', '\x3', '\x16B', '\x3', 
		'\x16B', '\x3', '\x16C', '\x3', '\x16C', '\x3', '\x16D', '\x3', '\x16D', 
		'\x5', '\x16D', '\xFDE', '\n', '\x16D', '\x3', '\x16E', '\x3', '\x16E', 
		'\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16E', '\a', '\x16E', '\xFE5', 
		'\n', '\x16E', '\f', '\x16E', '\xE', '\x16E', '\xFE8', '\v', '\x16E', 
		'\x3', '\x16E', '\x3', '\x16E', '\x3', '\x16F', '\x3', '\x16F', '\x3', 
		'\x16F', '\x5', '\x16F', '\xFEF', '\n', '\x16F', '\x3', '\x170', '\x3', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x170', '\a', '\x170', 
		'\xFF6', '\n', '\x170', '\f', '\x170', '\xE', '\x170', '\xFF9', '\v', 
		'\x170', '\x3', '\x170', '\x3', '\x170', '\x3', '\x171', '\x3', '\x171', 
		'\x3', '\x171', '\x3', '\x171', '\x3', '\x172', '\x3', '\x172', '\x3', 
		'\x173', '\x3', '\x173', '\x3', '\x174', '\x3', '\x174', '\x3', '\x174', 
		'\x5', '\x174', '\x1008', '\n', '\x174', '\x3', '\x175', '\x3', '\x175', 
		'\x5', '\x175', '\x100C', '\n', '\x175', '\x3', '\x176', '\x3', '\x176', 
		'\x3', '\x176', '\x3', '\x176', '\x3', '\x176', '\x5', '\x176', '\x1013', 
		'\n', '\x176', '\x3', '\x177', '\x3', '\x177', '\x5', '\x177', '\x1017', 
		'\n', '\x177', '\x3', '\x178', '\x3', '\x178', '\x3', '\x179', '\x3', 
		'\x179', '\x3', '\x179', '\x2', '\x3', '\x2C8', '\x17A', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', 
		'\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', 
		'~', '\x80', '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', 
		'\x92', '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', 
		'\xA4', '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', 
		'\xB6', '\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', 
		'\xC8', '\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', 
		'\xDA', '\xDC', '\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', 
		'\xEC', '\xEE', '\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', 
		'\xFE', '\x100', '\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', 
		'\x10E', '\x110', '\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', 
		'\x11E', '\x120', '\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', 
		'\x12E', '\x130', '\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', 
		'\x13E', '\x140', '\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', 
		'\x14E', '\x150', '\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', 
		'\x15E', '\x160', '\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', 
		'\x16E', '\x170', '\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', 
		'\x17E', '\x180', '\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', 
		'\x18E', '\x190', '\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', 
		'\x19E', '\x1A0', '\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', 
		'\x1AE', '\x1B0', '\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', 
		'\x1BE', '\x1C0', '\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', 
		'\x1CE', '\x1D0', '\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', 
		'\x1DE', '\x1E0', '\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', 
		'\x1EE', '\x1F0', '\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', 
		'\x1FE', '\x200', '\x202', '\x204', '\x206', '\x208', '\x20A', '\x20C', 
		'\x20E', '\x210', '\x212', '\x214', '\x216', '\x218', '\x21A', '\x21C', 
		'\x21E', '\x220', '\x222', '\x224', '\x226', '\x228', '\x22A', '\x22C', 
		'\x22E', '\x230', '\x232', '\x234', '\x236', '\x238', '\x23A', '\x23C', 
		'\x23E', '\x240', '\x242', '\x244', '\x246', '\x248', '\x24A', '\x24C', 
		'\x24E', '\x250', '\x252', '\x254', '\x256', '\x258', '\x25A', '\x25C', 
		'\x25E', '\x260', '\x262', '\x264', '\x266', '\x268', '\x26A', '\x26C', 
		'\x26E', '\x270', '\x272', '\x274', '\x276', '\x278', '\x27A', '\x27C', 
		'\x27E', '\x280', '\x282', '\x284', '\x286', '\x288', '\x28A', '\x28C', 
		'\x28E', '\x290', '\x292', '\x294', '\x296', '\x298', '\x29A', '\x29C', 
		'\x29E', '\x2A0', '\x2A2', '\x2A4', '\x2A6', '\x2A8', '\x2AA', '\x2AC', 
		'\x2AE', '\x2B0', '\x2B2', '\x2B4', '\x2B6', '\x2B8', '\x2BA', '\x2BC', 
		'\x2BE', '\x2C0', '\x2C2', '\x2C4', '\x2C6', '\x2C8', '\x2CA', '\x2CC', 
		'\x2CE', '\x2D0', '\x2D2', '\x2D4', '\x2D6', '\x2D8', '\x2DA', '\x2DC', 
		'\x2DE', '\x2E0', '\x2E2', '\x2E4', '\x2E6', '\x2E8', '\x2EA', '\x2EC', 
		'\x2EE', '\x2F0', '\x2', '!', '\x3', '\x2', '\x135', '\x138', '\x3', '\x2', 
		'\xE3', '\xE4', '\x4', '\x2', '\xB7', '\xB7', '\xBA', '\xBA', '\x3', '\x2', 
		'\x88', '\x89', '\x4', '\x2', '\xF', '\xF', 'J', 'J', '\x3', '\x2', '\x92', 
		'\x93', '\x4', '\x2', '\xB8', '\xB8', '\xBB', '\xBB', '\x4', '\x2', '\x17', 
		'\x17', '\xB6', '\xB6', '\x3', '\x2', '\xC3', '\xC4', '\v', '\x2', '\x5', 
		'\x5', '\x19', '\x19', '\x1B', '\x1B', '\x43', '\x43', '\x45', '\x45', 
		'K', 'K', '\xAF', '\xAF', '\xC0', '\xC0', '\xE1', '\xE2', '\x5', '\x2', 
		'K', 'K', '\x88', '\x88', '\x14D', '\x14D', '\x4', '\x2', '\x8F', '\x90', 
		'\xDA', '\xDA', '\x3', '\x2', '\x7F', '\x80', '\x3', '\x2', '\x126', '\x127', 
		'\x3', '\x2', '\xE', '\xF', '\x4', '\x2', '\x5', '\x5', '\x1A', '\x1A', 
		'\x3', '\x2', '\xEC', '\xED', '\x4', '\x2', 'm', 'm', '\x86', '\x86', 
		'\x3', '\x2', '\xE6', '\xE7', '\x5', '\x2', '\x10B', '\x10B', '\x10D', 
		'\x110', '\x112', '\x114', '\x4', '\x2', '\x10B', '\x10B', '\x10D', '\x114', 
		'\x4', '\x2', '\x16C', '\x16C', '\x171', '\x171', '\x4', '\x2', '\x160', 
		'\x161', '\x166', '\x166', '\x4', '\x2', '\x15F', '\x15F', '\x162', '\x164', 
		'\x3', '\x2', '\x160', '\x161', '\x4', '\x2', '\n', '\n', '\x8A', '\x8B', 
		'\x3', '\x2', '\x3', '\x4', '\x4', '\x2', '\x158', '\x158', '\x15A', '\x15E', 
		'\xF', '\x2', '\a', '\n', '\f', '\f', 'O', 'U', '_', '_', '\x62', '\x65', 
		'\x8A', '\x8B', '\xA4', '\xA5', '\xB6', '\xB6', '\xCE', '\xCE', '\xD0', 
		'\xD0', '\x12E', '\x12E', '\x158', '\x167', '\x169', '\x169', '\x36', 
		'\x2', '\xE', '\x11', '\x1C', '\x1C', '&', '&', '(', '\x31', '\x35', '\x37', 
		':', ';', '=', '@', '\x46', '\x46', 'H', 'I', 'L', 'L', 'N', 'N', 'P', 
		'P', 'X', 'X', '\\', '\\', '_', '_', '\x63', '\x63', '\x65', '\x65', 'g', 
		'i', 'k', 'k', 'n', '\x81', '\x83', '\x83', '\x88', '\x89', '\x8C', '\x8C', 
		'\x8F', '\x91', '\x93', '\x96', '\x98', '\x9C', '\x9E', '\xA3', '\xA9', 
		'\xAE', '\xB0', '\xB0', '\xB4', '\xB5', '\xB8', '\xBB', '\xBE', '\xC4', 
		'\xC6', '\xC8', '\xCA', '\xCA', '\xCC', '\xCD', '\xD2', '\xD2', '\xD5', 
		'\xD7', '\xD9', '\xE1', '\xE3', '\xE5', '\xE8', '\xE8', '\xF5', '\xF5', 
		'\xF7', '\xF7', '\xF9', '\xFA', '\xFD', '\x105', '\x107', '\x107', '\x10A', 
		'\x114', '\x116', '\x116', '\x119', '\x119', '\x11B', '\x120', '\x125', 
		'\x129', '\x12B', '\x12C', '\x130', '\x14B', '\f', '\x2', '\f', '\f', 
		'O', 'O', 'Q', 'U', 'W', 'W', 'Y', 'Y', '\x62', '\x62', '\x64', '\x64', 
		'\xD0', '\xD0', '\xEF', '\xF0', '\xF4', '\xF4', '\x2', '\x116C', '\x2', 
		'\x2F8', '\x3', '\x2', '\x2', '\x2', '\x4', '\x2FD', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\b', '\x303', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x305', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\x31F', '\x3', '\x2', '\x2', '\x2', '\xE', '\x321', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x323', '\x3', '\x2', '\x2', '\x2', '\x12', '\x331', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x333', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x343', '\x3', '\x2', '\x2', '\x2', '\x18', '\x34C', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x354', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x361', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x378', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x387', '\x3', '\x2', '\x2', '\x2', '\"', '\x38B', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x393', '\x3', '\x2', '\x2', '\x2', '&', '\x3C6', '\x3', 
		'\x2', '\x2', '\x2', '(', '\x3C8', '\x3', '\x2', '\x2', '\x2', '*', '\x3CB', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x3CD', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x30', '\x3D4', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x34', '\x3DB', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x3DE', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x3EF', '\x3', '\x2', '\x2', '\x2', ':', '\x3F2', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x3F6', '\x3', '\x2', '\x2', '\x2', '>', '\x3FE', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x401', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x44', '\x40D', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x44B', '\x3', '\x2', '\x2', '\x2', 'H', '\x455', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x47A', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x48D', '\x3', '\x2', '\x2', '\x2', 'N', '\x49C', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x49E', '\x3', '\x2', '\x2', '\x2', 'R', '\x4A9', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x4AD', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x4B2', '\x3', '\x2', '\x2', '\x2', 'X', '\x4B4', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x4B9', '\x3', '\x2', '\x2', '\x2', '\\', '\x4BE', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x4C3', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x4C7', '\x3', '\x2', '\x2', '\x2', '\x62', '\x4CF', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x66', '\x4D8', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x4EC', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x4F9', '\x3', '\x2', '\x2', '\x2', 'l', '\x501', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x503', '\x3', '\x2', '\x2', '\x2', 'p', '\x50C', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x510', '\x3', '\x2', '\x2', '\x2', 
		't', '\x517', '\x3', '\x2', '\x2', '\x2', 'v', '\x51E', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x525', '\x3', '\x2', '\x2', '\x2', 'z', '\x528', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x543', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x54E', '\x3', '\x2', '\x2', '\x2', '\x80', '\x552', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x554', '\x3', '\x2', '\x2', '\x2', '\x84', '\x561', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x563', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x56B', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x574', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x576', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x57B', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x57F', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x587', '\x3', '\x2', '\x2', '\x2', '\x94', '\x58B', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x594', '\x3', '\x2', '\x2', '\x2', '\x98', '\x596', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x59C', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x5A0', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x5AD', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x5AF', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x5B3', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x5DF', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x5E7', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x5ED', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x5F1', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x5F4', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x5FF', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x610', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x612', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x617', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x62B', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x62F', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x636', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x646', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x6D2', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x6D4', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\x6DC', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\x6E1', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x6E3', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\x6E9', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x6ED', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\x6F1', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\x6F5', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x6FF', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x70A', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x71B', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\x72D', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\x732', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x735', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\x739', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x740', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\x749', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\x74F', '\x3', '\x2', '\x2', '\x2', '\xE4', '\x751', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\x761', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x776', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\x778', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\x780', '\x3', '\x2', '\x2', '\x2', '\xEE', '\x787', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\x789', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x797', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\x799', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\x79D', '\x3', '\x2', '\x2', '\x2', '\xF8', '\x7A1', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\x7A5', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x7A9', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\x7B8', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\x7C0', '\x3', '\x2', '\x2', '\x2', '\x102', '\x7C3', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x7C5', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x7D1', '\x3', '\x2', '\x2', '\x2', '\x108', '\x7DB', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x7DE', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x7E9', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x7F1', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x80C', '\x3', '\x2', '\x2', '\x2', '\x112', '\x828', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x82E', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x835', '\x3', '\x2', '\x2', '\x2', '\x118', '\x83F', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x843', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x845', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\x848', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x855', '\x3', '\x2', '\x2', '\x2', '\x122', '\x866', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x874', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x876', '\x3', '\x2', '\x2', '\x2', '\x128', '\x879', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x87C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x885', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x899', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x89B', '\x3', '\x2', '\x2', '\x2', '\x132', '\x89E', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x8B2', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x8B4', '\x3', '\x2', '\x2', '\x2', '\x138', '\x8B8', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x8BA', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x8C3', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x8C9', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x8CF', '\x3', '\x2', '\x2', '\x2', '\x142', '\x8D4', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x8F0', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x8F2', '\x3', '\x2', '\x2', '\x2', '\x148', '\x8F5', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x8FD', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x905', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x90D', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x915', '\x3', '\x2', '\x2', '\x2', '\x152', '\x917', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x924', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x92C', '\x3', '\x2', '\x2', '\x2', '\x158', '\x935', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', '\x937', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x939', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x93E', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x944', '\x3', '\x2', '\x2', '\x2', '\x162', '\x948', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x94E', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x954', '\x3', '\x2', '\x2', '\x2', '\x168', '\x959', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x964', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x971', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x973', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x97B', '\x3', '\x2', '\x2', '\x2', '\x172', '\x97F', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x987', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x98B', '\x3', '\x2', '\x2', '\x2', '\x178', '\x98D', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x993', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x995', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x99C', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x9A4', '\x3', '\x2', '\x2', '\x2', '\x182', '\x9A9', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x9B0', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x9B8', '\x3', '\x2', '\x2', '\x2', '\x188', '\x9BC', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x9BE', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x9C9', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x9CD', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\x9D9', '\x3', '\x2', '\x2', '\x2', '\x192', '\x9E1', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x9E5', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x9F1', '\x3', '\x2', '\x2', '\x2', '\x198', '\x9F7', '\x3', '\x2', '\x2', 
		'\x2', '\x19A', '\x9FA', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x9FD', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\xA00', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\xA07', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\xA09', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\xA16', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\xA3F', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\xA41', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\xA46', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\xA4B', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\xA52', '\x3', '\x2', '\x2', '\x2', 
		'\x1B0', '\xA6F', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\xA72', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', '\xA78', '\x3', '\x2', '\x2', '\x2', '\x1B6', 
		'\xA7A', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\xA83', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\xA89', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\xA92', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\xA9E', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\xAB4', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\xAB6', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\xACC', '\x3', '\x2', '\x2', '\x2', '\x1C6', 
		'\xAD1', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\xB14', '\x3', '\x2', '\x2', 
		'\x2', '\x1CA', '\xB28', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\xB37', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\xB43', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\xB45', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\xB4B', '\x3', 
		'\x2', '\x2', '\x2', '\x1D4', '\xB4F', '\x3', '\x2', '\x2', '\x2', '\x1D6', 
		'\xB58', '\x3', '\x2', '\x2', '\x2', '\x1D8', '\xB62', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\xB64', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\xB72', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\xB78', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0', '\xB7A', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\xB7E', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\xB80', '\x3', '\x2', '\x2', '\x2', '\x1E6', 
		'\xB84', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\xB88', '\x3', '\x2', '\x2', 
		'\x2', '\x1EA', '\xB8C', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\xB93', 
		'\x3', '\x2', '\x2', '\x2', '\x1EE', '\xBA6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F0', '\xBAC', '\x3', '\x2', '\x2', '\x2', '\x1F2', '\xBB8', '\x3', 
		'\x2', '\x2', '\x2', '\x1F4', '\xBBF', '\x3', '\x2', '\x2', '\x2', '\x1F6', 
		'\xBC7', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\xBC9', '\x3', '\x2', '\x2', 
		'\x2', '\x1FA', '\xBDD', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\xBDF', 
		'\x3', '\x2', '\x2', '\x2', '\x1FE', '\xBE7', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\xC1C', '\x3', '\x2', '\x2', '\x2', '\x202', '\xC22', '\x3', 
		'\x2', '\x2', '\x2', '\x204', '\xC44', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\xC46', '\x3', '\x2', '\x2', '\x2', '\x208', '\xC4E', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\xC57', '\x3', '\x2', '\x2', '\x2', '\x20C', '\xC67', 
		'\x3', '\x2', '\x2', '\x2', '\x20E', '\xC6B', '\x3', '\x2', '\x2', '\x2', 
		'\x210', '\xC75', '\x3', '\x2', '\x2', '\x2', '\x212', '\xC7F', '\x3', 
		'\x2', '\x2', '\x2', '\x214', '\xC87', '\x3', '\x2', '\x2', '\x2', '\x216', 
		'\xC8F', '\x3', '\x2', '\x2', '\x2', '\x218', '\xC96', '\x3', '\x2', '\x2', 
		'\x2', '\x21A', '\xC98', '\x3', '\x2', '\x2', '\x2', '\x21C', '\xC9A', 
		'\x3', '\x2', '\x2', '\x2', '\x21E', '\xCA2', '\x3', '\x2', '\x2', '\x2', 
		'\x220', '\xCAA', '\x3', '\x2', '\x2', '\x2', '\x222', '\xCB6', '\x3', 
		'\x2', '\x2', '\x2', '\x224', '\xCD8', '\x3', '\x2', '\x2', '\x2', '\x226', 
		'\xCDA', '\x3', '\x2', '\x2', '\x2', '\x228', '\xCEC', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\xCF5', '\x3', '\x2', '\x2', '\x2', '\x22C', '\xCFA', 
		'\x3', '\x2', '\x2', '\x2', '\x22E', '\xCFE', '\x3', '\x2', '\x2', '\x2', 
		'\x230', '\xD18', '\x3', '\x2', '\x2', '\x2', '\x232', '\xD55', '\x3', 
		'\x2', '\x2', '\x2', '\x234', '\xD57', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\xD59', '\x3', '\x2', '\x2', '\x2', '\x238', '\xD76', '\x3', '\x2', '\x2', 
		'\x2', '\x23A', '\xD7A', '\x3', '\x2', '\x2', '\x2', '\x23C', '\xD7C', 
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\xD89', '\x3', '\x2', '\x2', '\x2', 
		'\x240', '\xD98', '\x3', '\x2', '\x2', '\x2', '\x242', '\xD9D', '\x3', 
		'\x2', '\x2', '\x2', '\x244', '\xDA1', '\x3', '\x2', '\x2', '\x2', '\x246', 
		'\xDB4', '\x3', '\x2', '\x2', '\x2', '\x248', '\xDB9', '\x3', '\x2', '\x2', 
		'\x2', '\x24A', '\xDBB', '\x3', '\x2', '\x2', '\x2', '\x24C', '\xDD7', 
		'\x3', '\x2', '\x2', '\x2', '\x24E', '\xDDA', '\x3', '\x2', '\x2', '\x2', 
		'\x250', '\xDDC', '\x3', '\x2', '\x2', '\x2', '\x252', '\xDDF', '\x3', 
		'\x2', '\x2', '\x2', '\x254', '\xDE7', '\x3', '\x2', '\x2', '\x2', '\x256', 
		'\xDE9', '\x3', '\x2', '\x2', '\x2', '\x258', '\xDFE', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', '\xE05', '\x3', '\x2', '\x2', '\x2', '\x25C', '\xE07', 
		'\x3', '\x2', '\x2', '\x2', '\x25E', '\xE0A', '\x3', '\x2', '\x2', '\x2', 
		'\x260', '\xE16', '\x3', '\x2', '\x2', '\x2', '\x262', '\xE2E', '\x3', 
		'\x2', '\x2', '\x2', '\x264', '\xE30', '\x3', '\x2', '\x2', '\x2', '\x266', 
		'\xE3D', '\x3', '\x2', '\x2', '\x2', '\x268', '\xE3F', '\x3', '\x2', '\x2', 
		'\x2', '\x26A', '\xE42', '\x3', '\x2', '\x2', '\x2', '\x26C', '\xE44', 
		'\x3', '\x2', '\x2', '\x2', '\x26E', '\xE48', '\x3', '\x2', '\x2', '\x2', 
		'\x270', '\xE4E', '\x3', '\x2', '\x2', '\x2', '\x272', '\xE54', '\x3', 
		'\x2', '\x2', '\x2', '\x274', '\xE56', '\x3', '\x2', '\x2', '\x2', '\x276', 
		'\xE61', '\x3', '\x2', '\x2', '\x2', '\x278', '\xE69', '\x3', '\x2', '\x2', 
		'\x2', '\x27A', '\xE73', '\x3', '\x2', '\x2', '\x2', '\x27C', '\xE77', 
		'\x3', '\x2', '\x2', '\x2', '\x27E', '\xE7B', '\x3', '\x2', '\x2', '\x2', 
		'\x280', '\xE7F', '\x3', '\x2', '\x2', '\x2', '\x282', '\xE85', '\x3', 
		'\x2', '\x2', '\x2', '\x284', '\xE9E', '\x3', '\x2', '\x2', '\x2', '\x286', 
		'\xEA0', '\x3', '\x2', '\x2', '\x2', '\x288', '\xEA7', '\x3', '\x2', '\x2', 
		'\x2', '\x28A', '\xEB8', '\x3', '\x2', '\x2', '\x2', '\x28C', '\xEC8', 
		'\x3', '\x2', '\x2', '\x2', '\x28E', '\xED1', '\x3', '\x2', '\x2', '\x2', 
		'\x290', '\xED3', '\x3', '\x2', '\x2', '\x2', '\x292', '\xEDA', '\x3', 
		'\x2', '\x2', '\x2', '\x294', '\xEE8', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\xEEA', '\x3', '\x2', '\x2', '\x2', '\x298', '\xEF0', '\x3', '\x2', '\x2', 
		'\x2', '\x29A', '\xEF6', '\x3', '\x2', '\x2', '\x2', '\x29C', '\xEFB', 
		'\x3', '\x2', '\x2', '\x2', '\x29E', '\xEFD', '\x3', '\x2', '\x2', '\x2', 
		'\x2A0', '\xF00', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\xF02', '\x3', 
		'\x2', '\x2', '\x2', '\x2A4', '\xF14', '\x3', '\x2', '\x2', '\x2', '\x2A6', 
		'\xF22', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\xF2F', '\x3', '\x2', '\x2', 
		'\x2', '\x2AA', '\xF31', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\xF3C', 
		'\x3', '\x2', '\x2', '\x2', '\x2AE', '\xF3E', '\x3', '\x2', '\x2', '\x2', 
		'\x2B0', '\xF40', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\xF42', '\x3', 
		'\x2', '\x2', '\x2', '\x2B4', '\xF44', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\xF46', '\x3', '\x2', '\x2', '\x2', '\x2B8', '\xF48', '\x3', '\x2', '\x2', 
		'\x2', '\x2BA', '\xF4A', '\x3', '\x2', '\x2', '\x2', '\x2BC', '\xF51', 
		'\x3', '\x2', '\x2', '\x2', '\x2BE', '\xF53', '\x3', '\x2', '\x2', '\x2', 
		'\x2C0', '\xF5E', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\xF60', '\x3', 
		'\x2', '\x2', '\x2', '\x2C4', '\xF62', '\x3', '\x2', '\x2', '\x2', '\x2C6', 
		'\xF64', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\xF7F', '\x3', '\x2', '\x2', 
		'\x2', '\x2CA', '\xFB2', '\x3', '\x2', '\x2', '\x2', '\x2CC', '\xFBC', 
		'\x3', '\x2', '\x2', '\x2', '\x2CE', '\xFCB', '\x3', '\x2', '\x2', '\x2', 
		'\x2D0', '\xFCF', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\xFD5', '\x3', 
		'\x2', '\x2', '\x2', '\x2D4', '\xFD7', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\xFD9', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\xFDB', '\x3', '\x2', '\x2', 
		'\x2', '\x2DA', '\xFDF', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\xFEB', 
		'\x3', '\x2', '\x2', '\x2', '\x2DE', '\xFF0', '\x3', '\x2', '\x2', '\x2', 
		'\x2E0', '\xFFC', '\x3', '\x2', '\x2', '\x2', '\x2E2', '\x1000', '\x3', 
		'\x2', '\x2', '\x2', '\x2E4', '\x1002', '\x3', '\x2', '\x2', '\x2', '\x2E6', 
		'\x1007', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x100B', '\x3', '\x2', 
		'\x2', '\x2', '\x2EA', '\x1012', '\x3', '\x2', '\x2', '\x2', '\x2EC', 
		'\x1016', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x1018', '\x3', '\x2', 
		'\x2', '\x2', '\x2F0', '\x101A', '\x3', '\x2', '\x2', '\x2', '\x2F2', 
		'\x2F3', '\x5', '\b', '\x5', '\x2', '\x2F3', '\x2F4', '\x5', '\x4', '\x3', 
		'\x2', '\x2F4', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F5', '\x2F7', 
		'\x5', '\x6', '\x4', '\x2', '\x2F6', '\x2F2', '\x3', '\x2', '\x2', '\x2', 
		'\x2F6', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2FA', '\x3', 
		'\x2', '\x2', '\x2', '\x2F8', '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2F8', 
		'\x2F9', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FB', '\x3', '\x2', '\x2', 
		'\x2', '\x2FA', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2FC', 
		'\a', '\x2', '\x2', '\x3', '\x2FC', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2FD', '\x2FE', '\a', '\x151', '\x2', '\x2', '\x2FE', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x2FF', '\x300', '\x5', '\x4', '\x3', '\x2', '\x300', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x301', '\x304', '\x5', '\n', '\x6', 
		'\x2', '\x302', '\x304', '\x5', '\x12', '\n', '\x2', '\x303', '\x301', 
		'\x3', '\x2', '\x2', '\x2', '\x303', '\x302', '\x3', '\x2', '\x2', '\x2', 
		'\x304', '\t', '\x3', '\x2', '\x2', '\x2', '\x305', '\x30F', '\a', '\x91', 
		'\x2', '\x2', '\x306', '\x308', '\x5', '\f', '\a', '\x2', '\x307', '\x306', 
		'\x3', '\x2', '\x2', '\x2', '\x308', '\x30B', '\x3', '\x2', '\x2', '\x2', 
		'\x309', '\x307', '\x3', '\x2', '\x2', '\x2', '\x309', '\x30A', '\x3', 
		'\x2', '\x2', '\x2', '\x30A', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x30B', 
		'\x309', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x310', '\x5', '\x12', 
		'\n', '\x2', '\x30D', '\x30E', '\a', '\x105', '\x2', '\x2', '\x30E', '\x310', 
		'\x5', '\x1B2', '\xDA', '\x2', '\x30F', '\x309', '\x3', '\x2', '\x2', 
		'\x2', '\x30F', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x310', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x311', '\x320', '\a', '\x92', '\x2', '\x2', '\x312', 
		'\x320', '\a', '\x93', '\x2', '\x2', '\x313', '\x320', '\a', '\x94', '\x2', 
		'\x2', '\x314', '\x320', '\a', '\x95', '\x2', '\x2', '\x315', '\x320', 
		'\a', '\x106', '\x2', '\x2', '\x316', '\x320', '\a', '\xCC', '\x2', '\x2', 
		'\x317', '\x320', '\a', '\x107', '\x2', '\x2', '\x318', '\x31A', '\a', 
		'\x134', '\x2', '\x2', '\x319', '\x31B', '\x5', '\xE', '\b', '\x2', '\x31A', 
		'\x319', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x31B', '\x3', '\x2', '\x2', 
		'\x2', '\x31B', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31E', 
		'\x5', '\x10', '\t', '\x2', '\x31D', '\x31C', '\x3', '\x2', '\x2', '\x2', 
		'\x31D', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x320', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x311', '\x3', '\x2', '\x2', '\x2', '\x31F', 
		'\x312', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x313', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x314', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x315', 
		'\x3', '\x2', '\x2', '\x2', '\x31F', '\x316', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x317', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x318', '\x3', 
		'\x2', '\x2', '\x2', '\x320', '\r', '\x3', '\x2', '\x2', '\x2', '\x321', 
		'\x322', '\a', '\x11A', '\x2', '\x2', '\x322', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x323', '\x324', '\t', '\x2', '\x2', '\x2', '\x324', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x325', '\x332', '\x5', '\x1B2', '\xDA', '\x2', 
		'\x326', '\x332', '\x5', '\x14', '\v', '\x2', '\x327', '\x332', '\x5', 
		'\x18', '\r', '\x2', '\x328', '\x332', '\x5', '\x1A', '\xE', '\x2', '\x329', 
		'\x332', '\x5', '\x1C', '\xF', '\x2', '\x32A', '\x332', '\x5', '\x1E', 
		'\x10', '\x2', '\x32B', '\x332', '\x5', '$', '\x13', '\x2', '\x32C', '\x332', 
		'\x5', '&', '\x14', '\x2', '\x32D', '\x332', '\x5', '\x1D0', '\xE9', '\x2', 
		'\x32E', '\x332', '\x5', '\x1D6', '\xEC', '\x2', '\x32F', '\x332', '\x5', 
		'\x1D8', '\xED', '\x2', '\x330', '\x332', '\x5', '\x1EC', '\xF7', '\x2', 
		'\x331', '\x325', '\x3', '\x2', '\x2', '\x2', '\x331', '\x326', '\x3', 
		'\x2', '\x2', '\x2', '\x331', '\x327', '\x3', '\x2', '\x2', '\x2', '\x331', 
		'\x328', '\x3', '\x2', '\x2', '\x2', '\x331', '\x329', '\x3', '\x2', '\x2', 
		'\x2', '\x331', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x331', '\x32B', 
		'\x3', '\x2', '\x2', '\x2', '\x331', '\x32C', '\x3', '\x2', '\x2', '\x2', 
		'\x331', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x331', '\x32E', '\x3', 
		'\x2', '\x2', '\x2', '\x331', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x331', 
		'\x330', '\x3', '\x2', '\x2', '\x2', '\x332', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x333', '\x334', '\a', ':', '\x2', '\x2', '\x334', '\x336', '\a', 
		'?', '\x2', '\x2', '\x335', '\x337', '\a', '\x32', '\x2', '\x2', '\x336', 
		'\x335', '\x3', '\x2', '\x2', '\x2', '\x336', '\x337', '\x3', '\x2', '\x2', 
		'\x2', '\x337', '\x338', '\x3', '\x2', '\x2', '\x2', '\x338', '\x339', 
		'\a', '@', '\x2', '\x2', '\x339', '\x33B', '\a', '\x16C', '\x2', '\x2', 
		'\x33A', '\x33C', '\a', '\x1C', '\x2', '\x2', '\x33B', '\x33A', '\x3', 
		'\x2', '\x2', '\x2', '\x33B', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x33C', 
		'\x33D', '\x3', '\x2', '\x2', '\x2', '\x33D', '\x33E', '\a', 'j', '\x2', 
		'\x2', '\x33E', '\x33F', '\a', '\'', '\x2', '\x2', '\x33F', '\x341', '\x5', 
		'\x2D8', '\x16D', '\x2', '\x340', '\x342', '\x5', '\xB2', 'Z', '\x2', 
		'\x341', '\x340', '\x3', '\x2', '\x2', '\x2', '\x341', '\x342', '\x3', 
		'\x2', '\x2', '\x2', '\x342', '\x15', '\x3', '\x2', '\x2', '\x2', '\x343', 
		'\x345', '\a', '\xE9', '\x2', '\x2', '\x344', '\x346', '\a', '>', '\x2', 
		'\x2', '\x345', '\x344', '\x3', '\x2', '\x2', '\x2', '\x345', '\x346', 
		'\x3', '\x2', '\x2', '\x2', '\x346', '\x347', '\x3', '\x2', '\x2', '\x2', 
		'\x347', '\x348', '\a', '=', '\x2', '\x2', '\x348', '\x349', '\a', '\x152', 
		'\x2', '\x2', '\x349', '\x34A', '\a', '\x16C', '\x2', '\x2', '\x34A', 
		'\x34B', '\a', '\x153', '\x2', '\x2', '\x34B', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x34C', '\x34D', '\a', ';', '\x2', '\x2', '\x34D', '\x34E', '\a', 
		'\'', '\x2', '\x2', '\x34E', '\x34F', '\x5', '\x2D8', '\x16D', '\x2', 
		'\x34F', '\x350', '\a', 'M', '\x2', '\x2', '\x350', '\x352', '\a', '\x16C', 
		'\x2', '\x2', '\x351', '\x353', '\x5', '\x16', '\f', '\x2', '\x352', '\x351', 
		'\x3', '\x2', '\x2', '\x2', '\x352', '\x353', '\x3', '\x2', '\x2', '\x2', 
		'\x353', '\x19', '\x3', '\x2', '\x2', '\x2', '\x354', '\x35A', '\a', '<', 
		'\x2', '\x2', '\x355', '\x357', '\a', '\x44', '\x2', '\x2', '\x356', '\x355', 
		'\x3', '\x2', '\x2', '\x2', '\x356', '\x357', '\x3', '\x2', '\x2', '\x2', 
		'\x357', '\x358', '\x3', '\x2', '\x2', '\x2', '\x358', '\x359', '\a', 
		'\'', '\x2', '\x2', '\x359', '\x35B', '\x5', '\x2D8', '\x16D', '\x2', 
		'\x35A', '\x356', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x35B', '\x3', 
		'\x2', '\x2', '\x2', '\x35B', '\x35C', '\x3', '\x2', '\x2', '\x2', '\x35C', 
		'\x35D', '\a', '\x17', '\x2', '\x2', '\x35D', '\x35F', '\a', '\x16C', 
		'\x2', '\x2', '\x35E', '\x360', '\x5', '\x146', '\xA4', '\x2', '\x35F', 
		'\x35E', '\x3', '\x2', '\x2', '\x2', '\x35F', '\x360', '\x3', '\x2', '\x2', 
		'\x2', '\x360', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x361', '\x362', 
		'\a', '\x131', '\x2', '\x2', '\x362', '\x363', '\a', '\x132', '\x2', '\x2', 
		'\x363', '\x366', '\x5', '\x2E8', '\x175', '\x2', '\x364', '\x365', '\a', 
		'\x14E', '\x2', '\x2', '\x365', '\x367', '\x5', '\x2E8', '\x175', '\x2', 
		'\x366', '\x364', '\x3', '\x2', '\x2', '\x2', '\x366', '\x367', '\x3', 
		'\x2', '\x2', '\x2', '\x367', '\x372', '\x3', '\x2', '\x2', '\x2', '\x368', 
		'\x369', '\a', '\x17', '\x2', '\x2', '\x369', '\x36C', '\a', '\x171', 
		'\x2', '\x2', '\x36A', '\x36B', '\a', 'M', '\x2', '\x2', '\x36B', '\x36D', 
		'\a', '\x171', '\x2', '\x2', '\x36C', '\x36A', '\x3', '\x2', '\x2', '\x2', 
		'\x36C', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x370', '\x3', 
		'\x2', '\x2', '\x2', '\x36E', '\x36F', '\a', '\x9B', '\x2', '\x2', '\x36F', 
		'\x371', '\a', '\x171', '\x2', '\x2', '\x370', '\x36E', '\x3', '\x2', 
		'\x2', '\x2', '\x370', '\x371', '\x3', '\x2', '\x2', '\x2', '\x371', '\x373', 
		'\x3', '\x2', '\x2', '\x2', '\x372', '\x368', '\x3', '\x2', '\x2', '\x2', 
		'\x372', '\x373', '\x3', '\x2', '\x2', '\x2', '\x373', '\x376', '\x3', 
		'\x2', '\x2', '\x2', '\x374', '\x375', '\a', '\x97', '\x2', '\x2', '\x375', 
		'\x377', '\x5', ' ', '\x11', '\x2', '\x376', '\x374', '\x3', '\x2', '\x2', 
		'\x2', '\x376', '\x377', '\x3', '\x2', '\x2', '\x2', '\x377', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x378', '\x379', '\a', '\x131', '\x2', '\x2', 
		'\x379', '\x37F', '\a', ':', '\x2', '\x2', '\x37A', '\x37D', '\x5', '\x2E8', 
		'\x175', '\x2', '\x37B', '\x37C', '\a', '\x14E', '\x2', '\x2', '\x37C', 
		'\x37E', '\x5', '\x2E8', '\x175', '\x2', '\x37D', '\x37B', '\x3', '\x2', 
		'\x2', '\x2', '\x37D', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x380', 
		'\x3', '\x2', '\x2', '\x2', '\x37F', '\x37A', '\x3', '\x2', '\x2', '\x2', 
		'\x37F', '\x380', '\x3', '\x2', '\x2', '\x2', '\x380', '\x381', '\x3', 
		'\x2', '\x2', '\x2', '\x381', '\x382', '\a', '\x17', '\x2', '\x2', '\x382', 
		'\x385', '\a', '\x16C', '\x2', '\x2', '\x383', '\x384', '\a', '\x97', 
		'\x2', '\x2', '\x384', '\x386', '\x5', ' ', '\x11', '\x2', '\x385', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\x385', '\x386', '\x3', '\x2', '\x2', '\x2', 
		'\x386', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x387', '\x388', '\a', '\x152', 
		'\x2', '\x2', '\x388', '\x389', '\x5', '\"', '\x12', '\x2', '\x389', '\x38A', 
		'\a', '\x153', '\x2', '\x2', '\x38A', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x38B', '\x390', '\x5', '\x136', '\x9C', '\x2', '\x38C', '\x38D', '\a', 
		'\x150', '\x2', '\x2', '\x38D', '\x38F', '\x5', '\x136', '\x9C', '\x2', 
		'\x38E', '\x38C', '\x3', '\x2', '\x2', '\x2', '\x38F', '\x392', '\x3', 
		'\x2', '\x2', '\x2', '\x390', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x390', 
		'\x391', '\x3', '\x2', '\x2', '\x2', '\x391', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x392', '\x390', '\x3', '\x2', '\x2', '\x2', '\x393', '\x394', 
		'\a', '\x131', '\x2', '\x2', '\x394', '\x395', '\a', '\x133', '\x2', '\x2', 
		'\x395', '\x398', '\x5', '\x2E8', '\x175', '\x2', '\x396', '\x397', '\a', 
		'\x14E', '\x2', '\x2', '\x397', '\x399', '\x5', '\x2E8', '\x175', '\x2', 
		'\x398', '\x396', '\x3', '\x2', '\x2', '\x2', '\x398', '\x399', '\x3', 
		'\x2', '\x2', '\x2', '\x399', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39A', 
		'\x39B', '\a', '\x97', '\x2', '\x2', '\x39B', '\x39D', '\x5', ' ', '\x11', 
		'\x2', '\x39C', '\x39A', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39D', 
		'\x3', '\x2', '\x2', '\x2', '\x39D', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x39E', '\x3C7', '\x5', '\x36', '\x1C', '\x2', '\x39F', '\x3C7', '\x5', 
		'>', ' ', '\x2', '\x3A0', '\x3C7', '\x5', '@', '!', '\x2', '\x3A1', '\x3C7', 
		'\x5', '\x44', '#', '\x2', '\x3A2', '\x3C7', '\x5', 'H', '%', '\x2', '\x3A3', 
		'\x3C7', '\x5', '\x46', '$', '\x2', '\x3A4', '\x3C7', '\x5', 'J', '&', 
		'\x2', '\x3A5', '\x3C7', '\x5', '\xBA', '^', '\x2', '\x3A6', '\x3C7', 
		'\x5', '\xBE', '`', '\x2', '\x3A7', '\x3C7', '\x5', '\xFC', '\x7F', '\x2', 
		'\x3A8', '\x3C7', '\x5', '\x10E', '\x88', '\x2', '\x3A9', '\x3C7', '\x5', 
		'\x110', '\x89', '\x2', '\x3AA', '\x3C7', '\x5', '\x114', '\x8B', '\x2', 
		'\x3AB', '\x3C7', '\x5', '\x116', '\x8C', '\x2', '\x3AC', '\x3C7', '\x5', 
		'\x104', '\x83', '\x2', '\x3AD', '\x3C7', '\x5', '\x10A', '\x86', '\x2', 
		'\x3AE', '\x3C7', '\x5', '\x106', '\x84', '\x2', '\x3AF', '\x3C7', '\x5', 
		'\x108', '\x85', '\x2', '\x3B0', '\x3C7', '\x5', '\x10C', '\x87', '\x2', 
		'\x3B1', '\x3C7', '\x5', '\xBC', '_', '\x2', '\x3B2', '\x3C7', '\x5', 
		'\xC0', '\x61', '\x2', '\x3B3', '\x3C7', '\x5', '\xC6', '\x64', '\x2', 
		'\x3B4', '\x3C7', '\x5', '\xC2', '\x62', '\x2', '\x3B5', '\x3C7', '\x5', 
		'\xC8', '\x65', '\x2', '\x3B6', '\x3C7', '\x5', '\xCA', '\x66', '\x2', 
		'\x3B7', '\x3C7', '\x5', '\xCC', 'g', '\x2', '\x3B8', '\x3C7', '\x5', 
		'\xCE', 'h', '\x2', '\x3B9', '\x3C7', '\x5', '\xD0', 'i', '\x2', '\x3BA', 
		'\x3C7', '\x5', '\xDE', 'p', '\x2', '\x3BB', '\x3C7', '\x5', '\xD6', 'l', 
		'\x2', '\x3BC', '\x3C7', '\x5', '\xE0', 'q', '\x2', '\x3BD', '\x3C7', 
		'\x5', '\xD8', 'm', '\x2', '\x3BE', '\x3C7', '\x5', '\xD2', 'j', '\x2', 
		'\x3BF', '\x3C7', '\x5', '\xD4', 'k', '\x2', '\x3C0', '\x3C7', '\x5', 
		'\xDC', 'o', '\x2', '\x3C1', '\x3C7', '\x5', '\xDA', 'n', '\x2', '\x3C2', 
		'\x3C7', '\x5', '\x1EA', '\xF6', '\x2', '\x3C3', '\x3C7', '\x5', '\x1F8', 
		'\xFD', '\x2', '\x3C4', '\x3C7', '\x5', '\xA2', 'R', '\x2', '\x3C5', '\x3C7', 
		'\x5', '\xA6', 'T', '\x2', '\x3C6', '\x39E', '\x3', '\x2', '\x2', '\x2', 
		'\x3C6', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3A0', '\x3', 
		'\x2', '\x2', '\x2', '\x3C6', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3A3', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3A4', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3A5', 
		'\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3A6', '\x3', '\x2', '\x2', '\x2', 
		'\x3C6', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3A8', '\x3', 
		'\x2', '\x2', '\x2', '\x3C6', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3AB', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3AD', 
		'\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3AE', '\x3', '\x2', '\x2', '\x2', 
		'\x3C6', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3B0', '\x3', 
		'\x2', '\x2', '\x2', '\x3C6', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3B3', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3B5', 
		'\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3B6', '\x3', '\x2', '\x2', '\x2', 
		'\x3C6', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3B8', '\x3', 
		'\x2', '\x2', '\x2', '\x3C6', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3BB', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3BC', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3BD', 
		'\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3BE', '\x3', '\x2', '\x2', '\x2', 
		'\x3C6', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C0', '\x3', 
		'\x2', '\x2', '\x2', '\x3C6', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C6', 
		'\x3C2', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C3', '\x3', '\x2', '\x2', 
		'\x2', '\x3C6', '\x3C4', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C5', 
		'\x3', '\x2', '\x2', '\x2', '\x3C7', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x3C8', '\x3C9', '\a', '\f', '\x2', '\x2', '\x3C9', '\x3CA', '\a', '\r', 
		'\x2', '\x2', '\x3CA', ')', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3CC', 
		'\t', '\x3', '\x2', '\x2', '\x3CC', '+', '\x3', '\x2', '\x2', '\x2', '\x3CD', 
		'\x3CE', '\a', '\f', '\x2', '\x2', '\x3CE', '\x3CF', '\a', '\t', '\x2', 
		'\x2', '\x3CF', '\x3D0', '\a', '\r', '\x2', '\x2', '\x3D0', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x3D1', '\x3D2', '\a', '\x7F', '\x2', '\x2', '\x3D2', 
		'\x3D3', '\a', '\x105', '\x2', '\x2', '\x3D3', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x3D4', '\x3D5', '\a', '\x80', '\x2', '\x2', '\x3D5', '\x3D6', 
		'\a', '\x105', '\x2', '\x2', '\x3D6', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x3D7', '\x3D8', '\a', 'y', '\x2', '\x2', '\x3D8', '\x3D9', '\a', '\x18', 
		'\x2', '\x2', '\x3D9', '\x3DA', '\a', '\xE8', '\x2', '\x2', '\x3DA', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x3DB', '\x3DC', '\a', '\b', '\x2', '\x2', 
		'\x3DC', '\x3DD', '\a', '\x89', '\x2', '\x2', '\x3DD', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x3DE', '\x3DF', '\a', '\x43', '\x2', '\x2', '\x3DF', 
		'\x3E1', '\t', '\x4', '\x2', '\x2', '\x3E0', '\x3E2', '\x5', ',', '\x17', 
		'\x2', '\x3E1', '\x3E0', '\x3', '\x2', '\x2', '\x2', '\x3E1', '\x3E2', 
		'\x3', '\x2', '\x2', '\x2', '\x3E2', '\x3E3', '\x3', '\x2', '\x2', '\x2', 
		'\x3E3', '\x3E5', '\x5', '\x2E8', '\x175', '\x2', '\x3E4', '\x3E6', '\x5', 
		'\x42', '\"', '\x2', '\x3E5', '\x3E4', '\x3', '\x2', '\x2', '\x2', '\x3E5', 
		'\x3E6', '\x3', '\x2', '\x2', '\x2', '\x3E6', '\x3E8', '\x3', '\x2', '\x2', 
		'\x2', '\x3E7', '\x3E9', '\x5', '\x38', '\x1D', '\x2', '\x3E8', '\x3E7', 
		'\x3', '\x2', '\x2', '\x2', '\x3E8', '\x3E9', '\x3', '\x2', '\x2', '\x2', 
		'\x3E9', '\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3EB', '\a', 
		'\x97', '\x2', '\x2', '\x3EB', '\x3EC', '\a', '\x9A', '\x2', '\x2', '\x3EC', 
		'\x3EE', '\x5', ':', '\x1E', '\x2', '\x3ED', '\x3EA', '\x3', '\x2', '\x2', 
		'\x2', '\x3ED', '\x3EE', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\a', '\x81', '\x2', '\x2', 
		'\x3F0', '\x3F1', '\a', '\x16C', '\x2', '\x2', '\x3F1', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x3F2', '\x3F3', '\a', '\x152', '\x2', '\x2', '\x3F3', 
		'\x3F4', '\x5', '<', '\x1F', '\x2', '\x3F4', '\x3F5', '\a', '\x153', '\x2', 
		'\x2', '\x3F5', ';', '\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3FB', '\x5', 
		'\x136', '\x9C', '\x2', '\x3F7', '\x3F8', '\a', '\x150', '\x2', '\x2', 
		'\x3F8', '\x3FA', '\x5', '\x136', '\x9C', '\x2', '\x3F9', '\x3F7', '\x3', 
		'\x2', '\x2', '\x2', '\x3FA', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x3FB', 
		'\x3F9', '\x3', '\x2', '\x2', '\x2', '\x3FB', '\x3FC', '\x3', '\x2', '\x2', 
		'\x2', '\x3FC', '=', '\x3', '\x2', '\x2', '\x2', '\x3FD', '\x3FB', '\x3', 
		'\x2', '\x2', '\x2', '\x3FE', '\x3FF', '\a', '\xDE', '\x2', '\x2', '\x3FF', 
		'\x400', '\x5', '\x2E8', '\x175', '\x2', '\x400', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x401', '\x402', '\a', 'K', '\x2', '\x2', '\x402', '\x404', '\t', 
		'\x4', '\x2', '\x2', '\x403', '\x405', '\x5', '(', '\x15', '\x2', '\x404', 
		'\x403', '\x3', '\x2', '\x2', '\x2', '\x404', '\x405', '\x3', '\x2', '\x2', 
		'\x2', '\x405', '\x406', '\x3', '\x2', '\x2', '\x2', '\x406', '\x408', 
		'\x5', '\x2E8', '\x175', '\x2', '\x407', '\x409', '\x5', '*', '\x16', 
		'\x2', '\x408', '\x407', '\x3', '\x2', '\x2', '\x2', '\x408', '\x409', 
		'\x3', '\x2', '\x2', '\x2', '\x409', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x40A', '\x40B', '\a', 'N', '\x2', '\x2', '\x40B', '\x40C', '\a', '\x16C', 
		'\x2', '\x2', '\x40C', '\x43', '\x3', '\x2', '\x2', '\x2', '\x40D', '\x40F', 
		'\a', '\x43', '\x2', '\x2', '\x40E', '\x410', '\a', '\x8C', '\x2', '\x2', 
		'\x40F', '\x40E', '\x3', '\x2', '\x2', '\x2', '\x40F', '\x410', '\x3', 
		'\x2', '\x2', '\x2', '\x410', '\x412', '\x3', '\x2', '\x2', '\x2', '\x411', 
		'\x413', '\a', '\x44', '\x2', '\x2', '\x412', '\x411', '\x3', '\x2', '\x2', 
		'\x2', '\x412', '\x413', '\x3', '\x2', '\x2', '\x2', '\x413', '\x414', 
		'\x3', '\x2', '\x2', '\x2', '\x414', '\x416', '\a', '\'', '\x2', '\x2', 
		'\x415', '\x417', '\x5', ',', '\x17', '\x2', '\x416', '\x415', '\x3', 
		'\x2', '\x2', '\x2', '\x416', '\x417', '\x3', '\x2', '\x2', '\x2', '\x417', 
		'\x418', '\x3', '\x2', '\x2', '\x2', '\x418', '\x449', '\x5', '\x240', 
		'\x121', '\x2', '\x419', '\x41A', '\a', '\n', '\x2', '\x2', '\x41A', '\x41C', 
		'\x5', '\x240', '\x121', '\x2', '\x41B', '\x41D', '\x5', '\x12E', '\x98', 
		'\x2', '\x41C', '\x41B', '\x3', '\x2', '\x2', '\x2', '\x41C', '\x41D', 
		'\x3', '\x2', '\x2', '\x2', '\x41D', '\x41F', '\x3', '\x2', '\x2', '\x2', 
		'\x41E', '\x420', '\x5', '\x144', '\xA3', '\x2', '\x41F', '\x41E', '\x3', 
		'\x2', '\x2', '\x2', '\x41F', '\x420', '\x3', '\x2', '\x2', '\x2', '\x420', 
		'\x422', '\x3', '\x2', '\x2', '\x2', '\x421', '\x423', '\x5', '\x146', 
		'\xA4', '\x2', '\x422', '\x421', '\x3', '\x2', '\x2', '\x2', '\x422', 
		'\x423', '\x3', '\x2', '\x2', '\x2', '\x423', '\x425', '\x3', '\x2', '\x2', 
		'\x2', '\x424', '\x426', '\x5', '\x130', '\x99', '\x2', '\x425', '\x424', 
		'\x3', '\x2', '\x2', '\x2', '\x425', '\x426', '\x3', '\x2', '\x2', '\x2', 
		'\x426', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x427', '\x428', '\a', 
		'\x152', '\x2', '\x2', '\x428', '\x429', '\x5', '\x14A', '\xA6', '\x2', 
		'\x429', '\x42A', '\a', '\x153', '\x2', '\x2', '\x42A', '\x42C', '\x3', 
		'\x2', '\x2', '\x2', '\x42B', '\x427', '\x3', '\x2', '\x2', '\x2', '\x42B', 
		'\x42C', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x42E', '\x3', '\x2', '\x2', 
		'\x2', '\x42D', '\x42F', '\x5', '\x11C', '\x8F', '\x2', '\x42E', '\x42D', 
		'\x3', '\x2', '\x2', '\x2', '\x42E', '\x42F', '\x3', '\x2', '\x2', '\x2', 
		'\x42F', '\x431', '\x3', '\x2', '\x2', '\x2', '\x430', '\x432', '\x5', 
		'\x11E', '\x90', '\x2', '\x431', '\x430', '\x3', '\x2', '\x2', '\x2', 
		'\x431', '\x432', '\x3', '\x2', '\x2', '\x2', '\x432', '\x434', '\x3', 
		'\x2', '\x2', '\x2', '\x433', '\x435', '\x5', '\x120', '\x91', '\x2', 
		'\x434', '\x433', '\x3', '\x2', '\x2', '\x2', '\x434', '\x435', '\x3', 
		'\x2', '\x2', '\x2', '\x435', '\x437', '\x3', '\x2', '\x2', '\x2', '\x436', 
		'\x438', '\x5', '\x122', '\x92', '\x2', '\x437', '\x436', '\x3', '\x2', 
		'\x2', '\x2', '\x437', '\x438', '\x3', '\x2', '\x2', '\x2', '\x438', '\x43A', 
		'\x3', '\x2', '\x2', '\x2', '\x439', '\x43B', '\x5', '\x12E', '\x98', 
		'\x2', '\x43A', '\x439', '\x3', '\x2', '\x2', '\x2', '\x43A', '\x43B', 
		'\x3', '\x2', '\x2', '\x2', '\x43B', '\x43D', '\x3', '\x2', '\x2', '\x2', 
		'\x43C', '\x43E', '\x5', '\x144', '\xA3', '\x2', '\x43D', '\x43C', '\x3', 
		'\x2', '\x2', '\x2', '\x43D', '\x43E', '\x3', '\x2', '\x2', '\x2', '\x43E', 
		'\x440', '\x3', '\x2', '\x2', '\x2', '\x43F', '\x441', '\x5', '\x146', 
		'\xA4', '\x2', '\x440', '\x43F', '\x3', '\x2', '\x2', '\x2', '\x440', 
		'\x441', '\x3', '\x2', '\x2', '\x2', '\x441', '\x443', '\x3', '\x2', '\x2', 
		'\x2', '\x442', '\x444', '\x5', '\x130', '\x99', '\x2', '\x443', '\x442', 
		'\x3', '\x2', '\x2', '\x2', '\x443', '\x444', '\x3', '\x2', '\x2', '\x2', 
		'\x444', '\x447', '\x3', '\x2', '\x2', '\x2', '\x445', '\x446', '\a', 
		'\x18', '\x2', '\x2', '\x446', '\x448', '\x5', '\x1C6', '\xE4', '\x2', 
		'\x447', '\x445', '\x3', '\x2', '\x2', '\x2', '\x447', '\x448', '\x3', 
		'\x2', '\x2', '\x2', '\x448', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x449', 
		'\x419', '\x3', '\x2', '\x2', '\x2', '\x449', '\x42B', '\x3', '\x2', '\x2', 
		'\x2', '\x44A', '\x45', '\x3', '\x2', '\x2', '\x2', '\x44B', '\x44C', 
		'\a', '\xF6', '\x2', '\x2', '\x44C', '\x44D', '\a', '\'', '\x2', '\x2', 
		'\x44D', '\x453', '\x5', '\xA8', 'U', '\x2', '\x44E', '\x44F', '\a', ')', 
		'\x2', '\x2', '\x44F', '\x450', '\a', '\x152', '\x2', '\x2', '\x450', 
		'\x451', '\x5', '\x14E', '\xA8', '\x2', '\x451', '\x452', '\a', '\x153', 
		'\x2', '\x2', '\x452', '\x454', '\x3', '\x2', '\x2', '\x2', '\x453', '\x44E', 
		'\x3', '\x2', '\x2', '\x2', '\x453', '\x454', '\x3', '\x2', '\x2', '\x2', 
		'\x454', 'G', '\x3', '\x2', '\x2', '\x2', '\x455', '\x456', '\a', 'K', 
		'\x2', '\x2', '\x456', '\x458', '\a', '\'', '\x2', '\x2', '\x457', '\x459', 
		'\x5', '(', '\x15', '\x2', '\x458', '\x457', '\x3', '\x2', '\x2', '\x2', 
		'\x458', '\x459', '\x3', '\x2', '\x2', '\x2', '\x459', '\x45A', '\x3', 
		'\x2', '\x2', '\x2', '\x45A', '\x45C', '\x5', '\x240', '\x121', '\x2', 
		'\x45B', '\x45D', '\a', '\xCA', '\x2', '\x2', '\x45C', '\x45B', '\x3', 
		'\x2', '\x2', '\x2', '\x45C', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x45D', 
		'\x45F', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x460', '\x5', '\x16', 
		'\f', '\x2', '\x45F', '\x45E', '\x3', '\x2', '\x2', '\x2', '\x45F', '\x460', 
		'\x3', '\x2', '\x2', '\x2', '\x460', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x461', '\x462', '\a', '\x45', '\x2', '\x2', '\x462', '\x463', '\a', 
		'\'', '\x2', '\x2', '\x463', '\x464', '\x5', '\x240', '\x121', '\x2', 
		'\x464', '\x465', '\x5', 'L', '\'', '\x2', '\x465', '\x47B', '\x3', '\x2', 
		'\x2', '\x2', '\x466', '\x467', '\a', '\x45', '\x2', '\x2', '\x467', '\x468', 
		'\a', '\xB4', '\x2', '\x2', '\x468', '\x46A', '\x5', '\x240', '\x121', 
		'\x2', '\x469', '\x46B', '\a', '\x18', '\x2', '\x2', '\x46A', '\x469', 
		'\x3', '\x2', '\x2', '\x2', '\x46A', '\x46B', '\x3', '\x2', '\x2', '\x2', 
		'\x46B', '\x46C', '\x3', '\x2', '\x2', '\x2', '\x46C', '\x46D', '\x5', 
		'R', '*', '\x2', '\x46D', '\x47B', '\x3', '\x2', '\x2', '\x2', '\x46E', 
		'\x46F', '\a', '\x45', '\x2', '\x2', '\x46F', '\x470', '\a', '\xB9', '\x2', 
		'\x2', '\x470', '\x471', '\a', '\xB4', '\x2', '\x2', '\x471', '\x472', 
		'\x5', '\x240', '\x121', '\x2', '\x472', '\x473', '\x5', 'T', '+', '\x2', 
		'\x473', '\x47B', '\x3', '\x2', '\x2', '\x2', '\x474', '\x475', '\a', 
		'\x45', '\x2', '\x2', '\x475', '\x476', '\t', '\x4', '\x2', '\x2', '\x476', 
		'\x47B', '\x5', 'V', ',', '\x2', '\x477', '\x478', '\a', '\x45', '\x2', 
		'\x2', '\x478', '\x479', '\a', '*', '\x2', '\x2', '\x479', '\x47B', '\x5', 
		'\x86', '\x44', '\x2', '\x47A', '\x461', '\x3', '\x2', '\x2', '\x2', '\x47A', 
		'\x466', '\x3', '\x2', '\x2', '\x2', '\x47A', '\x46E', '\x3', '\x2', '\x2', 
		'\x2', '\x47A', '\x474', '\x3', '\x2', '\x2', '\x2', '\x47A', '\x477', 
		'\x3', '\x2', '\x2', '\x2', '\x47B', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x47C', '\x48E', '\x5', '^', '\x30', '\x2', '\x47D', '\x48E', '\x5', 
		'z', '>', '\x2', '\x47E', '\x48E', '\x5', 'n', '\x38', '\x2', '\x47F', 
		'\x48E', '\x5', 'r', ':', '\x2', '\x480', '\x48E', '\x5', 't', ';', '\x2', 
		'\x481', '\x48E', '\x5', 'v', '<', '\x2', '\x482', '\x48E', '\x5', '|', 
		'?', '\x2', '\x483', '\x48E', '\x5', '\x96', 'L', '\x2', '\x484', '\x48E', 
		'\x5', '\x98', 'M', '\x2', '\x485', '\x48E', '\x5', 'P', ')', '\x2', '\x486', 
		'\x48E', '\x5', '\x64', '\x33', '\x2', '\x487', '\x48E', '\x5', '\x62', 
		'\x32', '\x2', '\x488', '\x48A', '\x5', '\x2DA', '\x16E', '\x2', '\x489', 
		'\x488', '\x3', '\x2', '\x2', '\x2', '\x489', '\x48A', '\x3', '\x2', '\x2', 
		'\x2', '\x48A', '\x48B', '\x3', '\x2', '\x2', '\x2', '\x48B', '\x48E', 
		'\x5', 'N', '(', '\x2', '\x48C', '\x48E', '\x5', '\xAE', 'X', '\x2', '\x48D', 
		'\x47C', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x47D', '\x3', '\x2', '\x2', 
		'\x2', '\x48D', '\x47E', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x47F', 
		'\x3', '\x2', '\x2', '\x2', '\x48D', '\x480', '\x3', '\x2', '\x2', '\x2', 
		'\x48D', '\x481', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x482', '\x3', 
		'\x2', '\x2', '\x2', '\x48D', '\x483', '\x3', '\x2', '\x2', '\x2', '\x48D', 
		'\x484', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x485', '\x3', '\x2', '\x2', 
		'\x2', '\x48D', '\x486', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x487', 
		'\x3', '\x2', '\x2', '\x2', '\x48D', '\x489', '\x3', '\x2', '\x2', '\x2', 
		'\x48D', '\x48C', '\x3', '\x2', '\x2', '\x2', '\x48E', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x48F', '\x49D', '\x5', '\x88', '\x45', '\x2', '\x490', 
		'\x49D', '\x5', '\x94', 'K', '\x2', '\x491', '\x49D', '\x5', '\x9E', 'P', 
		'\x2', '\x492', '\x49D', '\x5', '\x84', '\x43', '\x2', '\x493', '\x49D', 
		'\x5', '\x9A', 'N', '\x2', '\x494', '\x49D', '\x5', '\xA0', 'Q', '\x2', 
		'\x495', '\x49D', '\x5', '\x8C', 'G', '\x2', '\x496', '\x49D', '\x5', 
		'\x8A', '\x46', '\x2', '\x497', '\x49D', '\x5', '\xAC', 'W', '\x2', '\x498', 
		'\x49D', '\x5', 'h', '\x35', '\x2', '\x499', '\x49D', '\x5', 'j', '\x36', 
		'\x2', '\x49A', '\x49D', '\x5', '\x66', '\x34', '\x2', '\x49B', '\x49D', 
		'\x5', '`', '\x31', '\x2', '\x49C', '\x48F', '\x3', '\x2', '\x2', '\x2', 
		'\x49C', '\x490', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x491', '\x3', 
		'\x2', '\x2', '\x2', '\x49C', '\x492', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\x493', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x494', '\x3', '\x2', '\x2', 
		'\x2', '\x49C', '\x495', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x496', 
		'\x3', '\x2', '\x2', '\x2', '\x49C', '\x497', '\x3', '\x2', '\x2', '\x2', 
		'\x49C', '\x498', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x499', '\x3', 
		'\x2', '\x2', '\x2', '\x49C', '\x49A', '\x3', '\x2', '\x2', '\x2', '\x49C', 
		'\x49B', '\x3', '\x2', '\x2', '\x2', '\x49D', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x49E', '\x49F', '\a', '%', '\x2', '\x2', '\x49F', '\x4A0', '\a', 
		'G', '\x2', '\x2', '\x4A0', '\x4A1', '\a', '\x152', '\x2', '\x2', '\x4A1', 
		'\x4A2', '\x5', '\x184', '\xC3', '\x2', '\x4A2', '\x4A3', '\a', '\x153', 
		'\x2', '\x2', '\x4A3', 'Q', '\x3', '\x2', '\x2', '\x2', '\x4A4', '\x4AA', 
		'\x5', '~', '@', '\x2', '\x4A5', '\x4AA', '\x5', '^', '\x30', '\x2', '\x4A6', 
		'\x4AA', '\x5', 'n', '\x38', '\x2', '\x4A7', '\x4AA', '\x5', 'z', '>', 
		'\x2', '\x4A8', '\x4AA', '\x5', '\x1C6', '\xE4', '\x2', '\x4A9', '\x4A4', 
		'\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4A5', '\x3', '\x2', '\x2', '\x2', 
		'\x4A9', '\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4A9', '\x4A7', '\x3', 
		'\x2', '\x2', '\x2', '\x4A9', '\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4AA', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4AE', '\x5', '\x80', '\x41', 
		'\x2', '\x4AC', '\x4AE', '\x5', '\x82', '\x42', '\x2', '\x4AD', '\x4AB', 
		'\x3', '\x2', '\x2', '\x2', '\x4AD', '\x4AC', '\x3', '\x2', '\x2', '\x2', 
		'\x4AE', 'U', '\x3', '\x2', '\x2', '\x2', '\x4AF', '\x4B3', '\x5', 'X', 
		'-', '\x2', '\x4B0', '\x4B3', '\x5', 'Z', '.', '\x2', '\x4B1', '\x4B3', 
		'\x5', '\\', '/', '\x2', '\x4B2', '\x4AF', '\x3', '\x2', '\x2', '\x2', 
		'\x4B2', '\x4B0', '\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4B1', '\x3', 
		'\x2', '\x2', '\x2', '\x4B3', 'W', '\x3', '\x2', '\x2', '\x2', '\x4B4', 
		'\x4B5', '\x5', '\x2E8', '\x175', '\x2', '\x4B5', '\x4B6', '\a', '\x9D', 
		'\x2', '\x2', '\x4B6', '\x4B7', '\a', '\x9A', '\x2', '\x2', '\x4B7', '\x4B8', 
		'\x5', ':', '\x1E', '\x2', '\x4B8', 'Y', '\x3', '\x2', '\x2', '\x2', '\x4B9', 
		'\x4BA', '\x5', '\x2E8', '\x175', '\x2', '\x4BA', '\x4BB', '\a', '\x9D', 
		'\x2', '\x2', '\x4BB', '\x4BC', '\a', '\x100', '\x2', '\x2', '\x4BC', 
		'\x4BD', '\x5', '\xF2', 'z', '\x2', '\x4BD', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x4BE', '\x4BF', '\x5', '\x2E8', '\x175', '\x2', '\x4BF', '\x4C0', 
		'\a', '\x9D', '\x2', '\x2', '\x4C0', '\x4C1', '\a', '\x81', '\x2', '\x2', 
		'\x4C1', '\x4C2', '\a', '\x16C', '\x2', '\x2', '\x4C2', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x4C3', '\x4C4', '\a', 'L', '\x2', '\x2', '\x4C4', '\x4C5', 
		'\a', 'M', '\x2', '\x2', '\x4C5', '\x4C6', '\x5', '\x240', '\x121', '\x2', 
		'\x4C6', '_', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x4C8', '\t', '\x5', 
		'\x2', '\x2', '\x4C8', '\x4C9', '\a', ')', '\x2', '\x2', '\x4C9', '\x4CA', 
		'\a', '\x152', '\x2', '\x2', '\x4CA', '\x4CB', '\x5', '\x148', '\xA5', 
		'\x2', '\x4CB', '\x4CD', '\a', '\x153', '\x2', '\x2', '\x4CC', '\x4CE', 
		'\x5', '*', '\x16', '\x2', '\x4CD', '\x4CC', '\x3', '\x2', '\x2', '\x2', 
		'\x4CD', '\x4CE', '\x3', '\x2', '\x2', '\x2', '\x4CE', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x4CF', '\x4D2', '\a', '\x88', '\x2', '\x2', '\x4D0', 
		'\x4D3', '\x5', '\x16A', '\xB6', '\x2', '\x4D1', '\x4D3', '\x5', '\x164', 
		'\xB3', '\x2', '\x4D2', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D2', 
		'\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4D3', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x4D4', '\x4D5', '\a', 'K', '\x2', '\x2', '\x4D5', '\x4D6', '\a', 
		'\x124', '\x2', '\x2', '\x4D6', '\x4D7', '\x5', '\x2E8', '\x175', '\x2', 
		'\x4D7', '\x65', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4DA', '\a', '\x46', 
		'\x2', '\x2', '\x4D9', '\x4DB', '\a', 'G', '\x2', '\x2', '\x4DA', '\x4D9', 
		'\x3', '\x2', '\x2', '\x2', '\x4DA', '\x4DB', '\x3', '\x2', '\x2', '\x2', 
		'\x4DB', '\x4DC', '\x3', '\x2', '\x2', '\x2', '\x4DC', '\x4DD', '\x5', 
		'\x2E8', '\x175', '\x2', '\x4DD', '\x4DE', '\x5', '\x2E8', '\x175', '\x2', 
		'\x4DE', '\x4E0', '\x5', '\x1A0', '\xD1', '\x2', '\x4DF', '\x4E1', '\x5', 
		'\x192', '\xCA', '\x2', '\x4E0', '\x4DF', '\x3', '\x2', '\x2', '\x2', 
		'\x4E0', '\x4E1', '\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4E4', '\x3', 
		'\x2', '\x2', '\x2', '\x4E2', '\x4E3', '\a', 'N', '\x2', '\x2', '\x4E3', 
		'\x4E5', '\a', '\x16C', '\x2', '\x2', '\x4E4', '\x4E2', '\x3', '\x2', 
		'\x2', '\x2', '\x4E4', '\x4E5', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\x4E7', 
		'\x3', '\x2', '\x2', '\x2', '\x4E6', '\x4E8', '\x5', 'l', '\x37', '\x2', 
		'\x4E7', '\x4E6', '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E8', '\x3', 
		'\x2', '\x2', '\x2', '\x4E8', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4E9', 
		'\x4EB', '\x5', '*', '\x16', '\x2', '\x4EA', '\x4E9', '\x3', '\x2', '\x2', 
		'\x2', '\x4EA', '\x4EB', '\x3', '\x2', '\x2', '\x2', '\x4EB', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x4EC', '\x4ED', '\a', '\xE2', '\x2', '\x2', '\x4ED', 
		'\x4EE', '\a', '\xDD', '\x2', '\x2', '\x4EE', '\x4F0', '\a', '\xE9', '\x2', 
		'\x2', '\x4EF', '\x4F1', '\a', 'G', '\x2', '\x2', '\x4F0', '\x4EF', '\x3', 
		'\x2', '\x2', '\x2', '\x4F0', '\x4F1', '\x3', '\x2', '\x2', '\x2', '\x4F1', 
		'\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F3', '\x5', '\x2E8', 
		'\x175', '\x2', '\x4F3', '\x4F4', '\a', '\x9D', '\x2', '\x2', '\x4F4', 
		'\x4F7', '\x5', '\x132', '\x9A', '\x2', '\x4F5', '\x4F6', '\a', 'N', '\x2', 
		'\x2', '\x4F6', '\x4F8', '\a', '\x16C', '\x2', '\x2', '\x4F7', '\x4F5', 
		'\x3', '\x2', '\x2', '\x2', '\x4F7', '\x4F8', '\x3', '\x2', '\x2', '\x2', 
		'\x4F8', 'i', '\x3', '\x2', '\x2', '\x2', '\x4F9', '\x4FA', '\a', '\xE2', 
		'\x2', '\x2', '\x4FA', '\x4FB', '\a', '\xDD', '\x2', '\x2', '\x4FB', '\x4FC', 
		'\a', '\x9D', '\x2', '\x2', '\x4FC', '\x4FD', '\x5', '\x132', '\x9A', 
		'\x2', '\x4FD', 'k', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\x502', '\a', 
		'H', '\x2', '\x2', '\x4FF', '\x500', '\a', 'I', '\x2', '\x2', '\x500', 
		'\x502', '\x5', '\x2E8', '\x175', '\x2', '\x501', '\x4FE', '\x3', '\x2', 
		'\x2', '\x2', '\x501', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x502', 'm', 
		'\x3', '\x2', '\x2', '\x2', '\x503', '\x505', '\a', '\x88', '\x2', '\x2', 
		'\x504', '\x506', '\x5', ',', '\x17', '\x2', '\x505', '\x504', '\x3', 
		'\x2', '\x2', '\x2', '\x505', '\x506', '\x3', '\x2', '\x2', '\x2', '\x506', 
		'\x508', '\x3', '\x2', '\x2', '\x2', '\x507', '\x509', '\x5', 'p', '\x39', 
		'\x2', '\x508', '\x507', '\x3', '\x2', '\x2', '\x2', '\x509', '\x50A', 
		'\x3', '\x2', '\x2', '\x2', '\x50A', '\x508', '\x3', '\x2', '\x2', '\x2', 
		'\x50A', '\x50B', '\x3', '\x2', '\x2', '\x2', '\x50B', 'o', '\x3', '\x2', 
		'\x2', '\x2', '\x50C', '\x50E', '\x5', '\x2DA', '\x16E', '\x2', '\x50D', 
		'\x50F', '\x5', 'x', '=', '\x2', '\x50E', '\x50D', '\x3', '\x2', '\x2', 
		'\x2', '\x50E', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x50F', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x510', '\x514', '\a', '\xD9', '\x2', '\x2', '\x511', 
		'\x513', '\x5', '\x2DA', '\x16E', '\x2', '\x512', '\x511', '\x3', '\x2', 
		'\x2', '\x2', '\x513', '\x516', '\x3', '\x2', '\x2', '\x2', '\x514', '\x512', 
		'\x3', '\x2', '\x2', '\x2', '\x514', '\x515', '\x3', '\x2', '\x2', '\x2', 
		'\x515', 's', '\x3', '\x2', '\x2', '\x2', '\x516', '\x514', '\x3', '\x2', 
		'\x2', '\x2', '\x517', '\x51B', '\a', '\xDA', '\x2', '\x2', '\x518', '\x51A', 
		'\x5', '\x2DA', '\x16E', '\x2', '\x519', '\x518', '\x3', '\x2', '\x2', 
		'\x2', '\x51A', '\x51D', '\x3', '\x2', '\x2', '\x2', '\x51B', '\x519', 
		'\x3', '\x2', '\x2', '\x2', '\x51B', '\x51C', '\x3', '\x2', '\x2', '\x2', 
		'\x51C', 'u', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x51B', '\x3', '\x2', 
		'\x2', '\x2', '\x51E', '\x522', '\a', '\xDB', '\x2', '\x2', '\x51F', '\x521', 
		'\x5', '\x2DA', '\x16E', '\x2', '\x520', '\x51F', '\x3', '\x2', '\x2', 
		'\x2', '\x521', '\x524', '\x3', '\x2', '\x2', '\x2', '\x522', '\x520', 
		'\x3', '\x2', '\x2', '\x2', '\x522', '\x523', '\x3', '\x2', '\x2', '\x2', 
		'\x523', 'w', '\x3', '\x2', '\x2', '\x2', '\x524', '\x522', '\x3', '\x2', 
		'\x2', '\x2', '\x525', '\x526', '\a', '\x81', '\x2', '\x2', '\x526', '\x527', 
		'\a', '\x16C', '\x2', '\x2', '\x527', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x528', '\x52A', '\a', 'K', '\x2', '\x2', '\x529', '\x52B', '\x5', '(', 
		'\x15', '\x2', '\x52A', '\x529', '\x3', '\x2', '\x2', '\x2', '\x52A', 
		'\x52B', '\x3', '\x2', '\x2', '\x2', '\x52B', '\x52C', '\x3', '\x2', '\x2', 
		'\x2', '\x52C', '\x531', '\x5', '\x2DE', '\x170', '\x2', '\x52D', '\x52E', 
		'\a', '\x150', '\x2', '\x2', '\x52E', '\x530', '\x5', '\x2DE', '\x170', 
		'\x2', '\x52F', '\x52D', '\x3', '\x2', '\x2', '\x2', '\x530', '\x533', 
		'\x3', '\x2', '\x2', '\x2', '\x531', '\x52F', '\x3', '\x2', '\x2', '\x2', 
		'\x531', '\x532', '\x3', '\x2', '\x2', '\x2', '\x532', '\x535', '\x3', 
		'\x2', '\x2', '\x2', '\x533', '\x531', '\x3', '\x2', '\x2', '\x2', '\x534', 
		'\x536', '\a', '\xCA', '\x2', '\x2', '\x535', '\x534', '\x3', '\x2', '\x2', 
		'\x2', '\x535', '\x536', '\x3', '\x2', '\x2', '\x2', '\x536', '\x538', 
		'\x3', '\x2', '\x2', '\x2', '\x537', '\x539', '\x5', '\x16', '\f', '\x2', 
		'\x538', '\x537', '\x3', '\x2', '\x2', '\x2', '\x538', '\x539', '\x3', 
		'\x2', '\x2', '\x2', '\x539', '{', '\x3', '\x2', '\x2', '\x2', '\x53A', 
		'\x53B', '\a', '\x9D', '\x2', '\x2', '\x53B', '\x53C', '\a', '\x9F', '\x2', 
		'\x2', '\x53C', '\x544', '\x5', '\x132', '\x9A', '\x2', '\x53D', '\x53E', 
		'\a', '\x9E', '\x2', '\x2', '\x53E', '\x540', '\a', '\x9F', '\x2', '\x2', 
		'\x53F', '\x541', '\x5', '(', '\x15', '\x2', '\x540', '\x53F', '\x3', 
		'\x2', '\x2', '\x2', '\x540', '\x541', '\x3', '\x2', '\x2', '\x2', '\x541', 
		'\x542', '\x3', '\x2', '\x2', '\x2', '\x542', '\x544', '\x5', '\x132', 
		'\x9A', '\x2', '\x543', '\x53A', '\x3', '\x2', '\x2', '\x2', '\x543', 
		'\x53D', '\x3', '\x2', '\x2', '\x2', '\x544', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x545', '\x546', '\a', '\x9D', '\x2', '\x2', '\x546', '\x547', 
		'\a', '\x9F', '\x2', '\x2', '\x547', '\x54F', '\x5', '\x132', '\x9A', 
		'\x2', '\x548', '\x549', '\a', '\x9E', '\x2', '\x2', '\x549', '\x54B', 
		'\a', '\x9F', '\x2', '\x2', '\x54A', '\x54C', '\x5', '(', '\x15', '\x2', 
		'\x54B', '\x54A', '\x3', '\x2', '\x2', '\x2', '\x54B', '\x54C', '\x3', 
		'\x2', '\x2', '\x2', '\x54C', '\x54D', '\x3', '\x2', '\x2', '\x2', '\x54D', 
		'\x54F', '\x5', '\x132', '\x9A', '\x2', '\x54E', '\x545', '\x3', '\x2', 
		'\x2', '\x2', '\x54E', '\x548', '\x3', '\x2', '\x2', '\x2', '\x54F', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x550', '\x553', '\x5', '.', '\x18', '\x2', 
		'\x551', '\x553', '\x5', '\x30', '\x19', '\x2', '\x552', '\x550', '\x3', 
		'\x2', '\x2', '\x2', '\x552', '\x551', '\x3', '\x2', '\x2', '\x2', '\x553', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x554', '\x555', '\a', ',', '\x2', 
		'\x2', '\x555', '\x83', '\x3', '\x2', '\x2', '\x2', '\x556', '\x557', 
		'\a', '\x9D', '\x2', '\x2', '\x557', '\x558', '\a', '\x96', '\x2', '\x2', 
		'\x558', '\x55C', '\a', '\x16C', '\x2', '\x2', '\x559', '\x55A', '\a', 
		'\x97', '\x2', '\x2', '\x55A', '\x55B', '\a', '\x99', '\x2', '\x2', '\x55B', 
		'\x55D', '\x5', '\x132', '\x9A', '\x2', '\x55C', '\x559', '\x3', '\x2', 
		'\x2', '\x2', '\x55C', '\x55D', '\x3', '\x2', '\x2', '\x2', '\x55D', '\x562', 
		'\x3', '\x2', '\x2', '\x2', '\x55E', '\x55F', '\a', '\x9D', '\x2', '\x2', 
		'\x55F', '\x560', '\a', '\x99', '\x2', '\x2', '\x560', '\x562', '\x5', 
		'\x132', '\x9A', '\x2', '\x561', '\x556', '\x3', '\x2', '\x2', '\x2', 
		'\x561', '\x55E', '\x3', '\x2', '\x2', '\x2', '\x562', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x563', '\x564', '\x5', '\x2E8', '\x175', '\x2', 
		'\x564', '\x565', '\a', '$', '\x2', '\x2', '\x565', '\x567', '\x5', '\x240', 
		'\x121', '\x2', '\x566', '\x568', '\x5', '\x2DA', '\x16E', '\x2', '\x567', 
		'\x566', '\x3', '\x2', '\x2', '\x2', '\x567', '\x568', '\x3', '\x2', '\x2', 
		'\x2', '\x568', '\x569', '\x3', '\x2', '\x2', '\x2', '\x569', '\x56A', 
		'\a', ',', '\x2', '\x2', '\x56A', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x56B', '\x56C', '\a', '\x9D', '\x2', '\x2', '\x56C', '\x56D', '\a', 
		'z', '\x2', '\x2', '\x56D', '\x56E', '\x5', '\xB0', 'Y', '\x2', '\x56E', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x56F', '\x570', '\a', '\t', '\x2', 
		'\x2', '\x570', '\x575', '\a', 'h', '\x2', '\x2', '\x571', '\x572', '\a', 
		'\t', '\x2', '\x2', '\x572', '\x575', '\a', 'i', '\x2', '\x2', '\x573', 
		'\x575', '\x5', '\x120', '\x91', '\x2', '\x574', '\x56F', '\x3', '\x2', 
		'\x2', '\x2', '\x574', '\x571', '\x3', '\x2', '\x2', '\x2', '\x574', '\x573', 
		'\x3', '\x2', '\x2', '\x2', '\x575', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x576', '\x577', '\a', '\x9D', '\x2', '\x2', '\x577', '\x578', '\a', 
		'\xE5', '\x2', '\x2', '\x578', '\x579', '\a', '\x81', '\x2', '\x2', '\x579', 
		'\x57A', '\x5', '\x8E', 'H', '\x2', '\x57A', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x57B', '\x57C', '\a', '\x152', '\x2', '\x2', '\x57C', '\x57D', 
		'\x5', '\x90', 'I', '\x2', '\x57D', '\x57E', '\a', '\x153', '\x2', '\x2', 
		'\x57E', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x57F', '\x584', '\x5', 
		'\x92', 'J', '\x2', '\x580', '\x581', '\a', '\x150', '\x2', '\x2', '\x581', 
		'\x583', '\x5', '\x92', 'J', '\x2', '\x582', '\x580', '\x3', '\x2', '\x2', 
		'\x2', '\x583', '\x586', '\x3', '\x2', '\x2', '\x2', '\x584', '\x582', 
		'\x3', '\x2', '\x2', '\x2', '\x584', '\x585', '\x3', '\x2', '\x2', '\x2', 
		'\x585', '\x91', '\x3', '\x2', '\x2', '\x2', '\x586', '\x584', '\x3', 
		'\x2', '\x2', '\x2', '\x587', '\x588', '\x5', '\x176', '\xBC', '\x2', 
		'\x588', '\x589', '\a', '\x158', '\x2', '\x2', '\x589', '\x58A', '\a', 
		'\x16C', '\x2', '\x2', '\x58A', '\x93', '\x3', '\x2', '\x2', '\x2', '\x58B', 
		'\x58C', '\a', '\x9D', '\x2', '\x2', '\x58C', '\x58D', '\a', '\x81', '\x2', 
		'\x2', '\x58D', '\x58E', '\a', '\x16C', '\x2', '\x2', '\x58E', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x58F', '\x595', '\x5', '\x122', '\x92', 
		'\x2', '\x590', '\x591', '\a', '\t', '\x2', '\x2', '\x591', '\x595', '\a', 
		'\xE5', '\x2', '\x2', '\x592', '\x593', '\a', '\t', '\x2', '\x2', '\x593', 
		'\x595', '\x5', '\x32', '\x1A', '\x2', '\x594', '\x58F', '\x3', '\x2', 
		'\x2', '\x2', '\x594', '\x590', '\x3', '\x2', '\x2', '\x2', '\x594', '\x592', 
		'\x3', '\x2', '\x2', '\x2', '\x595', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x596', '\x597', '\a', '\xFC', '\x2', '\x2', '\x597', '\x598', '\x5', 
		'\x2DA', '\x16E', '\x2', '\x598', '\x599', '\a', '\x97', '\x2', '\x2', 
		'\x599', '\x59A', '\a', '\'', '\x2', '\x2', '\x59A', '\x59B', '\x5', '\x240', 
		'\x121', '\x2', '\x59B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x59C', 
		'\x59D', '\a', 'L', '\x2', '\x2', '\x59D', '\x59E', '\a', 'M', '\x2', 
		'\x2', '\x59E', '\x59F', '\x5', '\x2DA', '\x16E', '\x2', '\x59F', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x5A0', '\x5A1', '\a', '\xE2', '\x2', '\x2', 
		'\x5A1', '\x5A2', '\a', '\xDD', '\x2', '\x2', '\x5A2', '\x5A4', '\a', 
		'\xE9', '\x2', '\x2', '\x5A3', '\x5A5', '\a', 'G', '\x2', '\x2', '\x5A4', 
		'\x5A3', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x5A5', '\x3', '\x2', '\x2', 
		'\x2', '\x5A5', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5A6', '\x5A7', 
		'\x5', '\x2E8', '\x175', '\x2', '\x5A7', '\x5A8', '\a', '\x9D', '\x2', 
		'\x2', '\x5A8', '\x5AB', '\x5', '\x132', '\x9A', '\x2', '\x5A9', '\x5AA', 
		'\a', 'N', '\x2', '\x2', '\x5AA', '\x5AC', '\a', '\x16C', '\x2', '\x2', 
		'\x5AB', '\x5A9', '\x3', '\x2', '\x2', '\x2', '\x5AB', '\x5AC', '\x3', 
		'\x2', '\x2', '\x2', '\x5AC', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x5AD', 
		'\x5AE', '\a', '\xE0', '\x2', '\x2', '\x5AE', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x5AF', '\x5B0', '\a', 'j', '\x2', '\x2', '\x5B0', '\x5B1', '\a', 
		'\x171', '\x2', '\x2', '\x5B1', '\x5B2', '\a', 'k', '\x2', '\x2', '\x5B2', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\x5B3', '\x5B4', '\a', '\x43', '\x2', 
		'\x2', '\x5B4', '\x5B5', '\a', '*', '\x2', '\x2', '\x5B5', '\x5B6', '\x5', 
		'\x2E8', '\x175', '\x2', '\x5B6', '\x5B7', '\a', '$', '\x2', '\x2', '\x5B7', 
		'\x5B8', '\a', '\'', '\x2', '\x2', '\x5B8', '\x5B9', '\x5', '\x240', '\x121', 
		'\x2', '\x5B9', '\x5BA', '\x5', '\x156', '\xAC', '\x2', '\x5BA', '\x5BB', 
		'\a', '\x18', '\x2', '\x2', '\x5BB', '\x5BF', '\a', '\x16C', '\x2', '\x2', 
		'\x5BC', '\x5BD', '\a', '\x97', '\x2', '\x2', '\x5BD', '\x5BE', '\a', 
		'\x98', '\x2', '\x2', '\x5BE', '\x5C0', '\a', ',', '\x2', '\x2', '\x5BF', 
		'\x5BC', '\x3', '\x2', '\x2', '\x2', '\x5BF', '\x5C0', '\x3', '\x2', '\x2', 
		'\x2', '\x5C0', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5C2', 
		'\a', '\xA0', '\x2', '\x2', '\x5C2', '\x5C4', '\x5', '\x132', '\x9A', 
		'\x2', '\x5C3', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5C4', 
		'\x3', '\x2', '\x2', '\x2', '\x5C4', '\x5C8', '\x3', '\x2', '\x2', '\x2', 
		'\x5C5', '\x5C6', '\a', '\xB6', '\x2', '\x2', '\x5C6', '\x5C7', '\a', 
		'\'', '\x2', '\x2', '\x5C7', '\x5C9', '\x5', '\x240', '\x121', '\x2', 
		'\x5C8', '\x5C5', '\x3', '\x2', '\x2', '\x2', '\x5C8', '\x5C9', '\x3', 
		'\x2', '\x2', '\x2', '\x5C9', '\x5CD', '\x3', '\x2', '\x2', '\x2', '\x5CA', 
		'\x5CB', '\a', 'g', '\x2', '\x2', '\x5CB', '\x5CC', '\a', '\x14', '\x2', 
		'\x2', '\x5CC', '\x5CE', '\x5', '\x156', '\xAC', '\x2', '\x5CD', '\x5CA', 
		'\x3', '\x2', '\x2', '\x2', '\x5CD', '\x5CE', '\x3', '\x2', '\x2', '\x2', 
		'\x5CE', '\x5D3', '\x3', '\x2', '\x2', '\x2', '\x5CF', '\x5D1', '\x5', 
		'\x12E', '\x98', '\x2', '\x5D0', '\x5CF', '\x3', '\x2', '\x2', '\x2', 
		'\x5D0', '\x5D1', '\x3', '\x2', '\x2', '\x2', '\x5D1', '\x5D2', '\x3', 
		'\x2', '\x2', '\x2', '\x5D2', '\x5D4', '\x5', '\x144', '\xA3', '\x2', 
		'\x5D3', '\x5D0', '\x3', '\x2', '\x2', '\x2', '\x5D3', '\x5D4', '\x3', 
		'\x2', '\x2', '\x2', '\x5D4', '\x5D7', '\x3', '\x2', '\x2', '\x2', '\x5D5', 
		'\x5D6', '\a', '\x81', '\x2', '\x2', '\x5D6', '\x5D8', '\x5', '\xA4', 
		'S', '\x2', '\x5D7', '\x5D5', '\x3', '\x2', '\x2', '\x2', '\x5D7', '\x5D8', 
		'\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5DA', '\x3', '\x2', '\x2', '\x2', 
		'\x5D9', '\x5DB', '\x5', '\x130', '\x99', '\x2', '\x5DA', '\x5D9', '\x3', 
		'\x2', '\x2', '\x2', '\x5DA', '\x5DB', '\x3', '\x2', '\x2', '\x2', '\x5DB', 
		'\x5DD', '\x3', '\x2', '\x2', '\x2', '\x5DC', '\x5DE', '\x5', '\x11C', 
		'\x8F', '\x2', '\x5DD', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DD', 
		'\x5DE', '\x3', '\x2', '\x2', '\x2', '\x5DE', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\x5DF', '\x5E4', '\x5', '\x2E8', '\x175', '\x2', '\x5E0', '\x5E1', 
		'\a', '\x14E', '\x2', '\x2', '\x5E1', '\x5E3', '\x5', '\x2E8', '\x175', 
		'\x2', '\x5E2', '\x5E0', '\x3', '\x2', '\x2', '\x2', '\x5E3', '\x5E6', 
		'\x3', '\x2', '\x2', '\x2', '\x5E4', '\x5E2', '\x3', '\x2', '\x2', '\x2', 
		'\x5E4', '\x5E5', '\x3', '\x2', '\x2', '\x2', '\x5E5', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\x5E6', '\x5E4', '\x3', '\x2', '\x2', '\x2', '\x5E7', 
		'\x5E8', '\a', 'K', '\x2', '\x2', '\x5E8', '\x5E9', '\a', '*', '\x2', 
		'\x2', '\x5E9', '\x5EA', '\x5', '\x2E8', '\x175', '\x2', '\x5EA', '\x5EB', 
		'\a', '$', '\x2', '\x2', '\x5EB', '\x5EC', '\x5', '\x240', '\x121', '\x2', 
		'\x5EC', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x5ED', '\x5EF', '\x5', 
		'\x240', '\x121', '\x2', '\x5EE', '\x5F0', '\x5', '\x2DA', '\x16E', '\x2', 
		'\x5EF', '\x5EE', '\x3', '\x2', '\x2', '\x2', '\x5EF', '\x5F0', '\x3', 
		'\x2', '\x2', '\x2', '\x5F0', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x5F1', 
		'\x5F2', '\a', '\a', '\x2', '\x2', '\x5F2', '\x5F3', '\a', '\x139', '\x2', 
		'\x2', '\x5F3', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x5F4', '\x5F5', 
		'\a', '\x102', '\x2', '\x2', '\x5F5', '\x5F7', '\a', '\x16C', '\x2', '\x2', 
		'\x5F6', '\x5F8', '\x5', '\xAA', 'V', '\x2', '\x5F7', '\x5F6', '\x3', 
		'\x2', '\x2', '\x2', '\x5F7', '\x5F8', '\x3', '\x2', '\x2', '\x2', '\x5F8', 
		'\x5FD', '\x3', '\x2', '\x2', '\x2', '\x5F9', '\x5FA', '\a', '\x97', '\x2', 
		'\x2', '\x5FA', '\x5FB', '\a', '\x1C', '\x2', '\x2', '\x5FB', '\x5FC', 
		'\a', '\x9F', '\x2', '\x2', '\x5FC', '\x5FE', '\x5', '\x132', '\x9A', 
		'\x2', '\x5FD', '\x5F9', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5FE', 
		'\x3', '\x2', '\x2', '\x2', '\x5FE', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\x5FF', '\x600', '\a', '\x9D', '\x2', '\x2', '\x600', '\x601', '\a', 
		'\x100', '\x2', '\x2', '\x601', '\x602', '\x5', '\xF2', 'z', '\x2', '\x602', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x603', '\x604', '\a', '{', '\x2', 
		'\x2', '\x604', '\x605', '\a', '\x16C', '\x2', '\x2', '\x605', '\x606', 
		'\a', '|', '\x2', '\x2', '\x606', '\x607', '\a', '\x16C', '\x2', '\x2', 
		'\x607', '\x608', '\a', '\x96', '\x2', '\x2', '\x608', '\x60D', '\a', 
		'\x16C', '\x2', '\x2', '\x609', '\x60A', '\a', '}', '\x2', '\x2', '\x60A', 
		'\x60B', '\a', '\x16C', '\x2', '\x2', '\x60B', '\x60C', '\a', '~', '\x2', 
		'\x2', '\x60C', '\x60E', '\a', '\x16C', '\x2', '\x2', '\x60D', '\x609', 
		'\x3', '\x2', '\x2', '\x2', '\x60D', '\x60E', '\x3', '\x2', '\x2', '\x2', 
		'\x60E', '\x611', '\x3', '\x2', '\x2', '\x2', '\x60F', '\x611', '\x5', 
		'\x2E8', '\x175', '\x2', '\x610', '\x603', '\x3', '\x2', '\x2', '\x2', 
		'\x610', '\x60F', '\x3', '\x2', '\x2', '\x2', '\x611', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\x612', '\x613', '\a', '{', '\x2', '\x2', '\x613', 
		'\x614', '\a', '\x16C', '\x2', '\x2', '\x614', '\x615', '\a', '\x96', 
		'\x2', '\x2', '\x615', '\x616', '\a', '\x16C', '\x2', '\x2', '\x616', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\x617', '\x61A', '\x5', '\x2E8', 
		'\x175', '\x2', '\x618', '\x619', '\a', '\x14E', '\x2', '\x2', '\x619', 
		'\x61B', '\x5', '\x2E8', '\x175', '\x2', '\x61A', '\x618', '\x3', '\x2', 
		'\x2', '\x2', '\x61A', '\x61B', '\x3', '\x2', '\x2', '\x2', '\x61B', '\x629', 
		'\x3', '\x2', '\x2', '\x2', '\x61C', '\x626', '\x5', '\x2E8', '\x175', 
		'\x2', '\x61D', '\x622', '\a', '\x14E', '\x2', '\x2', '\x61E', '\x623', 
		'\a', '\xA2', '\x2', '\x2', '\x61F', '\x623', '\a', 'v', '\x2', '\x2', 
		'\x620', '\x623', '\a', '\xA1', '\x2', '\x2', '\x621', '\x623', '\x5', 
		'\x2E8', '\x175', '\x2', '\x622', '\x61E', '\x3', '\x2', '\x2', '\x2', 
		'\x622', '\x61F', '\x3', '\x2', '\x2', '\x2', '\x622', '\x620', '\x3', 
		'\x2', '\x2', '\x2', '\x622', '\x621', '\x3', '\x2', '\x2', '\x2', '\x623', 
		'\x625', '\x3', '\x2', '\x2', '\x2', '\x624', '\x61D', '\x3', '\x2', '\x2', 
		'\x2', '\x625', '\x628', '\x3', '\x2', '\x2', '\x2', '\x626', '\x624', 
		'\x3', '\x2', '\x2', '\x2', '\x626', '\x627', '\x3', '\x2', '\x2', '\x2', 
		'\x627', '\x62A', '\x3', '\x2', '\x2', '\x2', '\x628', '\x626', '\x3', 
		'\x2', '\x2', '\x2', '\x629', '\x61C', '\x3', '\x2', '\x2', '\x2', '\x629', 
		'\x62A', '\x3', '\x2', '\x2', '\x2', '\x62A', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\x62B', '\x62D', '\x5', '\xB4', '[', '\x2', '\x62C', '\x62E', 
		'\x5', '\x2DA', '\x16E', '\x2', '\x62D', '\x62C', '\x3', '\x2', '\x2', 
		'\x2', '\x62D', '\x62E', '\x3', '\x2', '\x2', '\x2', '\x62E', '\xB7', 
		'\x3', '\x2', '\x2', '\x2', '\x62F', '\x631', '\x5', '\x240', '\x121', 
		'\x2', '\x630', '\x632', '\x5', '\x2DA', '\x16E', '\x2', '\x631', '\x630', 
		'\x3', '\x2', '\x2', '\x2', '\x631', '\x632', '\x3', '\x2', '\x2', '\x2', 
		'\x632', '\x634', '\x3', '\x2', '\x2', '\x2', '\x633', '\x635', '\x5', 
		'\x152', '\xAA', '\x2', '\x634', '\x633', '\x3', '\x2', '\x2', '\x2', 
		'\x634', '\x635', '\x3', '\x2', '\x2', '\x2', '\x635', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\x636', '\x644', '\t', '\x6', '\x2', '\x2', '\x637', 
		'\x639', '\t', '\x4', '\x2', '\x2', '\x638', '\x63A', '\a', '\x92', '\x2', 
		'\x2', '\x639', '\x638', '\x3', '\x2', '\x2', '\x2', '\x639', '\x63A', 
		'\x3', '\x2', '\x2', '\x2', '\x63A', '\x63B', '\x3', '\x2', '\x2', '\x2', 
		'\x63B', '\x645', '\x5', '\x2E8', '\x175', '\x2', '\x63C', '\x63E', '\a', 
		'\x8D', '\x2', '\x2', '\x63D', '\x63F', '\a', '\x92', '\x2', '\x2', '\x63E', 
		'\x63D', '\x3', '\x2', '\x2', '\x2', '\x63E', '\x63F', '\x3', '\x2', '\x2', 
		'\x2', '\x63F', '\x640', '\x3', '\x2', '\x2', '\x2', '\x640', '\x645', 
		'\x5', '\x2E6', '\x174', '\x2', '\x641', '\x642', '\t', '\a', '\x2', '\x2', 
		'\x642', '\x645', '\x5', '\xB8', ']', '\x2', '\x643', '\x645', '\x5', 
		'\xB8', ']', '\x2', '\x644', '\x637', '\x3', '\x2', '\x2', '\x2', '\x644', 
		'\x63C', '\x3', '\x2', '\x2', '\x2', '\x644', '\x641', '\x3', '\x2', '\x2', 
		'\x2', '\x644', '\x643', '\x3', '\x2', '\x2', '\x2', '\x645', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\x646', '\x647', '\a', '\xCC', '\x2', '\x2', 
		'\x647', '\x648', '\a', '\'', '\x2', '\x2', '\x648', '\x655', '\x5', '\x2D8', 
		'\x16D', '\x2', '\x649', '\x64A', '\a', '\xDC', '\x2', '\x2', '\x64A', 
		'\x651', '\a', '\xDD', '\x2', '\x2', '\x64B', '\x652', '\a', '\xF7', '\x2', 
		'\x2', '\x64C', '\x64D', '\a', '\xE9', '\x2', '\x2', '\x64D', '\x64F', 
		'\a', ')', '\x2', '\x2', '\x64E', '\x650', '\x5', '\x14E', '\xA8', '\x2', 
		'\x64F', '\x64E', '\x3', '\x2', '\x2', '\x2', '\x64F', '\x650', '\x3', 
		'\x2', '\x2', '\x2', '\x650', '\x652', '\x3', '\x2', '\x2', '\x2', '\x651', 
		'\x64B', '\x3', '\x2', '\x2', '\x2', '\x651', '\x64C', '\x3', '\x2', '\x2', 
		'\x2', '\x651', '\x652', '\x3', '\x2', '\x2', '\x2', '\x652', '\x656', 
		'\x3', '\x2', '\x2', '\x2', '\x653', '\x654', '\a', '\x120', '\x2', '\x2', 
		'\x654', '\x656', '\a', '>', '\x2', '\x2', '\x655', '\x649', '\x3', '\x2', 
		'\x2', '\x2', '\x655', '\x653', '\x3', '\x2', '\x2', '\x2', '\x656', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\x657', '\x658', '\a', '.', '\x2', '\x2', 
		'\x658', '\x65B', '\t', '\b', '\x2', '\x2', '\x659', '\x65A', '\a', '\n', 
		'\x2', '\x2', '\x65A', '\x65C', '\x5', '\x11A', '\x8E', '\x2', '\x65B', 
		'\x659', '\x3', '\x2', '\x2', '\x2', '\x65B', '\x65C', '\x3', '\x2', '\x2', 
		'\x2', '\x65C', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x65D', '\x65E', 
		'\a', '.', '\x2', '\x2', '\x65E', '\x661', '\a', '(', '\x2', '\x2', '\x65F', 
		'\x660', '\t', '\t', '\x2', '\x2', '\x660', '\x662', '\x5', '\x2E8', '\x175', 
		'\x2', '\x661', '\x65F', '\x3', '\x2', '\x2', '\x2', '\x661', '\x662', 
		'\x3', '\x2', '\x2', '\x2', '\x662', '\x666', '\x3', '\x2', '\x2', '\x2', 
		'\x663', '\x664', '\a', '\n', '\x2', '\x2', '\x664', '\x667', '\x5', '\x11A', 
		'\x8E', '\x2', '\x665', '\x667', '\x5', '\x11A', '\x8E', '\x2', '\x666', 
		'\x663', '\x3', '\x2', '\x2', '\x2', '\x666', '\x665', '\x3', '\x2', '\x2', 
		'\x2', '\x666', '\x667', '\x3', '\x2', '\x2', '\x2', '\x667', '\x6D3', 
		'\x3', '\x2', '\x2', '\x2', '\x668', '\x669', '\a', '.', '\x2', '\x2', 
		'\x669', '\x66C', '\a', '\xB5', '\x2', '\x2', '\x66A', '\x66B', '\t', 
		'\t', '\x2', '\x2', '\x66B', '\x66D', '\x5', '\x2E8', '\x175', '\x2', 
		'\x66C', '\x66A', '\x3', '\x2', '\x2', '\x2', '\x66C', '\x66D', '\x3', 
		'\x2', '\x2', '\x2', '\x66D', '\x671', '\x3', '\x2', '\x2', '\x2', '\x66E', 
		'\x66F', '\a', '\n', '\x2', '\x2', '\x66F', '\x672', '\x5', '\x11A', '\x8E', 
		'\x2', '\x670', '\x672', '\x5', '\x11A', '\x8E', '\x2', '\x671', '\x66E', 
		'\x3', '\x2', '\x2', '\x2', '\x671', '\x670', '\x3', '\x2', '\x2', '\x2', 
		'\x671', '\x672', '\x3', '\x2', '\x2', '\x2', '\x672', '\x6D3', '\x3', 
		'\x2', '\x2', '\x2', '\x673', '\x674', '\a', '.', '\x2', '\x2', '\x674', 
		'\x675', '\a', '\xB9', '\x2', '\x2', '\x675', '\x678', '\a', '\xB5', '\x2', 
		'\x2', '\x676', '\x677', '\t', '\t', '\x2', '\x2', '\x677', '\x679', '\x5', 
		'\x2E8', '\x175', '\x2', '\x678', '\x676', '\x3', '\x2', '\x2', '\x2', 
		'\x678', '\x679', '\x3', '\x2', '\x2', '\x2', '\x679', '\x67D', '\x3', 
		'\x2', '\x2', '\x2', '\x67A', '\x67B', '\a', '\n', '\x2', '\x2', '\x67B', 
		'\x67E', '\x5', '\x11A', '\x8E', '\x2', '\x67C', '\x67E', '\x5', '\x11A', 
		'\x8E', '\x2', '\x67D', '\x67A', '\x3', '\x2', '\x2', '\x2', '\x67D', 
		'\x67C', '\x3', '\x2', '\x2', '\x2', '\x67D', '\x67E', '\x3', '\x2', '\x2', 
		'\x2', '\x67E', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x67F', '\x680', 
		'\a', '.', '\x2', '\x2', '\x680', '\x681', '\a', ')', '\x2', '\x2', '\x681', 
		'\x682', '\t', '\t', '\x2', '\x2', '\x682', '\x685', '\x5', '\x240', '\x121', 
		'\x2', '\x683', '\x684', '\t', '\t', '\x2', '\x2', '\x684', '\x686', '\x5', 
		'\x2E8', '\x175', '\x2', '\x685', '\x683', '\x3', '\x2', '\x2', '\x2', 
		'\x685', '\x686', '\x3', '\x2', '\x2', '\x2', '\x686', '\x68A', '\x3', 
		'\x2', '\x2', '\x2', '\x687', '\x688', '\a', '\n', '\x2', '\x2', '\x688', 
		'\x68B', '\x5', '\x11A', '\x8E', '\x2', '\x689', '\x68B', '\x5', '\x11A', 
		'\x8E', '\x2', '\x68A', '\x687', '\x3', '\x2', '\x2', '\x2', '\x68A', 
		'\x689', '\x3', '\x2', '\x2', '\x2', '\x68A', '\x68B', '\x3', '\x2', '\x2', 
		'\x2', '\x68B', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x68C', '\x68D', 
		'\a', '.', '\x2', '\x2', '\x68D', '\x691', '\a', '-', '\x2', '\x2', '\x68E', 
		'\x68F', '\a', '\n', '\x2', '\x2', '\x68F', '\x692', '\x5', '\x118', '\x8D', 
		'\x2', '\x690', '\x692', '\x5', '\x118', '\x8D', '\x2', '\x691', '\x68E', 
		'\x3', '\x2', '\x2', '\x2', '\x691', '\x690', '\x3', '\x2', '\x2', '\x2', 
		'\x691', '\x692', '\x3', '\x2', '\x2', '\x2', '\x692', '\x6D3', '\x3', 
		'\x2', '\x2', '\x2', '\x693', '\x694', '\a', '.', '\x2', '\x2', '\x694', 
		'\x695', '\a', '&', '\x2', '\x2', '\x695', '\x697', '\x5', '\x240', '\x121', 
		'\x2', '\x696', '\x698', '\x5', '\x2DA', '\x16E', '\x2', '\x697', '\x696', 
		'\x3', '\x2', '\x2', '\x2', '\x697', '\x698', '\x3', '\x2', '\x2', '\x2', 
		'\x698', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x699', '\x69A', '\a', 
		'.', '\x2', '\x2', '\x69A', '\x69F', '\a', '\x43', '\x2', '\x2', '\x69B', 
		'\x69C', '\t', '\x4', '\x2', '\x2', '\x69C', '\x6A0', '\x5', '\x2E8', 
		'\x175', '\x2', '\x69D', '\x69E', '\a', '\'', '\x2', '\x2', '\x69E', '\x6A0', 
		'\x5', '\x240', '\x121', '\x2', '\x69F', '\x69B', '\x3', '\x2', '\x2', 
		'\x2', '\x69F', '\x69D', '\x3', '\x2', '\x2', '\x2', '\x6A0', '\x6D3', 
		'\x3', '\x2', '\x2', '\x2', '\x6A1', '\x6A2', '\a', '.', '\x2', '\x2', 
		'\x6A2', '\x6A3', '\a', '\'', '\x2', '\x2', '\x6A3', '\x6A6', '\a', '\x92', 
		'\x2', '\x2', '\x6A4', '\x6A5', '\t', '\t', '\x2', '\x2', '\x6A5', '\x6A7', 
		'\x5', '\x2E8', '\x175', '\x2', '\x6A6', '\x6A4', '\x3', '\x2', '\x2', 
		'\x2', '\x6A6', '\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6A8', 
		'\x3', '\x2', '\x2', '\x2', '\x6A8', '\x6A9', '\a', '\n', '\x2', '\x2', 
		'\x6A9', '\x6AB', '\x5', '\x11A', '\x8E', '\x2', '\x6AA', '\x6AC', '\x5', 
		'\x2DA', '\x16E', '\x2', '\x6AB', '\x6AA', '\x3', '\x2', '\x2', '\x2', 
		'\x6AB', '\x6AC', '\x3', '\x2', '\x2', '\x2', '\x6AC', '\x6D3', '\x3', 
		'\x2', '\x2', '\x2', '\x6AD', '\x6AE', '\a', '.', '\x2', '\x2', '\x6AE', 
		'\x6AF', '\a', '\x9F', '\x2', '\x2', '\x6AF', '\x6B3', '\x5', '\x240', 
		'\x121', '\x2', '\x6B0', '\x6B1', '\a', '\x152', '\x2', '\x2', '\x6B1', 
		'\x6B2', '\a', '\x16C', '\x2', '\x2', '\x6B2', '\x6B4', '\a', '\x153', 
		'\x2', '\x2', '\x6B3', '\x6B0', '\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B4', 
		'\x3', '\x2', '\x2', '\x2', '\x6B4', '\x6D3', '\x3', '\x2', '\x2', '\x2', 
		'\x6B5', '\x6B6', '\a', '.', '\x2', '\x2', '\x6B6', '\x6C2', '\a', '\xC1', 
		'\x2', '\x2', '\x6B7', '\x6B8', '\t', '\x4', '\x2', '\x2', '\x6B8', '\x6BA', 
		'\x5', '\x2E8', '\x175', '\x2', '\x6B9', '\x6BB', '\a', '\x92', '\x2', 
		'\x2', '\x6BA', '\x6B9', '\x3', '\x2', '\x2', '\x2', '\x6BA', '\x6BB', 
		'\x3', '\x2', '\x2', '\x2', '\x6BB', '\x6C3', '\x3', '\x2', '\x2', '\x2', 
		'\x6BC', '\x6BE', '\x5', '\xB6', '\\', '\x2', '\x6BD', '\x6BC', '\x3', 
		'\x2', '\x2', '\x2', '\x6BD', '\x6BE', '\x3', '\x2', '\x2', '\x2', '\x6BE', 
		'\x6C0', '\x3', '\x2', '\x2', '\x2', '\x6BF', '\x6C1', '\a', '\x92', '\x2', 
		'\x2', '\x6C0', '\x6BF', '\x3', '\x2', '\x2', '\x2', '\x6C0', '\x6C1', 
		'\x3', '\x2', '\x2', '\x2', '\x6C1', '\x6C3', '\x3', '\x2', '\x2', '\x2', 
		'\x6C2', '\x6B7', '\x3', '\x2', '\x2', '\x2', '\x6C2', '\x6BD', '\x3', 
		'\x2', '\x2', '\x2', '\x6C3', '\x6D3', '\x3', '\x2', '\x2', '\x2', '\x6C4', 
		'\x6C5', '\a', '.', '\x2', '\x2', '\x6C5', '\x6D3', '\a', '\x103', '\x2', 
		'\x2', '\x6C6', '\x6C7', '\a', '.', '\x2', '\x2', '\x6C7', '\x6D3', '\a', 
		'\x104', '\x2', '\x2', '\x6C8', '\x6C9', '\a', '.', '\x2', '\x2', '\x6C9', 
		'\x6CA', '\a', '\x108', '\x2', '\x2', '\x6CA', '\x6D3', '\a', '\x16C', 
		'\x2', '\x2', '\x6CB', '\x6CC', '\a', '.', '\x2', '\x2', '\x6CC', '\x6D0', 
		'\a', '\x13A', '\x2', '\x2', '\x6CD', '\x6CE', '\a', '\x13B', '\x2', '\x2', 
		'\x6CE', '\x6D1', '\x5', '\x2E8', '\x175', '\x2', '\x6CF', '\x6D1', '\a', 
		'\x13D', '\x2', '\x2', '\x6D0', '\x6CD', '\x3', '\x2', '\x2', '\x2', '\x6D0', 
		'\x6CF', '\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6D3', '\x3', '\x2', '\x2', 
		'\x2', '\x6D2', '\x657', '\x3', '\x2', '\x2', '\x2', '\x6D2', '\x65D', 
		'\x3', '\x2', '\x2', '\x2', '\x6D2', '\x668', '\x3', '\x2', '\x2', '\x2', 
		'\x6D2', '\x673', '\x3', '\x2', '\x2', '\x2', '\x6D2', '\x67F', '\x3', 
		'\x2', '\x2', '\x2', '\x6D2', '\x68C', '\x3', '\x2', '\x2', '\x2', '\x6D2', 
		'\x693', '\x3', '\x2', '\x2', '\x2', '\x6D2', '\x699', '\x3', '\x2', '\x2', 
		'\x2', '\x6D2', '\x6A1', '\x3', '\x2', '\x2', '\x2', '\x6D2', '\x6AD', 
		'\x3', '\x2', '\x2', '\x2', '\x6D2', '\x6B5', '\x3', '\x2', '\x2', '\x2', 
		'\x6D2', '\x6C4', '\x3', '\x2', '\x2', '\x2', '\x6D2', '\x6C6', '\x3', 
		'\x2', '\x2', '\x2', '\x6D2', '\x6C8', '\x3', '\x2', '\x2', '\x2', '\x6D2', 
		'\x6CB', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\x6D4', '\x6D5', '\a', '\xC0', '\x2', '\x2', '\x6D5', '\x6D6', 
		'\a', '\'', '\x2', '\x2', '\x6D6', '\x6D8', '\x5', '\x240', '\x121', '\x2', 
		'\x6D7', '\x6D9', '\x5', '\x2DA', '\x16E', '\x2', '\x6D8', '\x6D7', '\x3', 
		'\x2', '\x2', '\x2', '\x6D8', '\x6D9', '\x3', '\x2', '\x2', '\x2', '\x6D9', 
		'\x6DA', '\x3', '\x2', '\x2', '\x2', '\x6DA', '\x6DB', '\x5', '\xC4', 
		'\x63', '\x2', '\x6DB', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x6DC', '\x6DD', 
		'\a', '\xC0', '\x2', '\x2', '\x6DD', '\x6DE', '\t', '\x4', '\x2', '\x2', 
		'\x6DE', '\x6DF', '\x5', '\x2E8', '\x175', '\x2', '\x6DF', '\x6E0', '\x5', 
		'\xC4', '\x63', '\x2', '\x6E0', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x6E1', 
		'\x6E2', '\t', '\n', '\x2', '\x2', '\x6E2', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\x6E3', '\x6E4', '\a', '\xC2', '\x2', '\x2', '\x6E4', '\x6E5', 
		'\a', '\'', '\x2', '\x2', '\x6E5', '\x6E7', '\x5', '\x240', '\x121', '\x2', 
		'\x6E6', '\x6E8', '\x5', '\x2DA', '\x16E', '\x2', '\x6E7', '\x6E6', '\x3', 
		'\x2', '\x2', '\x2', '\x6E7', '\x6E8', '\x3', '\x2', '\x2', '\x2', '\x6E8', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\x6E9', '\x6EA', '\a', '\xC2', '\x2', 
		'\x2', '\x6EA', '\x6EB', '\t', '\x4', '\x2', '\x2', '\x6EB', '\x6EC', 
		'\x5', '\x2E8', '\x175', '\x2', '\x6EC', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\x6ED', '\x6EE', '\a', '\x43', '\x2', '\x2', '\x6EE', '\x6EF', 
		'\a', '\xF9', '\x2', '\x2', '\x6EF', '\x6F0', '\x5', '\x2E8', '\x175', 
		'\x2', '\x6F0', '\xCB', '\x3', '\x2', '\x2', '\x2', '\x6F1', '\x6F2', 
		'\a', 'K', '\x2', '\x2', '\x6F2', '\x6F3', '\a', '\xF9', '\x2', '\x2', 
		'\x6F3', '\x6F4', '\x5', '\x2E8', '\x175', '\x2', '\x6F4', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\x6F5', '\x6F6', '\a', '\xBC', '\x2', '\x2', '\x6F6', 
		'\x6F8', '\x5', '\xEA', 'v', '\x2', '\x6F7', '\x6F9', '\x5', '\xE4', 's', 
		'\x2', '\x6F8', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x6F8', '\x6F9', 
		'\x3', '\x2', '\x2', '\x2', '\x6F9', '\x6FA', '\x3', '\x2', '\x2', '\x2', 
		'\x6FA', '\x6FB', '\a', 'M', '\x2', '\x2', '\x6FB', '\x6FD', '\x5', '\xF0', 
		'y', '\x2', '\x6FC', '\x6FE', '\x5', '\xF4', '{', '\x2', '\x6FD', '\x6FC', 
		'\x3', '\x2', '\x2', '\x2', '\x6FD', '\x6FE', '\x3', '\x2', '\x2', '\x2', 
		'\x6FE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x6FF', '\x701', '\a', '\xBD', 
		'\x2', '\x2', '\x700', '\x702', '\x5', '\xF6', '|', '\x2', '\x701', '\x700', 
		'\x3', '\x2', '\x2', '\x2', '\x701', '\x702', '\x3', '\x2', '\x2', '\x2', 
		'\x702', '\x703', '\x3', '\x2', '\x2', '\x2', '\x703', '\x705', '\x5', 
		'\xEA', 'v', '\x2', '\x704', '\x706', '\x5', '\xE4', 's', '\x2', '\x705', 
		'\x704', '\x3', '\x2', '\x2', '\x2', '\x705', '\x706', '\x3', '\x2', '\x2', 
		'\x2', '\x706', '\x707', '\x3', '\x2', '\x2', '\x2', '\x707', '\x708', 
		'\a', '\x17', '\x2', '\x2', '\x708', '\x709', '\x5', '\xF0', 'y', '\x2', 
		'\x709', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x70A', '\x70C', '\a', '\xBC', 
		'\x2', '\x2', '\x70B', '\x70D', '\a', '\xF9', '\x2', '\x2', '\x70C', '\x70B', 
		'\x3', '\x2', '\x2', '\x2', '\x70C', '\x70D', '\x3', '\x2', '\x2', '\x2', 
		'\x70D', '\x70E', '\x3', '\x2', '\x2', '\x2', '\x70E', '\x713', '\x5', 
		'\x2E8', '\x175', '\x2', '\x70F', '\x710', '\a', '\x150', '\x2', '\x2', 
		'\x710', '\x712', '\x5', '\x2E8', '\x175', '\x2', '\x711', '\x70F', '\x3', 
		'\x2', '\x2', '\x2', '\x712', '\x715', '\x3', '\x2', '\x2', '\x2', '\x713', 
		'\x711', '\x3', '\x2', '\x2', '\x2', '\x713', '\x714', '\x3', '\x2', '\x2', 
		'\x2', '\x714', '\x716', '\x3', '\x2', '\x2', '\x2', '\x715', '\x713', 
		'\x3', '\x2', '\x2', '\x2', '\x716', '\x717', '\a', 'M', '\x2', '\x2', 
		'\x717', '\x719', '\x5', '\xF0', 'y', '\x2', '\x718', '\x71A', '\x5', 
		'\xFA', '~', '\x2', '\x719', '\x718', '\x3', '\x2', '\x2', '\x2', '\x719', 
		'\x71A', '\x3', '\x2', '\x2', '\x2', '\x71A', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\x71B', '\x71D', '\a', '\xBD', '\x2', '\x2', '\x71C', '\x71E', 
		'\x5', '\xF8', '}', '\x2', '\x71D', '\x71C', '\x3', '\x2', '\x2', '\x2', 
		'\x71D', '\x71E', '\x3', '\x2', '\x2', '\x2', '\x71E', '\x720', '\x3', 
		'\x2', '\x2', '\x2', '\x71F', '\x721', '\a', '\xF9', '\x2', '\x2', '\x720', 
		'\x71F', '\x3', '\x2', '\x2', '\x2', '\x720', '\x721', '\x3', '\x2', '\x2', 
		'\x2', '\x721', '\x722', '\x3', '\x2', '\x2', '\x2', '\x722', '\x727', 
		'\x5', '\x2E8', '\x175', '\x2', '\x723', '\x724', '\a', '\x150', '\x2', 
		'\x2', '\x724', '\x726', '\x5', '\x2E8', '\x175', '\x2', '\x725', '\x723', 
		'\x3', '\x2', '\x2', '\x2', '\x726', '\x729', '\x3', '\x2', '\x2', '\x2', 
		'\x727', '\x725', '\x3', '\x2', '\x2', '\x2', '\x727', '\x728', '\x3', 
		'\x2', '\x2', '\x2', '\x728', '\x72A', '\x3', '\x2', '\x2', '\x2', '\x729', 
		'\x727', '\x3', '\x2', '\x2', '\x2', '\x72A', '\x72B', '\a', '\x17', '\x2', 
		'\x2', '\x72B', '\x72C', '\x5', '\xF0', 'y', '\x2', '\x72C', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\x72D', '\x72E', '\a', '.', '\x2', '\x2', '\x72E', 
		'\x72F', '\a', '\xF9', '\x2', '\x2', '\x72F', '\x730', '\a', '\xBC', '\x2', 
		'\x2', '\x730', '\x731', '\x5', '\xF2', 'z', '\x2', '\x731', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\x732', '\x733', '\a', '.', '\x2', '\x2', '\x733', 
		'\x734', '\a', '\xFA', '\x2', '\x2', '\x734', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\x735', '\x736', '\a', '.', '\x2', '\x2', '\x736', '\x737', '\a', 
		'\xEE', '\x2', '\x2', '\x737', '\x738', '\a', '\xFA', '\x2', '\x2', '\x738', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\x739', '\x73A', '\a', '\x9D', '\x2', 
		'\x2', '\x73A', '\x73E', '\a', '\xF9', '\x2', '\x2', '\x73B', '\x73F', 
		'\a', '\x5', '\x2', '\x2', '\x73C', '\x73F', '\a', '\x6', '\x2', '\x2', 
		'\x73D', '\x73F', '\x5', '\x2E8', '\x175', '\x2', '\x73E', '\x73B', '\x3', 
		'\x2', '\x2', '\x2', '\x73E', '\x73C', '\x3', '\x2', '\x2', '\x2', '\x73E', 
		'\x73D', '\x3', '\x2', '\x2', '\x2', '\x73F', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\x740', '\x741', '\a', '.', '\x2', '\x2', '\x741', '\x743', '\a', 
		'\xBC', '\x2', '\x2', '\x742', '\x744', '\x5', '\xF2', 'z', '\x2', '\x743', 
		'\x742', '\x3', '\x2', '\x2', '\x2', '\x743', '\x744', '\x3', '\x2', '\x2', 
		'\x2', '\x744', '\x747', '\x3', '\x2', '\x2', '\x2', '\x745', '\x746', 
		'\a', '$', '\x2', '\x2', '\x746', '\x748', '\x5', '\xE2', 'r', '\x2', 
		'\x747', '\x745', '\x3', '\x2', '\x2', '\x2', '\x747', '\x748', '\x3', 
		'\x2', '\x2', '\x2', '\x748', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x749', 
		'\x74A', '\a', '.', '\x2', '\x2', '\x74A', '\x74B', '\a', '\x101', '\x2', 
		'\x2', '\x74B', '\x74C', '\x5', '\x2E8', '\x175', '\x2', '\x74C', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\x74D', '\x750', '\a', '\x5', '\x2', '\x2', 
		'\x74E', '\x750', '\x5', '\xE8', 'u', '\x2', '\x74F', '\x74D', '\x3', 
		'\x2', '\x2', '\x2', '\x74F', '\x74E', '\x3', '\x2', '\x2', '\x2', '\x750', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\x751', '\x752', '\a', '$', '\x2', 
		'\x2', '\x752', '\x753', '\x5', '\xE6', 't', '\x2', '\x753', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\x754', '\x755', '\t', '\x4', '\x2', '\x2', '\x755', 
		'\x762', '\x5', '\x2E8', '\x175', '\x2', '\x756', '\x758', '\a', '\'', 
		'\x2', '\x2', '\x757', '\x756', '\x3', '\x2', '\x2', '\x2', '\x757', '\x758', 
		'\x3', '\x2', '\x2', '\x2', '\x758', '\x759', '\x3', '\x2', '\x2', '\x2', 
		'\x759', '\x75B', '\x5', '\x240', '\x121', '\x2', '\x75A', '\x75C', '\x5', 
		'\x2DA', '\x16E', '\x2', '\x75B', '\x75A', '\x3', '\x2', '\x2', '\x2', 
		'\x75B', '\x75C', '\x3', '\x2', '\x2', '\x2', '\x75C', '\x762', '\x3', 
		'\x2', '\x2', '\x2', '\x75D', '\x75E', '\a', '\xFD', '\x2', '\x2', '\x75E', 
		'\x762', '\a', '\x16C', '\x2', '\x2', '\x75F', '\x760', '\a', '\xFE', 
		'\x2', '\x2', '\x760', '\x762', '\x5', '\x2E8', '\x175', '\x2', '\x761', 
		'\x754', '\x3', '\x2', '\x2', '\x2', '\x761', '\x757', '\x3', '\x2', '\x2', 
		'\x2', '\x761', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x761', '\x75F', 
		'\x3', '\x2', '\x2', '\x2', '\x762', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\x763', '\x764', '\t', '\x4', '\x2', '\x2', '\x764', '\x777', '\x5', 
		'\x2E8', '\x175', '\x2', '\x765', '\x767', '\a', '\'', '\x2', '\x2', '\x766', 
		'\x765', '\x3', '\x2', '\x2', '\x2', '\x766', '\x767', '\x3', '\x2', '\x2', 
		'\x2', '\x767', '\x768', '\x3', '\x2', '\x2', '\x2', '\x768', '\x76D', 
		'\x5', '\x240', '\x121', '\x2', '\x769', '\x76A', '\a', '\x152', '\x2', 
		'\x2', '\x76A', '\x76B', '\x5', '\x14E', '\xA8', '\x2', '\x76B', '\x76C', 
		'\a', '\x153', '\x2', '\x2', '\x76C', '\x76E', '\x3', '\x2', '\x2', '\x2', 
		'\x76D', '\x769', '\x3', '\x2', '\x2', '\x2', '\x76D', '\x76E', '\x3', 
		'\x2', '\x2', '\x2', '\x76E', '\x770', '\x3', '\x2', '\x2', '\x2', '\x76F', 
		'\x771', '\x5', '\x2DA', '\x16E', '\x2', '\x770', '\x76F', '\x3', '\x2', 
		'\x2', '\x2', '\x770', '\x771', '\x3', '\x2', '\x2', '\x2', '\x771', '\x777', 
		'\x3', '\x2', '\x2', '\x2', '\x772', '\x773', '\a', '\xFD', '\x2', '\x2', 
		'\x773', '\x777', '\a', '\x16C', '\x2', '\x2', '\x774', '\x775', '\a', 
		'\xFE', '\x2', '\x2', '\x775', '\x777', '\x5', '\x2E8', '\x175', '\x2', 
		'\x776', '\x763', '\x3', '\x2', '\x2', '\x2', '\x776', '\x766', '\x3', 
		'\x2', '\x2', '\x2', '\x776', '\x772', '\x3', '\x2', '\x2', '\x2', '\x776', 
		'\x774', '\x3', '\x2', '\x2', '\x2', '\x777', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\x778', '\x77D', '\x5', '\xEC', 'w', '\x2', '\x779', '\x77A', 
		'\a', '\x150', '\x2', '\x2', '\x77A', '\x77C', '\x5', '\xEC', 'w', '\x2', 
		'\x77B', '\x779', '\x3', '\x2', '\x2', '\x2', '\x77C', '\x77F', '\x3', 
		'\x2', '\x2', '\x2', '\x77D', '\x77B', '\x3', '\x2', '\x2', '\x2', '\x77D', 
		'\x77E', '\x3', '\x2', '\x2', '\x2', '\x77E', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\x77F', '\x77D', '\x3', '\x2', '\x2', '\x2', '\x780', '\x785', 
		'\x5', '\xEE', 'x', '\x2', '\x781', '\x782', '\a', '\x152', '\x2', '\x2', 
		'\x782', '\x783', '\x5', '\x14E', '\xA8', '\x2', '\x783', '\x784', '\a', 
		'\x153', '\x2', '\x2', '\x784', '\x786', '\x3', '\x2', '\x2', '\x2', '\x785', 
		'\x781', '\x3', '\x2', '\x2', '\x2', '\x785', '\x786', '\x3', '\x2', '\x2', 
		'\x2', '\x786', '\xED', '\x3', '\x2', '\x2', '\x2', '\x787', '\x788', 
		'\t', '\v', '\x2', '\x2', '\x788', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\x789', '\x78E', '\x5', '\xF2', 'z', '\x2', '\x78A', '\x78B', '\a', '\x150', 
		'\x2', '\x2', '\x78B', '\x78D', '\x5', '\xF2', 'z', '\x2', '\x78C', '\x78A', 
		'\x3', '\x2', '\x2', '\x2', '\x78D', '\x790', '\x3', '\x2', '\x2', '\x2', 
		'\x78E', '\x78C', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x78F', '\x3', 
		'\x2', '\x2', '\x2', '\x78F', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x790', 
		'\x78E', '\x3', '\x2', '\x2', '\x2', '\x791', '\x792', '\a', '\xF8', '\x2', 
		'\x2', '\x792', '\x798', '\x5', '\x2EC', '\x177', '\x2', '\x793', '\x794', 
		'\a', '\x13', '\x2', '\x2', '\x794', '\x798', '\x5', '\x2EC', '\x177', 
		'\x2', '\x795', '\x796', '\a', '\xF9', '\x2', '\x2', '\x796', '\x798', 
		'\x5', '\x2E8', '\x175', '\x2', '\x797', '\x791', '\x3', '\x2', '\x2', 
		'\x2', '\x797', '\x793', '\x3', '\x2', '\x2', '\x2', '\x797', '\x795', 
		'\x3', '\x2', '\x2', '\x2', '\x798', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\x799', '\x79A', '\a', '\x97', '\x2', '\x2', '\x79A', '\x79B', '\a', 
		'\xBC', '\x2', '\x2', '\x79B', '\x79C', '\a', '\xDF', '\x2', '\x2', '\x79C', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '\x79D', '\x79E', '\a', '\xBC', '\x2', 
		'\x2', '\x79E', '\x79F', '\a', '\xDF', '\x2', '\x2', '\x79F', '\x7A0', 
		'\a', '\xE9', '\x2', '\x2', '\x7A0', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\x7A1', '\x7A2', '\a', '\xFF', '\x2', '\x2', '\x7A2', '\x7A3', '\a', 
		'\xDF', '\x2', '\x2', '\x7A3', '\x7A4', '\a', '\xE9', '\x2', '\x2', '\x7A4', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\x7A5', '\x7A6', '\a', '\x97', '\x2', 
		'\x2', '\x7A6', '\x7A7', '\a', '\xFF', '\x2', '\x2', '\x7A7', '\x7A8', 
		'\a', '\xDF', '\x2', '\x2', '\x7A8', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\x7A9', '\x7AB', '\a', '/', '\x2', '\x2', '\x7AA', '\x7AC', '\a', '\x30', 
		'\x2', '\x2', '\x7AB', '\x7AA', '\x3', '\x2', '\x2', '\x2', '\x7AB', '\x7AC', 
		'\x3', '\x2', '\x2', '\x2', '\x7AC', '\x7B6', '\x3', '\x2', '\x2', '\x2', 
		'\x7AD', '\x7AE', '\a', '\'', '\x2', '\x2', '\x7AE', '\x7B1', '\x5', '\x240', 
		'\x121', '\x2', '\x7AF', '\x7B0', '\t', '\f', '\x2', '\x2', '\x7B0', '\x7B2', 
		'\a', '&', '\x2', '\x2', '\x7B1', '\x7AF', '\x3', '\x2', '\x2', '\x2', 
		'\x7B1', '\x7B2', '\x3', '\x2', '\x2', '\x2', '\x7B2', '\x7B7', '\x3', 
		'\x2', '\x2', '\x2', '\x7B3', '\x7B5', '\x5', '\x2DA', '\x16E', '\x2', 
		'\x7B4', '\x7B3', '\x3', '\x2', '\x2', '\x2', '\x7B4', '\x7B5', '\x3', 
		'\x2', '\x2', '\x2', '\x7B5', '\x7B7', '\x3', '\x2', '\x2', '\x2', '\x7B6', 
		'\x7AD', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7B4', '\x3', '\x2', '\x2', 
		'\x2', '\x7B7', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x7B8', '\x7BD', 
		'\x5', '\x100', '\x81', '\x2', '\x7B9', '\x7BA', '\a', '\x150', '\x2', 
		'\x2', '\x7BA', '\x7BC', '\x5', '\x100', '\x81', '\x2', '\x7BB', '\x7B9', 
		'\x3', '\x2', '\x2', '\x2', '\x7BC', '\x7BF', '\x3', '\x2', '\x2', '\x2', 
		'\x7BD', '\x7BB', '\x3', '\x2', '\x2', '\x2', '\x7BD', '\x7BE', '\x3', 
		'\x2', '\x2', '\x2', '\x7BE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x7BF', 
		'\x7BD', '\x3', '\x2', '\x2', '\x2', '\x7C0', '\x7C1', '\x5', '\x102', 
		'\x82', '\x2', '\x7C1', '\x7C2', '\a', '\x16C', '\x2', '\x2', '\x7C2', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x7C3', '\x7C4', '\t', '\r', '\x2', 
		'\x2', '\x7C4', '\x103', '\x3', '\x2', '\x2', '\x2', '\x7C5', '\x7C7', 
		'\a', '\x43', '\x2', '\x2', '\x7C6', '\x7C8', '\a', '\x8C', '\x2', '\x2', 
		'\x7C7', '\x7C6', '\x3', '\x2', '\x2', '\x2', '\x7C7', '\x7C8', '\x3', 
		'\x2', '\x2', '\x2', '\x7C8', '\x7C9', '\x3', '\x2', '\x2', '\x2', '\x7C9', 
		'\x7CA', '\a', '\x8D', '\x2', '\x2', '\x7CA', '\x7CB', '\x5', '\x2EA', 
		'\x176', '\x2', '\x7CB', '\x7CC', '\a', '\x18', '\x2', '\x2', '\x7CC', 
		'\x7CF', '\a', '\x16C', '\x2', '\x2', '\x7CD', '\x7CE', '\a', '\x34', 
		'\x2', '\x2', '\x7CE', '\x7D0', '\x5', '\xFE', '\x80', '\x2', '\x7CF', 
		'\x7CD', '\x3', '\x2', '\x2', '\x2', '\x7CF', '\x7D0', '\x3', '\x2', '\x2', 
		'\x2', '\x7D0', '\x105', '\x3', '\x2', '\x2', '\x2', '\x7D1', '\x7D3', 
		'\a', 'K', '\x2', '\x2', '\x7D2', '\x7D4', '\a', '\x8C', '\x2', '\x2', 
		'\x7D3', '\x7D2', '\x3', '\x2', '\x2', '\x2', '\x7D3', '\x7D4', '\x3', 
		'\x2', '\x2', '\x2', '\x7D4', '\x7D5', '\x3', '\x2', '\x2', '\x2', '\x7D5', 
		'\x7D7', '\a', '\x8D', '\x2', '\x2', '\x7D6', '\x7D8', '\x5', '(', '\x15', 
		'\x2', '\x7D7', '\x7D6', '\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7D8', 
		'\x3', '\x2', '\x2', '\x2', '\x7D8', '\x7D9', '\x3', '\x2', '\x2', '\x2', 
		'\x7D9', '\x7DA', '\x5', '\x2EA', '\x176', '\x2', '\x7DA', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x7DB', '\x7DC', '\a', '\x10A', '\x2', '\x2', '\x7DC', 
		'\x7DD', '\a', '\x8D', '\x2', '\x2', '\x7DD', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x7DE', '\x7DF', '\a', '\x43', '\x2', '\x2', '\x7DF', '\x7E0', 
		'\a', '\x8C', '\x2', '\x2', '\x7E0', '\x7E1', '\a', '\x8E', '\x2', '\x2', 
		'\x7E1', '\x7E2', '\a', '\x172', '\x2', '\x2', '\x7E2', '\x7E4', '\a', 
		'\x152', '\x2', '\x2', '\x7E3', '\x7E5', '\x5', '\x148', '\xA5', '\x2', 
		'\x7E4', '\x7E3', '\x3', '\x2', '\x2', '\x2', '\x7E4', '\x7E5', '\x3', 
		'\x2', '\x2', '\x2', '\x7E5', '\x7E6', '\x3', '\x2', '\x2', '\x2', '\x7E6', 
		'\x7E7', '\a', '\x153', '\x2', '\x2', '\x7E7', '\x7E8', '\x5', '\x2C8', 
		'\x165', '\x2', '\x7E8', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x7E9', 
		'\x7EA', '\a', 'K', '\x2', '\x2', '\x7EA', '\x7EB', '\a', '\x8C', '\x2', 
		'\x2', '\x7EB', '\x7ED', '\a', '\x8E', '\x2', '\x2', '\x7EC', '\x7EE', 
		'\x5', '(', '\x15', '\x2', '\x7ED', '\x7EC', '\x3', '\x2', '\x2', '\x2', 
		'\x7ED', '\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7EF', '\x3', 
		'\x2', '\x2', '\x2', '\x7EF', '\x7F0', '\a', '\x172', '\x2', '\x2', '\x7F0', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x7F1', '\x7F3', '\a', '\x43', '\x2', 
		'\x2', '\x7F2', '\x7F4', '\x5', '\x34', '\x1B', '\x2', '\x7F3', '\x7F2', 
		'\x3', '\x2', '\x2', '\x2', '\x7F3', '\x7F4', '\x3', '\x2', '\x2', '\x2', 
		'\x7F4', '\x7F5', '\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7F7', '\a', 
		'\xB4', '\x2', '\x2', '\x7F6', '\x7F8', '\x5', ',', '\x17', '\x2', '\x7F7', 
		'\x7F6', '\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7F8', '\x3', '\x2', '\x2', 
		'\x2', '\x7F8', '\x7F9', '\x3', '\x2', '\x2', '\x2', '\x7F9', '\x7FE', 
		'\x5', '\x240', '\x121', '\x2', '\x7FA', '\x7FB', '\a', '\x152', '\x2', 
		'\x2', '\x7FB', '\x7FC', '\x5', '\x17E', '\xC0', '\x2', '\x7FC', '\x7FD', 
		'\a', '\x153', '\x2', '\x2', '\x7FD', '\x7FF', '\x3', '\x2', '\x2', '\x2', 
		'\x7FE', '\x7FA', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x7FF', '\x3', 
		'\x2', '\x2', '\x2', '\x7FF', '\x801', '\x3', '\x2', '\x2', '\x2', '\x800', 
		'\x802', '\x5', '\x11C', '\x8F', '\x2', '\x801', '\x800', '\x3', '\x2', 
		'\x2', '\x2', '\x801', '\x802', '\x3', '\x2', '\x2', '\x2', '\x802', '\x804', 
		'\x3', '\x2', '\x2', '\x2', '\x803', '\x805', '\x5', '\x112', '\x8A', 
		'\x2', '\x804', '\x803', '\x3', '\x2', '\x2', '\x2', '\x804', '\x805', 
		'\x3', '\x2', '\x2', '\x2', '\x805', '\x807', '\x3', '\x2', '\x2', '\x2', 
		'\x806', '\x808', '\x5', '\x130', '\x99', '\x2', '\x807', '\x806', '\x3', 
		'\x2', '\x2', '\x2', '\x807', '\x808', '\x3', '\x2', '\x2', '\x2', '\x808', 
		'\x809', '\x3', '\x2', '\x2', '\x2', '\x809', '\x80A', '\a', '\x18', '\x2', 
		'\x2', '\x80A', '\x80B', '\x5', '\x1C6', '\xE4', '\x2', '\x80B', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x80C', '\x80D', '\a', '\x43', '\x2', '\x2', 
		'\x80D', '\x80E', '\a', '\xB9', '\x2', '\x2', '\x80E', '\x810', '\a', 
		'\xB4', '\x2', '\x2', '\x80F', '\x811', '\x5', ',', '\x17', '\x2', '\x810', 
		'\x80F', '\x3', '\x2', '\x2', '\x2', '\x810', '\x811', '\x3', '\x2', '\x2', 
		'\x2', '\x811', '\x812', '\x3', '\x2', '\x2', '\x2', '\x812', '\x814', 
		'\x5', '\x240', '\x121', '\x2', '\x813', '\x815', '\x5', '\x30', '\x19', 
		'\x2', '\x814', '\x813', '\x3', '\x2', '\x2', '\x2', '\x814', '\x815', 
		'\x3', '\x2', '\x2', '\x2', '\x815', '\x817', '\x3', '\x2', '\x2', '\x2', 
		'\x816', '\x818', '\x5', '\x11C', '\x8F', '\x2', '\x817', '\x816', '\x3', 
		'\x2', '\x2', '\x2', '\x817', '\x818', '\x3', '\x2', '\x2', '\x2', '\x818', 
		'\x81A', '\x3', '\x2', '\x2', '\x2', '\x819', '\x81B', '\x5', '\x12E', 
		'\x98', '\x2', '\x81A', '\x819', '\x3', '\x2', '\x2', '\x2', '\x81A', 
		'\x81B', '\x3', '\x2', '\x2', '\x2', '\x81B', '\x81D', '\x3', '\x2', '\x2', 
		'\x2', '\x81C', '\x81E', '\x5', '\x144', '\xA3', '\x2', '\x81D', '\x81C', 
		'\x3', '\x2', '\x2', '\x2', '\x81D', '\x81E', '\x3', '\x2', '\x2', '\x2', 
		'\x81E', '\x820', '\x3', '\x2', '\x2', '\x2', '\x81F', '\x821', '\x5', 
		'\x146', '\xA4', '\x2', '\x820', '\x81F', '\x3', '\x2', '\x2', '\x2', 
		'\x820', '\x821', '\x3', '\x2', '\x2', '\x2', '\x821', '\x823', '\x3', 
		'\x2', '\x2', '\x2', '\x822', '\x824', '\x5', '\x130', '\x99', '\x2', 
		'\x823', '\x822', '\x3', '\x2', '\x2', '\x2', '\x823', '\x824', '\x3', 
		'\x2', '\x2', '\x2', '\x824', '\x825', '\x3', '\x2', '\x2', '\x2', '\x825', 
		'\x826', '\a', '\x18', '\x2', '\x2', '\x826', '\x827', '\x5', '\x1C6', 
		'\xE4', '\x2', '\x827', '\x111', '\x3', '\x2', '\x2', '\x2', '\x828', 
		'\x829', '\a', 'g', '\x2', '\x2', '\x829', '\x82A', '\a', '$', '\x2', 
		'\x2', '\x82A', '\x82B', '\a', '\x152', '\x2', '\x2', '\x82B', '\x82C', 
		'\x5', '\x14E', '\xA8', '\x2', '\x82C', '\x82D', '\a', '\x153', '\x2', 
		'\x2', '\x82D', '\x113', '\x3', '\x2', '\x2', '\x2', '\x82E', '\x82F', 
		'\a', 'K', '\x2', '\x2', '\x82F', '\x831', '\a', '\xB4', '\x2', '\x2', 
		'\x830', '\x832', '\x5', '(', '\x15', '\x2', '\x831', '\x830', '\x3', 
		'\x2', '\x2', '\x2', '\x831', '\x832', '\x3', '\x2', '\x2', '\x2', '\x832', 
		'\x833', '\x3', '\x2', '\x2', '\x2', '\x833', '\x834', '\x5', '\x242', 
		'\x122', '\x2', '\x834', '\x115', '\x3', '\x2', '\x2', '\x2', '\x835', 
		'\x836', '\a', 'K', '\x2', '\x2', '\x836', '\x837', '\a', '\xB9', '\x2', 
		'\x2', '\x837', '\x839', '\a', '\xB4', '\x2', '\x2', '\x838', '\x83A', 
		'\x5', '(', '\x15', '\x2', '\x839', '\x838', '\x3', '\x2', '\x2', '\x2', 
		'\x839', '\x83A', '\x3', '\x2', '\x2', '\x2', '\x83A', '\x83B', '\x3', 
		'\x2', '\x2', '\x2', '\x83B', '\x83C', '\x5', '\x242', '\x122', '\x2', 
		'\x83C', '\x117', '\x3', '\x2', '\x2', '\x2', '\x83D', '\x840', '\x5', 
		'\x2EA', '\x176', '\x2', '\x83E', '\x840', '\a', '\x16C', '\x2', '\x2', 
		'\x83F', '\x83D', '\x3', '\x2', '\x2', '\x2', '\x83F', '\x83E', '\x3', 
		'\x2', '\x2', '\x2', '\x840', '\x119', '\x3', '\x2', '\x2', '\x2', '\x841', 
		'\x844', '\x5', '\x2E8', '\x175', '\x2', '\x842', '\x844', '\a', '\x16C', 
		'\x2', '\x2', '\x843', '\x841', '\x3', '\x2', '\x2', '\x2', '\x843', '\x842', 
		'\x3', '\x2', '\x2', '\x2', '\x844', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x845', '\x846', '\a', 'N', '\x2', '\x2', '\x846', '\x847', '\a', '\x16C', 
		'\x2', '\x2', '\x847', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x848', '\x849', 
		'\a', 'g', '\x2', '\x2', '\x849', '\x84A', '\a', '\x14', '\x2', '\x2', 
		'\x84A', '\x84B', '\a', '\x152', '\x2', '\x2', '\x84B', '\x850', '\x5', 
		'\x18A', '\xC6', '\x2', '\x84C', '\x84D', '\a', '\x150', '\x2', '\x2', 
		'\x84D', '\x84F', '\x5', '\x18A', '\xC6', '\x2', '\x84E', '\x84C', '\x3', 
		'\x2', '\x2', '\x2', '\x84F', '\x852', '\x3', '\x2', '\x2', '\x2', '\x850', 
		'\x84E', '\x3', '\x2', '\x2', '\x2', '\x850', '\x851', '\x3', '\x2', '\x2', 
		'\x2', '\x851', '\x853', '\x3', '\x2', '\x2', '\x2', '\x852', '\x850', 
		'\x3', '\x2', '\x2', '\x2', '\x853', '\x854', '\a', '\x153', '\x2', '\x2', 
		'\x854', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x855', '\x856', '\a', 
		'h', '\x2', '\x2', '\x856', '\x857', '\a', '\x14', '\x2', '\x2', '\x857', 
		'\x858', '\a', '\x152', '\x2', '\x2', '\x858', '\x859', '\x5', '\x14E', 
		'\xA8', '\x2', '\x859', '\x860', '\a', '\x153', '\x2', '\x2', '\x85A', 
		'\x85B', '\a', 'i', '\x2', '\x2', '\x85B', '\x85C', '\a', '\x14', '\x2', 
		'\x2', '\x85C', '\x85D', '\a', '\x152', '\x2', '\x2', '\x85D', '\x85E', 
		'\x5', '\x154', '\xAB', '\x2', '\x85E', '\x85F', '\a', '\x153', '\x2', 
		'\x2', '\x85F', '\x861', '\x3', '\x2', '\x2', '\x2', '\x860', '\x85A', 
		'\x3', '\x2', '\x2', '\x2', '\x860', '\x861', '\x3', '\x2', '\x2', '\x2', 
		'\x861', '\x862', '\x3', '\x2', '\x2', '\x2', '\x862', '\x863', '\a', 
		'j', '\x2', '\x2', '\x863', '\x864', '\a', '\x171', '\x2', '\x2', '\x864', 
		'\x865', '\a', 'k', '\x2', '\x2', '\x865', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x866', '\x867', '\a', '\xE5', '\x2', '\x2', '\x867', '\x868', 
		'\a', '\x14', '\x2', '\x2', '\x868', '\x869', '\a', '\x152', '\x2', '\x2', 
		'\x869', '\x86A', '\x5', '\x14E', '\xA8', '\x2', '\x86A', '\x86B', '\a', 
		'\x153', '\x2', '\x2', '\x86B', '\x86C', '\a', '$', '\x2', '\x2', '\x86C', 
		'\x86D', '\a', '\x152', '\x2', '\x2', '\x86D', '\x86E', '\x5', '\x16C', 
		'\xB7', '\x2', '\x86E', '\x870', '\a', '\x153', '\x2', '\x2', '\x86F', 
		'\x871', '\x5', '\x32', '\x1A', '\x2', '\x870', '\x86F', '\x3', '\x2', 
		'\x2', '\x2', '\x870', '\x871', '\x3', '\x2', '\x2', '\x2', '\x871', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x872', '\x875', '\x5', '\x12A', '\x96', 
		'\x2', '\x873', '\x875', '\x5', '\x12C', '\x97', '\x2', '\x874', '\x872', 
		'\x3', '\x2', '\x2', '\x2', '\x874', '\x873', '\x3', '\x2', '\x2', '\x2', 
		'\x875', '\x125', '\x3', '\x2', '\x2', '\x2', '\x876', '\x877', '\a', 
		'\xD5', '\x2', '\x2', '\x877', '\x878', '\a', '\x16C', '\x2', '\x2', '\x878', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x879', '\x87A', '\a', '\xD6', '\x2', 
		'\x2', '\x87A', '\x87B', '\a', '\x16C', '\x2', '\x2', '\x87B', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x87C', '\x87D', '\a', 'l', '\x2', '\x2', 
		'\x87D', '\x87E', '\a', 'n', '\x2', '\x2', '\x87E', '\x87F', '\a', '\x96', 
		'\x2', '\x2', '\x87F', '\x883', '\a', '\x16C', '\x2', '\x2', '\x880', 
		'\x881', '\a', '\x97', '\x2', '\x2', '\x881', '\x882', '\a', '\x99', '\x2', 
		'\x2', '\x882', '\x884', '\x5', '\x132', '\x9A', '\x2', '\x883', '\x880', 
		'\x3', '\x2', '\x2', '\x2', '\x883', '\x884', '\x3', '\x2', '\x2', '\x2', 
		'\x884', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x885', '\x886', '\a', 
		'l', '\x2', '\x2', '\x886', '\x887', '\a', 'n', '\x2', '\x2', '\x887', 
		'\x889', '\a', 'o', '\x2', '\x2', '\x888', '\x88A', '\x5', '\x13A', '\x9E', 
		'\x2', '\x889', '\x888', '\x3', '\x2', '\x2', '\x2', '\x889', '\x88A', 
		'\x3', '\x2', '\x2', '\x2', '\x88A', '\x88C', '\x3', '\x2', '\x2', '\x2', 
		'\x88B', '\x88D', '\x5', '\x13C', '\x9F', '\x2', '\x88C', '\x88B', '\x3', 
		'\x2', '\x2', '\x2', '\x88C', '\x88D', '\x3', '\x2', '\x2', '\x2', '\x88D', 
		'\x88F', '\x3', '\x2', '\x2', '\x2', '\x88E', '\x890', '\x5', '\x13E', 
		'\xA0', '\x2', '\x88F', '\x88E', '\x3', '\x2', '\x2', '\x2', '\x88F', 
		'\x890', '\x3', '\x2', '\x2', '\x2', '\x890', '\x892', '\x3', '\x2', '\x2', 
		'\x2', '\x891', '\x893', '\x5', '\x140', '\xA1', '\x2', '\x892', '\x891', 
		'\x3', '\x2', '\x2', '\x2', '\x892', '\x893', '\x3', '\x2', '\x2', '\x2', 
		'\x893', '\x895', '\x3', '\x2', '\x2', '\x2', '\x894', '\x896', '\x5', 
		'\x142', '\xA2', '\x2', '\x895', '\x894', '\x3', '\x2', '\x2', '\x2', 
		'\x895', '\x896', '\x3', '\x2', '\x2', '\x2', '\x896', '\x12D', '\x3', 
		'\x2', '\x2', '\x2', '\x897', '\x89A', '\x5', '\x12C', '\x97', '\x2', 
		'\x898', '\x89A', '\x5', '\x12A', '\x96', '\x2', '\x899', '\x897', '\x3', 
		'\x2', '\x2', '\x2', '\x899', '\x898', '\x3', '\x2', '\x2', '\x2', '\x89A', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x89B', '\x89C', '\a', '\x9F', '\x2', 
		'\x2', '\x89C', '\x89D', '\x5', '\x132', '\x9A', '\x2', '\x89D', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x89E', '\x89F', '\a', '\x152', '\x2', '\x2', 
		'\x89F', '\x8A0', '\x5', '\x134', '\x9B', '\x2', '\x8A0', '\x8A1', '\a', 
		'\x153', '\x2', '\x2', '\x8A1', '\x133', '\x3', '\x2', '\x2', '\x2', '\x8A2', 
		'\x8A7', '\x5', '\x136', '\x9C', '\x2', '\x8A3', '\x8A4', '\a', '\x150', 
		'\x2', '\x2', '\x8A4', '\x8A6', '\x5', '\x136', '\x9C', '\x2', '\x8A5', 
		'\x8A3', '\x3', '\x2', '\x2', '\x2', '\x8A6', '\x8A9', '\x3', '\x2', '\x2', 
		'\x2', '\x8A7', '\x8A5', '\x3', '\x2', '\x2', '\x2', '\x8A7', '\x8A8', 
		'\x3', '\x2', '\x2', '\x2', '\x8A8', '\x8B3', '\x3', '\x2', '\x2', '\x2', 
		'\x8A9', '\x8A7', '\x3', '\x2', '\x2', '\x2', '\x8AA', '\x8AF', '\x5', 
		'\x138', '\x9D', '\x2', '\x8AB', '\x8AC', '\a', '\x150', '\x2', '\x2', 
		'\x8AC', '\x8AE', '\x5', '\x138', '\x9D', '\x2', '\x8AD', '\x8AB', '\x3', 
		'\x2', '\x2', '\x2', '\x8AE', '\x8B1', '\x3', '\x2', '\x2', '\x2', '\x8AF', 
		'\x8AD', '\x3', '\x2', '\x2', '\x2', '\x8AF', '\x8B0', '\x3', '\x2', '\x2', 
		'\x2', '\x8B0', '\x8B3', '\x3', '\x2', '\x2', '\x2', '\x8B1', '\x8AF', 
		'\x3', '\x2', '\x2', '\x2', '\x8B2', '\x8A2', '\x3', '\x2', '\x2', '\x2', 
		'\x8B2', '\x8AA', '\x3', '\x2', '\x2', '\x2', '\x8B3', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x8B4', '\x8B5', '\a', '\x16C', '\x2', '\x2', '\x8B5', 
		'\x8B6', '\a', '\x158', '\x2', '\x2', '\x8B6', '\x8B7', '\a', '\x16C', 
		'\x2', '\x2', '\x8B7', '\x137', '\x3', '\x2', '\x2', '\x2', '\x8B8', '\x8B9', 
		'\a', '\x16C', '\x2', '\x2', '\x8B9', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x8BA', '\x8BB', '\a', 'p', '\x2', '\x2', '\x8BB', '\x8BC', '\a', 'q', 
		'\x2', '\x2', '\x8BC', '\x8BD', '\a', '\x14', '\x2', '\x2', '\x8BD', '\x8C1', 
		'\a', '\x16C', '\x2', '\x2', '\x8BE', '\x8BF', '\a', 'r', '\x2', '\x2', 
		'\x8BF', '\x8C0', '\a', '\x14', '\x2', '\x2', '\x8C0', '\x8C2', '\a', 
		'\x16C', '\x2', '\x2', '\x8C1', '\x8BE', '\x3', '\x2', '\x2', '\x2', '\x8C1', 
		'\x8C2', '\x3', '\x2', '\x2', '\x2', '\x8C2', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\x8C3', '\x8C4', '\a', 's', '\x2', '\x2', '\x8C4', '\x8C5', '\a', 
		't', '\x2', '\x2', '\x8C5', '\x8C6', '\a', 'q', '\x2', '\x2', '\x8C6', 
		'\x8C7', '\a', '\x14', '\x2', '\x2', '\x8C7', '\x8C8', '\a', '\x16C', 
		'\x2', '\x2', '\x8C8', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x8C9', '\x8CA', 
		'\a', '\x64', '\x2', '\x2', '\x8CA', '\x8CB', '\a', 'u', '\x2', '\x2', 
		'\x8CB', '\x8CC', '\a', 'q', '\x2', '\x2', '\x8CC', '\x8CD', '\a', '\x14', 
		'\x2', '\x2', '\x8CD', '\x8CE', '\a', '\x16C', '\x2', '\x2', '\x8CE', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8D0', '\a', 'x', '\x2', 
		'\x2', '\x8D0', '\x8D1', '\a', 'q', '\x2', '\x2', '\x8D1', '\x8D2', '\a', 
		'\x14', '\x2', '\x2', '\x8D2', '\x8D3', '\a', '\x16C', '\x2', '\x2', '\x8D3', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x8D4', '\x8D5', '\a', '\x42', '\x2', 
		'\x2', '\x8D5', '\x8D6', '\a', '\xA3', '\x2', '\x2', '\x8D6', '\x8D7', 
		'\a', '\x18', '\x2', '\x2', '\x8D7', '\x8D8', '\a', '\x16C', '\x2', '\x2', 
		'\x8D8', '\x143', '\x3', '\x2', '\x2', '\x2', '\x8D9', '\x8DA', '\a', 
		'y', '\x2', '\x2', '\x8DA', '\x8DB', '\a', '\x18', '\x2', '\x2', '\x8DB', 
		'\x8DC', '\a', '{', '\x2', '\x2', '\x8DC', '\x8DD', '\a', '\x16C', '\x2', 
		'\x2', '\x8DD', '\x8DE', '\a', '|', '\x2', '\x2', '\x8DE', '\x8E3', '\a', 
		'\x16C', '\x2', '\x2', '\x8DF', '\x8E0', '\a', '}', '\x2', '\x2', '\x8E0', 
		'\x8E1', '\a', '\x16C', '\x2', '\x2', '\x8E1', '\x8E2', '\a', '~', '\x2', 
		'\x2', '\x8E2', '\x8E4', '\a', '\x16C', '\x2', '\x2', '\x8E3', '\x8DF', 
		'\x3', '\x2', '\x2', '\x2', '\x8E3', '\x8E4', '\x3', '\x2', '\x2', '\x2', 
		'\x8E4', '\x8F1', '\x3', '\x2', '\x2', '\x2', '\x8E5', '\x8E6', '\a', 
		'y', '\x2', '\x2', '\x8E6', '\x8E7', '\a', '\x14', '\x2', '\x2', '\x8E7', 
		'\x8EB', '\a', '\x16C', '\x2', '\x2', '\x8E8', '\x8E9', '\a', '\x97', 
		'\x2', '\x2', '\x8E9', '\x8EA', '\a', '\x99', '\x2', '\x2', '\x8EA', '\x8EC', 
		'\x5', '\x132', '\x9A', '\x2', '\x8EB', '\x8E8', '\x3', '\x2', '\x2', 
		'\x2', '\x8EB', '\x8EC', '\x3', '\x2', '\x2', '\x2', '\x8EC', '\x8F1', 
		'\x3', '\x2', '\x2', '\x2', '\x8ED', '\x8EE', '\a', 'y', '\x2', '\x2', 
		'\x8EE', '\x8EF', '\a', '\x18', '\x2', '\x2', '\x8EF', '\x8F1', '\x5', 
		'\x2E8', '\x175', '\x2', '\x8F0', '\x8D9', '\x3', '\x2', '\x2', '\x2', 
		'\x8F0', '\x8E5', '\x3', '\x2', '\x2', '\x2', '\x8F0', '\x8ED', '\x3', 
		'\x2', '\x2', '\x2', '\x8F1', '\x145', '\x3', '\x2', '\x2', '\x2', '\x8F2', 
		'\x8F3', '\a', '\x81', '\x2', '\x2', '\x8F3', '\x8F4', '\a', '\x16C', 
		'\x2', '\x2', '\x8F4', '\x147', '\x3', '\x2', '\x2', '\x2', '\x8F5', '\x8FA', 
		'\x5', '\x184', '\xC3', '\x2', '\x8F6', '\x8F7', '\a', '\x150', '\x2', 
		'\x2', '\x8F7', '\x8F9', '\x5', '\x184', '\xC3', '\x2', '\x8F8', '\x8F6', 
		'\x3', '\x2', '\x2', '\x2', '\x8F9', '\x8FC', '\x3', '\x2', '\x2', '\x2', 
		'\x8FA', '\x8F8', '\x3', '\x2', '\x2', '\x2', '\x8FA', '\x8FB', '\x3', 
		'\x2', '\x2', '\x2', '\x8FB', '\x149', '\x3', '\x2', '\x2', '\x2', '\x8FC', 
		'\x8FA', '\x3', '\x2', '\x2', '\x2', '\x8FD', '\x902', '\x5', '\x186', 
		'\xC4', '\x2', '\x8FE', '\x8FF', '\a', '\x150', '\x2', '\x2', '\x8FF', 
		'\x901', '\x5', '\x186', '\xC4', '\x2', '\x900', '\x8FE', '\x3', '\x2', 
		'\x2', '\x2', '\x901', '\x904', '\x3', '\x2', '\x2', '\x2', '\x902', '\x900', 
		'\x3', '\x2', '\x2', '\x2', '\x902', '\x903', '\x3', '\x2', '\x2', '\x2', 
		'\x903', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x904', '\x902', '\x3', 
		'\x2', '\x2', '\x2', '\x905', '\x90A', '\x5', '\x19E', '\xD0', '\x2', 
		'\x906', '\x907', '\a', '\x150', '\x2', '\x2', '\x907', '\x909', '\x5', 
		'\x19E', '\xD0', '\x2', '\x908', '\x906', '\x3', '\x2', '\x2', '\x2', 
		'\x909', '\x90C', '\x3', '\x2', '\x2', '\x2', '\x90A', '\x908', '\x3', 
		'\x2', '\x2', '\x2', '\x90A', '\x90B', '\x3', '\x2', '\x2', '\x2', '\x90B', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x90C', '\x90A', '\x3', '\x2', '\x2', 
		'\x2', '\x90D', '\x912', '\x5', '\x150', '\xA9', '\x2', '\x90E', '\x90F', 
		'\a', '\x150', '\x2', '\x2', '\x90F', '\x911', '\x5', '\x150', '\xA9', 
		'\x2', '\x910', '\x90E', '\x3', '\x2', '\x2', '\x2', '\x911', '\x914', 
		'\x3', '\x2', '\x2', '\x2', '\x912', '\x910', '\x3', '\x2', '\x2', '\x2', 
		'\x912', '\x913', '\x3', '\x2', '\x2', '\x2', '\x913', '\x14F', '\x3', 
		'\x2', '\x2', '\x2', '\x914', '\x912', '\x3', '\x2', '\x2', '\x2', '\x915', 
		'\x916', '\x5', '\x2E8', '\x175', '\x2', '\x916', '\x151', '\x3', '\x2', 
		'\x2', '\x2', '\x917', '\x921', '\x5', '\x2E8', '\x175', '\x2', '\x918', 
		'\x91D', '\a', '\x14E', '\x2', '\x2', '\x919', '\x91E', '\a', '\xA2', 
		'\x2', '\x2', '\x91A', '\x91E', '\a', 'v', '\x2', '\x2', '\x91B', '\x91E', 
		'\a', '\xA1', '\x2', '\x2', '\x91C', '\x91E', '\x5', '\x2E8', '\x175', 
		'\x2', '\x91D', '\x919', '\x3', '\x2', '\x2', '\x2', '\x91D', '\x91A', 
		'\x3', '\x2', '\x2', '\x2', '\x91D', '\x91B', '\x3', '\x2', '\x2', '\x2', 
		'\x91D', '\x91C', '\x3', '\x2', '\x2', '\x2', '\x91E', '\x920', '\x3', 
		'\x2', '\x2', '\x2', '\x91F', '\x918', '\x3', '\x2', '\x2', '\x2', '\x920', 
		'\x923', '\x3', '\x2', '\x2', '\x2', '\x921', '\x91F', '\x3', '\x2', '\x2', 
		'\x2', '\x921', '\x922', '\x3', '\x2', '\x2', '\x2', '\x922', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x923', '\x921', '\x3', '\x2', '\x2', '\x2', 
		'\x924', '\x929', '\x5', '\x17C', '\xBF', '\x2', '\x925', '\x926', '\a', 
		'\x150', '\x2', '\x2', '\x926', '\x928', '\x5', '\x17C', '\xBF', '\x2', 
		'\x927', '\x925', '\x3', '\x2', '\x2', '\x2', '\x928', '\x92B', '\x3', 
		'\x2', '\x2', '\x2', '\x929', '\x927', '\x3', '\x2', '\x2', '\x2', '\x929', 
		'\x92A', '\x3', '\x2', '\x2', '\x2', '\x92A', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x92B', '\x929', '\x3', '\x2', '\x2', '\x2', '\x92C', '\x92D', 
		'\a', '\x152', '\x2', '\x2', '\x92D', '\x92E', '\x5', '\x14E', '\xA8', 
		'\x2', '\x92E', '\x92F', '\a', '\x153', '\x2', '\x2', '\x92F', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x930', '\x932', '\x5', '\x15A', '\xAE', 
		'\x2', '\x931', '\x933', '\x5', '\x15C', '\xAF', '\x2', '\x932', '\x931', 
		'\x3', '\x2', '\x2', '\x2', '\x932', '\x933', '\x3', '\x2', '\x2', '\x2', 
		'\x933', '\x936', '\x3', '\x2', '\x2', '\x2', '\x934', '\x936', '\x5', 
		'\x15E', '\xB0', '\x2', '\x935', '\x930', '\x3', '\x2', '\x2', '\x2', 
		'\x935', '\x934', '\x3', '\x2', '\x2', '\x2', '\x936', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x937', '\x938', '\t', '\xE', '\x2', '\x2', '\x938', 
		'\x15B', '\x3', '\x2', '\x2', '\x2', '\x939', '\x93A', '\t', '\xF', '\x2', 
		'\x2', '\x93A', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x93B', '\x93F', 
		'\a', '\x125', '\x2', '\x2', '\x93C', '\x93D', '\a', '\t', '\x2', '\x2', 
		'\x93D', '\x93F', '\a', '\x125', '\x2', '\x2', '\x93E', '\x93B', '\x3', 
		'\x2', '\x2', '\x2', '\x93E', '\x93C', '\x3', '\x2', '\x2', '\x2', '\x93F', 
		'\x15F', '\x3', '\x2', '\x2', '\x2', '\x940', '\x945', '\a', '\x128', 
		'\x2', '\x2', '\x941', '\x943', '\a', '\x129', '\x2', '\x2', '\x942', 
		'\x941', '\x3', '\x2', '\x2', '\x2', '\x942', '\x943', '\x3', '\x2', '\x2', 
		'\x2', '\x943', '\x945', '\x3', '\x2', '\x2', '\x2', '\x944', '\x940', 
		'\x3', '\x2', '\x2', '\x2', '\x944', '\x942', '\x3', '\x2', '\x2', '\x2', 
		'\x945', '\x161', '\x3', '\x2', '\x2', '\x2', '\x946', '\x947', '\a', 
		'\x124', '\x2', '\x2', '\x947', '\x949', '\x5', '\x2E8', '\x175', '\x2', 
		'\x948', '\x946', '\x3', '\x2', '\x2', '\x2', '\x948', '\x949', '\x3', 
		'\x2', '\x2', '\x2', '\x949', '\x94A', '\x3', '\x2', '\x2', '\x2', '\x94A', 
		'\x94C', '\x5', '\x166', '\xB4', '\x2', '\x94B', '\x94D', '\x5', '\x19A', 
		'\xCE', '\x2', '\x94C', '\x94B', '\x3', '\x2', '\x2', '\x2', '\x94C', 
		'\x94D', '\x3', '\x2', '\x2', '\x2', '\x94D', '\x163', '\x3', '\x2', '\x2', 
		'\x2', '\x94E', '\x94F', '\a', '\x124', '\x2', '\x2', '\x94F', '\x950', 
		'\x5', '\x2E8', '\x175', '\x2', '\x950', '\x952', '\x5', '\x166', '\xB4', 
		'\x2', '\x951', '\x953', '\x5', '\x19C', '\xCF', '\x2', '\x952', '\x951', 
		'\x3', '\x2', '\x2', '\x2', '\x952', '\x953', '\x3', '\x2', '\x2', '\x2', 
		'\x953', '\x165', '\x3', '\x2', '\x2', '\x2', '\x954', '\x955', '\x5', 
		'\x198', '\xCD', '\x2', '\x955', '\x956', '\x5', '\x156', '\xAC', '\x2', 
		'\x956', '\x167', '\x3', '\x2', '\x2', '\x2', '\x957', '\x958', '\a', 
		'\x124', '\x2', '\x2', '\x958', '\x95A', '\x5', '\x2E8', '\x175', '\x2', 
		'\x959', '\x957', '\x3', '\x2', '\x2', '\x2', '\x959', '\x95A', '\x3', 
		'\x2', '\x2', '\x2', '\x95A', '\x95B', '\x3', '\x2', '\x2', '\x2', '\x95B', 
		'\x95C', '\a', '\x122', '\x2', '\x2', '\x95C', '\x95D', '\a', '\x12B', 
		'\x2', '\x2', '\x95D', '\x95E', '\x5', '\x156', '\xAC', '\x2', '\x95E', 
		'\x95F', '\a', '\x123', '\x2', '\x2', '\x95F', '\x960', '\x5', '\x240', 
		'\x121', '\x2', '\x960', '\x962', '\x5', '\x156', '\xAC', '\x2', '\x961', 
		'\x963', '\x5', '\x19A', '\xCE', '\x2', '\x962', '\x961', '\x3', '\x2', 
		'\x2', '\x2', '\x962', '\x963', '\x3', '\x2', '\x2', '\x2', '\x963', '\x169', 
		'\x3', '\x2', '\x2', '\x2', '\x964', '\x965', '\a', '\x124', '\x2', '\x2', 
		'\x965', '\x966', '\x5', '\x2E8', '\x175', '\x2', '\x966', '\x967', '\a', 
		'\x122', '\x2', '\x2', '\x967', '\x968', '\a', '\x12B', '\x2', '\x2', 
		'\x968', '\x969', '\x5', '\x156', '\xAC', '\x2', '\x969', '\x96A', '\a', 
		'\x123', '\x2', '\x2', '\x96A', '\x96B', '\x5', '\x240', '\x121', '\x2', 
		'\x96B', '\x96D', '\x5', '\x156', '\xAC', '\x2', '\x96C', '\x96E', '\x5', 
		'\x19C', '\xCF', '\x2', '\x96D', '\x96C', '\x3', '\x2', '\x2', '\x2', 
		'\x96D', '\x96E', '\x3', '\x2', '\x2', '\x2', '\x96E', '\x16B', '\x3', 
		'\x2', '\x2', '\x2', '\x96F', '\x972', '\x5', '\x172', '\xBA', '\x2', 
		'\x970', '\x972', '\x5', '\x16E', '\xB8', '\x2', '\x971', '\x96F', '\x3', 
		'\x2', '\x2', '\x2', '\x971', '\x970', '\x3', '\x2', '\x2', '\x2', '\x972', 
		'\x16D', '\x3', '\x2', '\x2', '\x2', '\x973', '\x978', '\x5', '\x170', 
		'\xB9', '\x2', '\x974', '\x975', '\a', '\x150', '\x2', '\x2', '\x975', 
		'\x977', '\x5', '\x170', '\xB9', '\x2', '\x976', '\x974', '\x3', '\x2', 
		'\x2', '\x2', '\x977', '\x97A', '\x3', '\x2', '\x2', '\x2', '\x978', '\x976', 
		'\x3', '\x2', '\x2', '\x2', '\x978', '\x979', '\x3', '\x2', '\x2', '\x2', 
		'\x979', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x97A', '\x978', '\x3', 
		'\x2', '\x2', '\x2', '\x97B', '\x97C', '\a', '\x152', '\x2', '\x2', '\x97C', 
		'\x97D', '\x5', '\x172', '\xBA', '\x2', '\x97D', '\x97E', '\a', '\x153', 
		'\x2', '\x2', '\x97E', '\x171', '\x3', '\x2', '\x2', '\x2', '\x97F', '\x984', 
		'\x5', '\x174', '\xBB', '\x2', '\x980', '\x981', '\a', '\x150', '\x2', 
		'\x2', '\x981', '\x983', '\x5', '\x174', '\xBB', '\x2', '\x982', '\x980', 
		'\x3', '\x2', '\x2', '\x2', '\x983', '\x986', '\x3', '\x2', '\x2', '\x2', 
		'\x984', '\x982', '\x3', '\x2', '\x2', '\x2', '\x984', '\x985', '\x3', 
		'\x2', '\x2', '\x2', '\x985', '\x173', '\x3', '\x2', '\x2', '\x2', '\x986', 
		'\x984', '\x3', '\x2', '\x2', '\x2', '\x987', '\x988', '\x5', '\x294', 
		'\x14B', '\x2', '\x988', '\x175', '\x3', '\x2', '\x2', '\x2', '\x989', 
		'\x98C', '\x5', '\x174', '\xBB', '\x2', '\x98A', '\x98C', '\x5', '\x170', 
		'\xB9', '\x2', '\x98B', '\x989', '\x3', '\x2', '\x2', '\x2', '\x98B', 
		'\x98A', '\x3', '\x2', '\x2', '\x2', '\x98C', '\x177', '\x3', '\x2', '\x2', 
		'\x2', '\x98D', '\x98E', '\t', '\x10', '\x2', '\x2', '\x98E', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x98F', '\x990', '\a', '\x10', '\x2', '\x2', 
		'\x990', '\x994', '\a', 'H', '\x2', '\x2', '\x991', '\x992', '\a', '\x10', 
		'\x2', '\x2', '\x992', '\x994', '\a', '\x11', '\x2', '\x2', '\x993', '\x98F', 
		'\x3', '\x2', '\x2', '\x2', '\x993', '\x991', '\x3', '\x2', '\x2', '\x2', 
		'\x994', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x995', '\x997', '\x5', 
		'\x2E8', '\x175', '\x2', '\x996', '\x998', '\x5', '\x178', '\xBD', '\x2', 
		'\x997', '\x996', '\x3', '\x2', '\x2', '\x2', '\x997', '\x998', '\x3', 
		'\x2', '\x2', '\x2', '\x998', '\x99A', '\x3', '\x2', '\x2', '\x2', '\x999', 
		'\x99B', '\x5', '\x17A', '\xBE', '\x2', '\x99A', '\x999', '\x3', '\x2', 
		'\x2', '\x2', '\x99A', '\x99B', '\x3', '\x2', '\x2', '\x2', '\x99B', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x99C', '\x9A1', '\x5', '\x180', '\xC1', 
		'\x2', '\x99D', '\x99E', '\a', '\x150', '\x2', '\x2', '\x99E', '\x9A0', 
		'\x5', '\x180', '\xC1', '\x2', '\x99F', '\x99D', '\x3', '\x2', '\x2', 
		'\x2', '\x9A0', '\x9A3', '\x3', '\x2', '\x2', '\x2', '\x9A1', '\x99F', 
		'\x3', '\x2', '\x2', '\x2', '\x9A1', '\x9A2', '\x3', '\x2', '\x2', '\x2', 
		'\x9A2', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x9A3', '\x9A1', '\x3', 
		'\x2', '\x2', '\x2', '\x9A4', '\x9A7', '\x5', '\x2E8', '\x175', '\x2', 
		'\x9A5', '\x9A6', '\a', 'N', '\x2', '\x2', '\x9A6', '\x9A8', '\a', '\x16C', 
		'\x2', '\x2', '\x9A7', '\x9A5', '\x3', '\x2', '\x2', '\x2', '\x9A7', '\x9A8', 
		'\x3', '\x2', '\x2', '\x2', '\x9A8', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x9A9', '\x9AB', '\x5', '\x2C8', '\x165', '\x2', '\x9AA', '\x9AC', '\x5', 
		'\x178', '\xBD', '\x2', '\x9AB', '\x9AA', '\x3', '\x2', '\x2', '\x2', 
		'\x9AB', '\x9AC', '\x3', '\x2', '\x2', '\x2', '\x9AC', '\x9AE', '\x3', 
		'\x2', '\x2', '\x2', '\x9AD', '\x9AF', '\x5', '\x17A', '\xBE', '\x2', 
		'\x9AE', '\x9AD', '\x3', '\x2', '\x2', '\x2', '\x9AE', '\x9AF', '\x3', 
		'\x2', '\x2', '\x2', '\x9AF', '\x183', '\x3', '\x2', '\x2', '\x2', '\x9B0', 
		'\x9B1', '\x5', '\x2E8', '\x175', '\x2', '\x9B1', '\x9B4', '\x5', '\x1A0', 
		'\xD1', '\x2', '\x9B2', '\x9B3', '\a', 'N', '\x2', '\x2', '\x9B3', '\x9B5', 
		'\a', '\x16C', '\x2', '\x2', '\x9B4', '\x9B2', '\x3', '\x2', '\x2', '\x2', 
		'\x9B4', '\x9B5', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x185', '\x3', 
		'\x2', '\x2', '\x2', '\x9B6', '\x9B9', '\x5', '\x188', '\xC5', '\x2', 
		'\x9B7', '\x9B9', '\x5', '\x18A', '\xC6', '\x2', '\x9B8', '\x9B6', '\x3', 
		'\x2', '\x2', '\x2', '\x9B8', '\x9B7', '\x3', '\x2', '\x2', '\x2', '\x9B9', 
		'\x187', '\x3', '\x2', '\x2', '\x2', '\x9BA', '\x9BD', '\x5', '\x168', 
		'\xB5', '\x2', '\x9BB', '\x9BD', '\x5', '\x162', '\xB2', '\x2', '\x9BC', 
		'\x9BA', '\x3', '\x2', '\x2', '\x2', '\x9BC', '\x9BB', '\x3', '\x2', '\x2', 
		'\x2', '\x9BD', '\x189', '\x3', '\x2', '\x2', '\x2', '\x9BE', '\x9BF', 
		'\x5', '\x2E8', '\x175', '\x2', '\x9BF', '\x9C1', '\x5', '\x1A0', '\xD1', 
		'\x2', '\x9C0', '\x9C2', '\x5', '\x18C', '\xC7', '\x2', '\x9C1', '\x9C0', 
		'\x3', '\x2', '\x2', '\x2', '\x9C1', '\x9C2', '\x3', '\x2', '\x2', '\x2', 
		'\x9C2', '\x9C5', '\x3', '\x2', '\x2', '\x2', '\x9C3', '\x9C4', '\a', 
		'N', '\x2', '\x2', '\x9C4', '\x9C6', '\a', '\x16C', '\x2', '\x2', '\x9C5', 
		'\x9C3', '\x3', '\x2', '\x2', '\x2', '\x9C5', '\x9C6', '\x3', '\x2', '\x2', 
		'\x2', '\x9C6', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x9C7', '\x9CA', 
		'\x5', '\x18E', '\xC8', '\x2', '\x9C8', '\x9CA', '\x5', '\x190', '\xC9', 
		'\x2', '\x9C9', '\x9C7', '\x3', '\x2', '\x2', '\x2', '\x9C9', '\x9C8', 
		'\x3', '\x2', '\x2', '\x2', '\x9CA', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x9CB', '\x9CC', '\a', '\x124', '\x2', '\x2', '\x9CC', '\x9CE', '\x5', 
		'\x2E8', '\x175', '\x2', '\x9CD', '\x9CB', '\x3', '\x2', '\x2', '\x2', 
		'\x9CD', '\x9CE', '\x3', '\x2', '\x2', '\x2', '\x9CE', '\x9CF', '\x3', 
		'\x2', '\x2', '\x2', '\x9CF', '\x9D0', '\a', '\x123', '\x2', '\x2', '\x9D0', 
		'\x9D1', '\x5', '\x240', '\x121', '\x2', '\x9D1', '\x9D2', '\a', '\x152', 
		'\x2', '\x2', '\x9D2', '\x9D3', '\x5', '\x150', '\xA9', '\x2', '\x9D3', 
		'\x9D5', '\a', '\x153', '\x2', '\x2', '\x9D4', '\x9D6', '\x5', '\x19A', 
		'\xCE', '\x2', '\x9D5', '\x9D4', '\x3', '\x2', '\x2', '\x2', '\x9D5', 
		'\x9D6', '\x3', '\x2', '\x2', '\x2', '\x9D6', '\x18F', '\x3', '\x2', '\x2', 
		'\x2', '\x9D7', '\x9D8', '\a', '\x124', '\x2', '\x2', '\x9D8', '\x9DA', 
		'\x5', '\x2E8', '\x175', '\x2', '\x9D9', '\x9D7', '\x3', '\x2', '\x2', 
		'\x2', '\x9D9', '\x9DA', '\x3', '\x2', '\x2', '\x2', '\x9DA', '\x9DB', 
		'\x3', '\x2', '\x2', '\x2', '\x9DB', '\x9DD', '\x5', '\x198', '\xCD', 
		'\x2', '\x9DC', '\x9DE', '\x5', '\x19A', '\xCE', '\x2', '\x9DD', '\x9DC', 
		'\x3', '\x2', '\x2', '\x2', '\x9DD', '\x9DE', '\x3', '\x2', '\x2', '\x2', 
		'\x9DE', '\x191', '\x3', '\x2', '\x2', '\x2', '\x9DF', '\x9E2', '\x5', 
		'\x194', '\xCB', '\x2', '\x9E0', '\x9E2', '\x5', '\x196', '\xCC', '\x2', 
		'\x9E1', '\x9DF', '\x3', '\x2', '\x2', '\x2', '\x9E1', '\x9E0', '\x3', 
		'\x2', '\x2', '\x2', '\x9E2', '\x193', '\x3', '\x2', '\x2', '\x2', '\x9E3', 
		'\x9E4', '\a', '\x124', '\x2', '\x2', '\x9E4', '\x9E6', '\x5', '\x2E8', 
		'\x175', '\x2', '\x9E5', '\x9E3', '\x3', '\x2', '\x2', '\x2', '\x9E5', 
		'\x9E6', '\x3', '\x2', '\x2', '\x2', '\x9E6', '\x9E7', '\x3', '\x2', '\x2', 
		'\x2', '\x9E7', '\x9E8', '\a', '\x123', '\x2', '\x2', '\x9E8', '\x9E9', 
		'\x5', '\x240', '\x121', '\x2', '\x9E9', '\x9EA', '\a', '\x152', '\x2', 
		'\x2', '\x9EA', '\x9EB', '\x5', '\x150', '\xA9', '\x2', '\x9EB', '\x9ED', 
		'\a', '\x153', '\x2', '\x2', '\x9EC', '\x9EE', '\x5', '\x19C', '\xCF', 
		'\x2', '\x9ED', '\x9EC', '\x3', '\x2', '\x2', '\x2', '\x9ED', '\x9EE', 
		'\x3', '\x2', '\x2', '\x2', '\x9EE', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x9EF', '\x9F0', '\a', '\x124', '\x2', '\x2', '\x9F0', '\x9F2', '\x5', 
		'\x2E8', '\x175', '\x2', '\x9F1', '\x9EF', '\x3', '\x2', '\x2', '\x2', 
		'\x9F1', '\x9F2', '\x3', '\x2', '\x2', '\x2', '\x9F2', '\x9F3', '\x3', 
		'\x2', '\x2', '\x2', '\x9F3', '\x9F5', '\x5', '\x198', '\xCD', '\x2', 
		'\x9F4', '\x9F6', '\x5', '\x19C', '\xCF', '\x2', '\x9F5', '\x9F4', '\x3', 
		'\x2', '\x2', '\x2', '\x9F5', '\x9F6', '\x3', '\x2', '\x2', '\x2', '\x9F6', 
		'\x197', '\x3', '\x2', '\x2', '\x2', '\x9F7', '\x9F8', '\a', '\x121', 
		'\x2', '\x2', '\x9F8', '\x9F9', '\a', '\x12B', '\x2', '\x2', '\x9F9', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x9FA', '\x9FB', '\x5', '\x158', 
		'\xAD', '\x2', '\x9FB', '\x9FC', '\x5', '\x160', '\xB1', '\x2', '\x9FC', 
		'\x19B', '\x3', '\x2', '\x2', '\x2', '\x9FD', '\x9FE', '\x5', '\x158', 
		'\xAD', '\x2', '\x9FE', '\x9FF', '\x5', '\x160', '\xB1', '\x2', '\x9FF', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\xA00', '\xA01', '\x5', '\x2E8', 
		'\x175', '\x2', '\xA01', '\xA02', '\a', '\x14F', '\x2', '\x2', '\xA02', 
		'\xA05', '\x5', '\x1A0', '\xD1', '\x2', '\xA03', '\xA04', '\a', 'N', '\x2', 
		'\x2', '\xA04', '\xA06', '\a', '\x16C', '\x2', '\x2', '\xA05', '\xA03', 
		'\x3', '\x2', '\x2', '\x2', '\xA05', '\xA06', '\x3', '\x2', '\x2', '\x2', 
		'\xA06', '\x19F', '\x3', '\x2', '\x2', '\x2', '\xA07', '\xA08', '\x5', 
		'\x1A4', '\xD3', '\x2', '\xA08', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\xA09', '\xA0E', '\x5', '\x1A0', '\xD1', '\x2', '\xA0A', '\xA0B', '\a', 
		'\x150', '\x2', '\x2', '\xA0B', '\xA0D', '\x5', '\x1A0', '\xD1', '\x2', 
		'\xA0C', '\xA0A', '\x3', '\x2', '\x2', '\x2', '\xA0D', '\xA10', '\x3', 
		'\x2', '\x2', '\x2', '\xA0E', '\xA0C', '\x3', '\x2', '\x2', '\x2', '\xA0E', 
		'\xA0F', '\x3', '\x2', '\x2', '\x2', '\xA0F', '\x1A3', '\x3', '\x2', '\x2', 
		'\x2', '\xA10', '\xA0E', '\x3', '\x2', '\x2', '\x2', '\xA11', '\xA17', 
		'\x5', '\x1A6', '\xD4', '\x2', '\xA12', '\xA17', '\x5', '\x1A8', '\xD5', 
		'\x2', '\xA13', '\xA17', '\x5', '\x1AA', '\xD6', '\x2', '\xA14', '\xA17', 
		'\x5', '\x1AC', '\xD7', '\x2', '\xA15', '\xA17', '\x5', '\x1AE', '\xD8', 
		'\x2', '\xA16', '\xA11', '\x3', '\x2', '\x2', '\x2', '\xA16', '\xA12', 
		'\x3', '\x2', '\x2', '\x2', '\xA16', '\xA13', '\x3', '\x2', '\x2', '\x2', 
		'\xA16', '\xA14', '\x3', '\x2', '\x2', '\x2', '\xA16', '\xA15', '\x3', 
		'\x2', '\x2', '\x2', '\xA17', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\xA18', 
		'\xA40', '\a', 'P', '\x2', '\x2', '\xA19', '\xA40', '\a', 'Q', '\x2', 
		'\x2', '\xA1A', '\xA40', '\a', 'R', '\x2', '\x2', '\xA1B', '\xA40', '\a', 
		'S', '\x2', '\x2', '\xA1C', '\xA40', '\a', 'O', '\x2', '\x2', '\xA1D', 
		'\xA40', '\a', 'T', '\x2', '\x2', '\xA1E', '\xA20', '\a', 'U', '\x2', 
		'\x2', '\xA1F', '\xA21', '\a', 'V', '\x2', '\x2', '\xA20', '\xA1F', '\x3', 
		'\x2', '\x2', '\x2', '\xA20', '\xA21', '\x3', '\x2', '\x2', '\x2', '\xA21', 
		'\xA40', '\x3', '\x2', '\x2', '\x2', '\xA22', '\xA40', '\a', 'W', '\x2', 
		'\x2', '\xA23', '\xA40', '\a', 'X', '\x2', '\x2', '\xA24', '\xA40', '\a', 
		'Y', '\x2', '\x2', '\xA25', '\xA40', '\a', 'Z', '\x2', '\x2', '\xA26', 
		'\xA27', '\a', 'Y', '\x2', '\x2', '\xA27', '\xA28', '\a', '\x97', '\x2', 
		'\x2', '\xA28', '\xA29', '\a', '\x32', '\x2', '\x2', '\xA29', '\xA2A', 
		'\a', '[', '\x2', '\x2', '\xA2A', '\xA40', '\a', '\\', '\x2', '\x2', '\xA2B', 
		'\xA40', '\a', '_', '\x2', '\x2', '\xA2C', '\xA40', '\a', '\xD0', '\x2', 
		'\x2', '\xA2D', '\xA35', '\a', '^', '\x2', '\x2', '\xA2E', '\xA2F', '\a', 
		'\x152', '\x2', '\x2', '\xA2F', '\xA32', '\a', '\x171', '\x2', '\x2', 
		'\xA30', '\xA31', '\a', '\x150', '\x2', '\x2', '\xA31', '\xA33', '\a', 
		'\x171', '\x2', '\x2', '\xA32', '\xA30', '\x3', '\x2', '\x2', '\x2', '\xA32', 
		'\xA33', '\x3', '\x2', '\x2', '\x2', '\xA33', '\xA34', '\x3', '\x2', '\x2', 
		'\x2', '\xA34', '\xA36', '\a', '\x153', '\x2', '\x2', '\xA35', '\xA2E', 
		'\x3', '\x2', '\x2', '\x2', '\xA35', '\xA36', '\x3', '\x2', '\x2', '\x2', 
		'\xA36', '\xA40', '\x3', '\x2', '\x2', '\x2', '\xA37', '\xA38', '\a', 
		'\x61', '\x2', '\x2', '\xA38', '\xA39', '\a', '\x152', '\x2', '\x2', '\xA39', 
		'\xA3A', '\a', '\x171', '\x2', '\x2', '\xA3A', '\xA40', '\a', '\x153', 
		'\x2', '\x2', '\xA3B', '\xA3C', '\a', '`', '\x2', '\x2', '\xA3C', '\xA3D', 
		'\a', '\x152', '\x2', '\x2', '\xA3D', '\xA3E', '\a', '\x171', '\x2', '\x2', 
		'\xA3E', '\xA40', '\a', '\x153', '\x2', '\x2', '\xA3F', '\xA18', '\x3', 
		'\x2', '\x2', '\x2', '\xA3F', '\xA19', '\x3', '\x2', '\x2', '\x2', '\xA3F', 
		'\xA1A', '\x3', '\x2', '\x2', '\x2', '\xA3F', '\xA1B', '\x3', '\x2', '\x2', 
		'\x2', '\xA3F', '\xA1C', '\x3', '\x2', '\x2', '\x2', '\xA3F', '\xA1D', 
		'\x3', '\x2', '\x2', '\x2', '\xA3F', '\xA1E', '\x3', '\x2', '\x2', '\x2', 
		'\xA3F', '\xA22', '\x3', '\x2', '\x2', '\x2', '\xA3F', '\xA23', '\x3', 
		'\x2', '\x2', '\x2', '\xA3F', '\xA24', '\x3', '\x2', '\x2', '\x2', '\xA3F', 
		'\xA25', '\x3', '\x2', '\x2', '\x2', '\xA3F', '\xA26', '\x3', '\x2', '\x2', 
		'\x2', '\xA3F', '\xA2B', '\x3', '\x2', '\x2', '\x2', '\xA3F', '\xA2C', 
		'\x3', '\x2', '\x2', '\x2', '\xA3F', '\xA2D', '\x3', '\x2', '\x2', '\x2', 
		'\xA3F', '\xA37', '\x3', '\x2', '\x2', '\x2', '\xA3F', '\xA3B', '\x3', 
		'\x2', '\x2', '\x2', '\xA40', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\xA41', 
		'\xA42', '\a', '\x62', '\x2', '\x2', '\xA42', '\xA43', '\a', '\x15C', 
		'\x2', '\x2', '\xA43', '\xA44', '\x5', '\x1A4', '\xD3', '\x2', '\xA44', 
		'\xA45', '\a', '\x15E', '\x2', '\x2', '\xA45', '\x1A9', '\x3', '\x2', 
		'\x2', '\x2', '\xA46', '\xA47', '\a', '\x63', '\x2', '\x2', '\xA47', '\xA48', 
		'\a', '\x15C', '\x2', '\x2', '\xA48', '\xA49', '\x5', '\x14C', '\xA7', 
		'\x2', '\xA49', '\xA4A', '\a', '\x15E', '\x2', '\x2', '\xA4A', '\x1AB', 
		'\x3', '\x2', '\x2', '\x2', '\xA4B', '\xA4C', '\a', '\x64', '\x2', '\x2', 
		'\xA4C', '\xA4D', '\a', '\x15C', '\x2', '\x2', '\xA4D', '\xA4E', '\x5', 
		'\x1A6', '\xD4', '\x2', '\xA4E', '\xA4F', '\a', '\x150', '\x2', '\x2', 
		'\xA4F', '\xA50', '\x5', '\x1A4', '\xD3', '\x2', '\xA50', '\xA51', '\a', 
		'\x15E', '\x2', '\x2', '\xA51', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\xA52', 
		'\xA53', '\a', '\x65', '\x2', '\x2', '\xA53', '\xA54', '\a', '\x15C', 
		'\x2', '\x2', '\xA54', '\xA55', '\x5', '\x1A2', '\xD2', '\x2', '\xA55', 
		'\xA56', '\a', '\x15E', '\x2', '\x2', '\xA56', '\x1AF', '\x3', '\x2', 
		'\x2', '\x2', '\xA57', '\xA58', '\a', '\x38', '\x2', '\x2', '\xA58', '\xA70', 
		'\a', '\x5', '\x2', '\x2', '\xA59', '\xA5B', '\a', '\x38', '\x2', '\x2', 
		'\xA5A', '\xA5C', '\a', '\x1A', '\x2', '\x2', '\xA5B', '\xA5A', '\x3', 
		'\x2', '\x2', '\x2', '\xA5B', '\xA5C', '\x3', '\x2', '\x2', '\x2', '\xA5C', 
		'\xA70', '\x3', '\x2', '\x2', '\x2', '\xA5D', '\xA5E', '\a', '\xB3', '\x2', 
		'\x2', '\xA5E', '\xA70', '\a', '\x5', '\x2', '\x2', '\xA5F', '\xA61', 
		'\a', '\xB3', '\x2', '\x2', '\xA60', '\xA62', '\a', '\x1A', '\x2', '\x2', 
		'\xA61', '\xA60', '\x3', '\x2', '\x2', '\x2', '\xA61', '\xA62', '\x3', 
		'\x2', '\x2', '\x2', '\xA62', '\xA70', '\x3', '\x2', '\x2', '\x2', '\xA63', 
		'\xA64', '\a', '\x39', '\x2', '\x2', '\xA64', '\xA70', '\a', '\x5', '\x2', 
		'\x2', '\xA65', '\xA67', '\a', '\x39', '\x2', '\x2', '\xA66', '\xA68', 
		'\a', '\x1A', '\x2', '\x2', '\xA67', '\xA66', '\x3', '\x2', '\x2', '\x2', 
		'\xA67', '\xA68', '\x3', '\x2', '\x2', '\x2', '\xA68', '\xA70', '\x3', 
		'\x2', '\x2', '\x2', '\xA69', '\xA6A', '\a', '\xB1', '\x2', '\x2', '\xA6A', 
		'\xA70', '\a', '\x5', '\x2', '\x2', '\xA6B', '\xA6D', '\a', '\xB1', '\x2', 
		'\x2', '\xA6C', '\xA6E', '\a', '\x1A', '\x2', '\x2', '\xA6D', '\xA6C', 
		'\x3', '\x2', '\x2', '\x2', '\xA6D', '\xA6E', '\x3', '\x2', '\x2', '\x2', 
		'\xA6E', '\xA70', '\x3', '\x2', '\x2', '\x2', '\xA6F', '\xA57', '\x3', 
		'\x2', '\x2', '\x2', '\xA6F', '\xA59', '\x3', '\x2', '\x2', '\x2', '\xA6F', 
		'\xA5D', '\x3', '\x2', '\x2', '\x2', '\xA6F', '\xA5F', '\x3', '\x2', '\x2', 
		'\x2', '\xA6F', '\xA63', '\x3', '\x2', '\x2', '\x2', '\xA6F', '\xA65', 
		'\x3', '\x2', '\x2', '\x2', '\xA6F', '\xA69', '\x3', '\x2', '\x2', '\x2', 
		'\xA6F', '\xA6B', '\x3', '\x2', '\x2', '\x2', '\xA70', '\x1B1', '\x3', 
		'\x2', '\x2', '\x2', '\xA71', '\xA73', '\x5', '\x1B6', '\xDC', '\x2', 
		'\xA72', '\xA71', '\x3', '\x2', '\x2', '\x2', '\xA72', '\xA73', '\x3', 
		'\x2', '\x2', '\x2', '\xA73', '\xA74', '\x3', '\x2', '\x2', '\x2', '\xA74', 
		'\xA75', '\x5', '\x1B4', '\xDB', '\x2', '\xA75', '\x1B3', '\x3', '\x2', 
		'\x2', '\x2', '\xA76', '\xA79', '\x5', '\x1BA', '\xDE', '\x2', '\xA77', 
		'\xA79', '\x5', '\x1BE', '\xE0', '\x2', '\xA78', '\xA76', '\x3', '\x2', 
		'\x2', '\x2', '\xA78', '\xA77', '\x3', '\x2', '\x2', '\x2', '\xA79', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\xA7A', '\xA7B', '\a', '\x97', '\x2', '\x2', 
		'\xA7B', '\xA80', '\x5', '\x1B8', '\xDD', '\x2', '\xA7C', '\xA7D', '\a', 
		'\x150', '\x2', '\x2', '\xA7D', '\xA7F', '\x5', '\x1B8', '\xDD', '\x2', 
		'\xA7E', '\xA7C', '\x3', '\x2', '\x2', '\x2', '\xA7F', '\xA82', '\x3', 
		'\x2', '\x2', '\x2', '\xA80', '\xA7E', '\x3', '\x2', '\x2', '\x2', '\xA80', 
		'\xA81', '\x3', '\x2', '\x2', '\x2', '\xA81', '\x1B7', '\x3', '\x2', '\x2', 
		'\x2', '\xA82', '\xA80', '\x3', '\x2', '\x2', '\x2', '\xA83', '\xA84', 
		'\x5', '\x2E8', '\x175', '\x2', '\xA84', '\xA85', '\a', '\x18', '\x2', 
		'\x2', '\xA85', '\xA86', '\a', '\x152', '\x2', '\x2', '\xA86', '\xA87', 
		'\x5', '\x1B2', '\xDA', '\x2', '\xA87', '\xA88', '\a', '\x153', '\x2', 
		'\x2', '\xA88', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\xA89', '\xA8F', 
		'\x5', '\x1BC', '\xDF', '\x2', '\xA8A', '\xA8B', '\x5', '\x1B0', '\xD9', 
		'\x2', '\xA8B', '\xA8C', '\x5', '\x1BC', '\xDF', '\x2', '\xA8C', '\xA8E', 
		'\x3', '\x2', '\x2', '\x2', '\xA8D', '\xA8A', '\x3', '\x2', '\x2', '\x2', 
		'\xA8E', '\xA91', '\x3', '\x2', '\x2', '\x2', '\xA8F', '\xA8D', '\x3', 
		'\x2', '\x2', '\x2', '\xA8F', '\xA90', '\x3', '\x2', '\x2', '\x2', '\xA90', 
		'\x1BB', '\x3', '\x2', '\x2', '\x2', '\xA91', '\xA8F', '\x3', '\x2', '\x2', 
		'\x2', '\xA92', '\xA94', '\x5', '\x220', '\x111', '\x2', '\xA93', '\xA95', 
		'\x5', '\x1C8', '\xE5', '\x2', '\xA94', '\xA93', '\x3', '\x2', '\x2', 
		'\x2', '\xA95', '\xA96', '\x3', '\x2', '\x2', '\x2', '\xA96', '\xA94', 
		'\x3', '\x2', '\x2', '\x2', '\xA96', '\xA97', '\x3', '\x2', '\x2', '\x2', 
		'\xA97', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\xA98', '\xA9B', '\x5', 
		'\x1CA', '\xE6', '\x2', '\xA99', '\xA9C', '\x5', '\x1C2', '\xE2', '\x2', 
		'\xA9A', '\xA9C', '\x5', '\x250', '\x129', '\x2', '\xA9B', '\xA99', '\x3', 
		'\x2', '\x2', '\x2', '\xA9B', '\xA9A', '\x3', '\x2', '\x2', '\x2', '\xA9C', 
		'\xA9F', '\x3', '\x2', '\x2', '\x2', '\xA9D', '\xA9F', '\x5', '\x1C2', 
		'\xE2', '\x2', '\xA9E', '\xA98', '\x3', '\x2', '\x2', '\x2', '\xA9E', 
		'\xA9D', '\x3', '\x2', '\x2', '\x2', '\xA9F', '\x1BF', '\x3', '\x2', '\x2', 
		'\x2', '\xAA0', '\xAA2', '\x5', '\x1FA', '\xFE', '\x2', '\xAA1', '\xAA3', 
		'\x5', '\x220', '\x111', '\x2', '\xAA2', '\xAA1', '\x3', '\x2', '\x2', 
		'\x2', '\xAA2', '\xAA3', '\x3', '\x2', '\x2', '\x2', '\xAA3', '\xAA5', 
		'\x3', '\x2', '\x2', '\x2', '\xAA4', '\xAA6', '\x5', '\x24C', '\x127', 
		'\x2', '\xAA5', '\xAA4', '\x3', '\x2', '\x2', '\x2', '\xAA5', '\xAA6', 
		'\x3', '\x2', '\x2', '\x2', '\xAA6', '\xAA8', '\x3', '\x2', '\x2', '\x2', 
		'\xAA7', '\xAA9', '\x5', '\x258', '\x12D', '\x2', '\xAA8', '\xAA7', '\x3', 
		'\x2', '\x2', '\x2', '\xAA8', '\xAA9', '\x3', '\x2', '\x2', '\x2', '\xAA9', 
		'\xAAB', '\x3', '\x2', '\x2', '\x2', '\xAAA', '\xAAC', '\x5', '\x268', 
		'\x135', '\x2', '\xAAB', '\xAAA', '\x3', '\x2', '\x2', '\x2', '\xAAB', 
		'\xAAC', '\x3', '\x2', '\x2', '\x2', '\xAAC', '\xAAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAAD', '\xAAF', '\x5', '\x208', '\x105', '\x2', '\xAAE', '\xAAD', 
		'\x3', '\x2', '\x2', '\x2', '\xAAE', '\xAAF', '\x3', '\x2', '\x2', '\x2', 
		'\xAAF', '\xAB5', '\x3', '\x2', '\x2', '\x2', '\xAB0', '\xAB1', '\a', 
		'\x152', '\x2', '\x2', '\xAB1', '\xAB2', '\x5', '\x1C2', '\xE2', '\x2', 
		'\xAB2', '\xAB3', '\a', '\x153', '\x2', '\x2', '\xAB3', '\xAB5', '\x3', 
		'\x2', '\x2', '\x2', '\xAB4', '\xAA0', '\x3', '\x2', '\x2', '\x2', '\xAB4', 
		'\xAB0', '\x3', '\x2', '\x2', '\x2', '\xAB5', '\x1C1', '\x3', '\x2', '\x2', 
		'\x2', '\xAB6', '\xAB8', '\x5', '\x1C0', '\xE1', '\x2', '\xAB7', '\xAB9', 
		'\x5', '\x1C4', '\xE3', '\x2', '\xAB8', '\xAB7', '\x3', '\x2', '\x2', 
		'\x2', '\xAB8', '\xAB9', '\x3', '\x2', '\x2', '\x2', '\xAB9', '\xABB', 
		'\x3', '\x2', '\x2', '\x2', '\xABA', '\xABC', '\x5', '\x278', '\x13D', 
		'\x2', '\xABB', '\xABA', '\x3', '\x2', '\x2', '\x2', '\xABB', '\xABC', 
		'\x3', '\x2', '\x2', '\x2', '\xABC', '\xABE', '\x3', '\x2', '\x2', '\x2', 
		'\xABD', '\xABF', '\x5', '\x27A', '\x13E', '\x2', '\xABE', '\xABD', '\x3', 
		'\x2', '\x2', '\x2', '\xABE', '\xABF', '\x3', '\x2', '\x2', '\x2', '\xABF', 
		'\xAC1', '\x3', '\x2', '\x2', '\x2', '\xAC0', '\xAC2', '\x5', '\x27E', 
		'\x140', '\x2', '\xAC1', '\xAC0', '\x3', '\x2', '\x2', '\x2', '\xAC1', 
		'\xAC2', '\x3', '\x2', '\x2', '\x2', '\xAC2', '\xAC4', '\x3', '\x2', '\x2', 
		'\x2', '\xAC3', '\xAC5', '\x5', '\x280', '\x141', '\x2', '\xAC4', '\xAC3', 
		'\x3', '\x2', '\x2', '\x2', '\xAC4', '\xAC5', '\x3', '\x2', '\x2', '\x2', 
		'\xAC5', '\xAC7', '\x3', '\x2', '\x2', '\x2', '\xAC6', '\xAC8', '\x5', 
		'\x1CE', '\xE8', '\x2', '\xAC7', '\xAC6', '\x3', '\x2', '\x2', '\x2', 
		'\xAC7', '\xAC8', '\x3', '\x2', '\x2', '\x2', '\xAC8', '\x1C3', '\x3', 
		'\x2', '\x2', '\x2', '\xAC9', '\xACA', '\x5', '\x1B0', '\xD9', '\x2', 
		'\xACA', '\xACB', '\x5', '\x1C0', '\xE1', '\x2', '\xACB', '\xACD', '\x3', 
		'\x2', '\x2', '\x2', '\xACC', '\xAC9', '\x3', '\x2', '\x2', '\x2', '\xACD', 
		'\xACE', '\x3', '\x2', '\x2', '\x2', '\xACE', '\xACC', '\x3', '\x2', '\x2', 
		'\x2', '\xACE', '\xACF', '\x3', '\x2', '\x2', '\x2', '\xACF', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\xAD0', '\xAD2', '\x5', '\x1B6', '\xDC', 
		'\x2', '\xAD1', '\xAD0', '\x3', '\x2', '\x2', '\x2', '\xAD1', '\xAD2', 
		'\x3', '\x2', '\x2', '\x2', '\xAD2', '\xAD3', '\x3', '\x2', '\x2', '\x2', 
		'\xAD3', '\xAD4', '\x5', '\x1C2', '\xE2', '\x2', '\xAD4', '\x1C7', '\x3', 
		'\x2', '\x2', '\x2', '\xAD5', '\xAD6', '\x5', '\x1CA', '\xE6', '\x2', 
		'\xAD6', '\xAD8', '\x5', '\x1FA', '\xFE', '\x2', '\xAD7', '\xAD9', '\x5', 
		'\x232', '\x11A', '\x2', '\xAD8', '\xAD7', '\x3', '\x2', '\x2', '\x2', 
		'\xAD8', '\xAD9', '\x3', '\x2', '\x2', '\x2', '\xAD9', '\xADB', '\x3', 
		'\x2', '\x2', '\x2', '\xADA', '\xADC', '\x5', '\x24C', '\x127', '\x2', 
		'\xADB', '\xADA', '\x3', '\x2', '\x2', '\x2', '\xADB', '\xADC', '\x3', 
		'\x2', '\x2', '\x2', '\xADC', '\xADE', '\x3', '\x2', '\x2', '\x2', '\xADD', 
		'\xADF', '\x5', '\x258', '\x12D', '\x2', '\xADE', '\xADD', '\x3', '\x2', 
		'\x2', '\x2', '\xADE', '\xADF', '\x3', '\x2', '\x2', '\x2', '\xADF', '\xAE1', 
		'\x3', '\x2', '\x2', '\x2', '\xAE0', '\xAE2', '\x5', '\x268', '\x135', 
		'\x2', '\xAE1', '\xAE0', '\x3', '\x2', '\x2', '\x2', '\xAE1', '\xAE2', 
		'\x3', '\x2', '\x2', '\x2', '\xAE2', '\xAE4', '\x3', '\x2', '\x2', '\x2', 
		'\xAE3', '\xAE5', '\x5', '\x208', '\x105', '\x2', '\xAE4', '\xAE3', '\x3', 
		'\x2', '\x2', '\x2', '\xAE4', '\xAE5', '\x3', '\x2', '\x2', '\x2', '\xAE5', 
		'\xAE7', '\x3', '\x2', '\x2', '\x2', '\xAE6', '\xAE8', '\x5', '\x278', 
		'\x13D', '\x2', '\xAE7', '\xAE6', '\x3', '\x2', '\x2', '\x2', '\xAE7', 
		'\xAE8', '\x3', '\x2', '\x2', '\x2', '\xAE8', '\xAEA', '\x3', '\x2', '\x2', 
		'\x2', '\xAE9', '\xAEB', '\x5', '\x27A', '\x13E', '\x2', '\xAEA', '\xAE9', 
		'\x3', '\x2', '\x2', '\x2', '\xAEA', '\xAEB', '\x3', '\x2', '\x2', '\x2', 
		'\xAEB', '\xAED', '\x3', '\x2', '\x2', '\x2', '\xAEC', '\xAEE', '\x5', 
		'\x27E', '\x140', '\x2', '\xAED', '\xAEC', '\x3', '\x2', '\x2', '\x2', 
		'\xAED', '\xAEE', '\x3', '\x2', '\x2', '\x2', '\xAEE', '\xAF0', '\x3', 
		'\x2', '\x2', '\x2', '\xAEF', '\xAF1', '\x5', '\x280', '\x141', '\x2', 
		'\xAF0', '\xAEF', '\x3', '\x2', '\x2', '\x2', '\xAF0', '\xAF1', '\x3', 
		'\x2', '\x2', '\x2', '\xAF1', '\xAF3', '\x3', '\x2', '\x2', '\x2', '\xAF2', 
		'\xAF4', '\x5', '\x1CE', '\xE8', '\x2', '\xAF3', '\xAF2', '\x3', '\x2', 
		'\x2', '\x2', '\xAF3', '\xAF4', '\x3', '\x2', '\x2', '\x2', '\xAF4', '\xB15', 
		'\x3', '\x2', '\x2', '\x2', '\xAF5', '\xAF7', '\x5', '\x1FA', '\xFE', 
		'\x2', '\xAF6', '\xAF8', '\x5', '\x232', '\x11A', '\x2', '\xAF7', '\xAF6', 
		'\x3', '\x2', '\x2', '\x2', '\xAF7', '\xAF8', '\x3', '\x2', '\x2', '\x2', 
		'\xAF8', '\xAFA', '\x3', '\x2', '\x2', '\x2', '\xAF9', '\xAFB', '\x5', 
		'\x24C', '\x127', '\x2', '\xAFA', '\xAF9', '\x3', '\x2', '\x2', '\x2', 
		'\xAFA', '\xAFB', '\x3', '\x2', '\x2', '\x2', '\xAFB', '\xAFD', '\x3', 
		'\x2', '\x2', '\x2', '\xAFC', '\xAFE', '\x5', '\x258', '\x12D', '\x2', 
		'\xAFD', '\xAFC', '\x3', '\x2', '\x2', '\x2', '\xAFD', '\xAFE', '\x3', 
		'\x2', '\x2', '\x2', '\xAFE', '\xB00', '\x3', '\x2', '\x2', '\x2', '\xAFF', 
		'\xB01', '\x5', '\x268', '\x135', '\x2', '\xB00', '\xAFF', '\x3', '\x2', 
		'\x2', '\x2', '\xB00', '\xB01', '\x3', '\x2', '\x2', '\x2', '\xB01', '\xB03', 
		'\x3', '\x2', '\x2', '\x2', '\xB02', '\xB04', '\x5', '\x208', '\x105', 
		'\x2', '\xB03', '\xB02', '\x3', '\x2', '\x2', '\x2', '\xB03', '\xB04', 
		'\x3', '\x2', '\x2', '\x2', '\xB04', '\xB06', '\x3', '\x2', '\x2', '\x2', 
		'\xB05', '\xB07', '\x5', '\x278', '\x13D', '\x2', '\xB06', '\xB05', '\x3', 
		'\x2', '\x2', '\x2', '\xB06', '\xB07', '\x3', '\x2', '\x2', '\x2', '\xB07', 
		'\xB09', '\x3', '\x2', '\x2', '\x2', '\xB08', '\xB0A', '\x5', '\x27A', 
		'\x13E', '\x2', '\xB09', '\xB08', '\x3', '\x2', '\x2', '\x2', '\xB09', 
		'\xB0A', '\x3', '\x2', '\x2', '\x2', '\xB0A', '\xB0C', '\x3', '\x2', '\x2', 
		'\x2', '\xB0B', '\xB0D', '\x5', '\x27E', '\x140', '\x2', '\xB0C', '\xB0B', 
		'\x3', '\x2', '\x2', '\x2', '\xB0C', '\xB0D', '\x3', '\x2', '\x2', '\x2', 
		'\xB0D', '\xB0F', '\x3', '\x2', '\x2', '\x2', '\xB0E', '\xB10', '\x5', 
		'\x280', '\x141', '\x2', '\xB0F', '\xB0E', '\x3', '\x2', '\x2', '\x2', 
		'\xB0F', '\xB10', '\x3', '\x2', '\x2', '\x2', '\xB10', '\xB12', '\x3', 
		'\x2', '\x2', '\x2', '\xB11', '\xB13', '\x5', '\x1CE', '\xE8', '\x2', 
		'\xB12', '\xB11', '\x3', '\x2', '\x2', '\x2', '\xB12', '\xB13', '\x3', 
		'\x2', '\x2', '\x2', '\xB13', '\xB15', '\x3', '\x2', '\x2', '\x2', '\xB14', 
		'\xAD5', '\x3', '\x2', '\x2', '\x2', '\xB14', '\xAF5', '\x3', '\x2', '\x2', 
		'\x2', '\xB15', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\xB16', '\xB17', 
		'\a', '\x1B', '\x2', '\x2', '\xB17', '\xB18', '\a', '\x1C', '\x2', '\x2', 
		'\xB18', '\xB1A', '\x5', '\x1CC', '\xE7', '\x2', '\xB19', '\xB1B', '\x5', 
		',', '\x17', '\x2', '\xB1A', '\xB19', '\x3', '\x2', '\x2', '\x2', '\xB1A', 
		'\xB1B', '\x3', '\x2', '\x2', '\x2', '\xB1B', '\xB29', '\x3', '\x2', '\x2', 
		'\x2', '\xB1C', '\xB1D', '\a', '\x1B', '\x2', '\x2', '\xB1D', '\xB1F', 
		'\a', 'j', '\x2', '\x2', '\xB1E', '\xB20', '\a', '\'', '\x2', '\x2', '\xB1F', 
		'\xB1E', '\x3', '\x2', '\x2', '\x2', '\xB1F', '\xB20', '\x3', '\x2', '\x2', 
		'\x2', '\xB20', '\xB21', '\x3', '\x2', '\x2', '\x2', '\xB21', '\xB26', 
		'\x5', '\x2D8', '\x16D', '\x2', '\xB22', '\xB23', '\a', '\x152', '\x2', 
		'\x2', '\xB23', '\xB24', '\x5', '\x14E', '\xA8', '\x2', '\xB24', '\xB25', 
		'\a', '\x153', '\x2', '\x2', '\xB25', '\xB27', '\x3', '\x2', '\x2', '\x2', 
		'\xB26', '\xB22', '\x3', '\x2', '\x2', '\x2', '\xB26', '\xB27', '\x3', 
		'\x2', '\x2', '\x2', '\xB27', '\xB29', '\x3', '\x2', '\x2', '\x2', '\xB28', 
		'\xB16', '\x3', '\x2', '\x2', '\x2', '\xB28', '\xB1C', '\x3', '\x2', '\x2', 
		'\x2', '\xB29', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\xB2A', '\xB2C', 
		'\a', '\x32', '\x2', '\x2', '\xB2B', '\xB2A', '\x3', '\x2', '\x2', '\x2', 
		'\xB2B', '\xB2C', '\x3', '\x2', '\x2', '\x2', '\xB2C', '\xB2D', '\x3', 
		'\x2', '\x2', '\x2', '\xB2D', '\xB2E', '\a', '\x31', '\x2', '\x2', '\xB2E', 
		'\xB30', '\a', '\x16C', '\x2', '\x2', '\xB2F', '\xB31', '\x5', '\x12E', 
		'\x98', '\x2', '\xB30', '\xB2F', '\x3', '\x2', '\x2', '\x2', '\xB30', 
		'\xB31', '\x3', '\x2', '\x2', '\x2', '\xB31', '\xB33', '\x3', '\x2', '\x2', 
		'\x2', '\xB32', '\xB34', '\x5', '\x144', '\xA3', '\x2', '\xB33', '\xB32', 
		'\x3', '\x2', '\x2', '\x2', '\xB33', '\xB34', '\x3', '\x2', '\x2', '\x2', 
		'\xB34', '\xB38', '\x3', '\x2', '\x2', '\x2', '\xB35', '\xB36', '\a', 
		'\'', '\x2', '\x2', '\xB36', '\xB38', '\x5', '\x2D8', '\x16D', '\x2', 
		'\xB37', '\xB2B', '\x3', '\x2', '\x2', '\x2', '\xB37', '\xB35', '\x3', 
		'\x2', '\x2', '\x2', '\xB38', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\xB39', 
		'\xB3C', '\a', '\x9B', '\x2', '\x2', '\xB3A', '\xB3B', '\a', '\x171', 
		'\x2', '\x2', '\xB3B', '\xB3D', '\a', '\x150', '\x2', '\x2', '\xB3C', 
		'\xB3A', '\x3', '\x2', '\x2', '\x2', '\xB3C', '\xB3D', '\x3', '\x2', '\x2', 
		'\x2', '\xB3D', '\xB3E', '\x3', '\x2', '\x2', '\x2', '\xB3E', '\xB44', 
		'\a', '\x171', '\x2', '\x2', '\xB3F', '\xB40', '\a', '\x9B', '\x2', '\x2', 
		'\xB40', '\xB41', '\a', '\x171', '\x2', '\x2', '\xB41', '\xB42', '\a', 
		'\x9C', '\x2', '\x2', '\xB42', '\xB44', '\a', '\x171', '\x2', '\x2', '\xB43', 
		'\xB39', '\x3', '\x2', '\x2', '\x2', '\xB43', '\xB3F', '\x3', '\x2', '\x2', 
		'\x2', '\xB44', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\xB45', '\xB46', 
		'\a', '\xAF', '\x2', '\x2', '\xB46', '\xB47', '\a', '\x17', '\x2', '\x2', 
		'\xB47', '\xB49', '\x5', '\x240', '\x121', '\x2', '\xB48', '\xB4A', '\x5', 
		'\x24C', '\x127', '\x2', '\xB49', '\xB48', '\x3', '\x2', '\x2', '\x2', 
		'\xB49', '\xB4A', '\x3', '\x2', '\x2', '\x2', '\xB4A', '\x1D1', '\x3', 
		'\x2', '\x2', '\x2', '\xB4B', '\xB4C', '\x5', '\x21A', '\x10E', '\x2', 
		'\xB4C', '\xB4D', '\a', '\x158', '\x2', '\x2', '\xB4D', '\xB4E', '\x5', 
		'\x2C8', '\x165', '\x2', '\xB4E', '\x1D3', '\x3', '\x2', '\x2', '\x2', 
		'\xB4F', '\xB50', '\a', '\x9D', '\x2', '\x2', '\xB50', '\xB55', '\x5', 
		'\x1D2', '\xEA', '\x2', '\xB51', '\xB52', '\a', '\x150', '\x2', '\x2', 
		'\xB52', '\xB54', '\x5', '\x1D2', '\xEA', '\x2', '\xB53', '\xB51', '\x3', 
		'\x2', '\x2', '\x2', '\xB54', '\xB57', '\x3', '\x2', '\x2', '\x2', '\xB55', 
		'\xB53', '\x3', '\x2', '\x2', '\x2', '\xB55', '\xB56', '\x3', '\x2', '\x2', 
		'\x2', '\xB56', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\xB57', '\xB55', 
		'\x3', '\x2', '\x2', '\x2', '\xB58', '\xB59', '\a', '\xE2', '\x2', '\x2', 
		'\xB59', '\xB5A', '\x5', '\x240', '\x121', '\x2', '\xB5A', '\xB5C', '\x5', 
		'\x1D4', '\xEB', '\x2', '\xB5B', '\xB5D', '\x5', '\x24C', '\x127', '\x2', 
		'\xB5C', '\xB5B', '\x3', '\x2', '\x2', '\x2', '\xB5C', '\xB5D', '\x3', 
		'\x2', '\x2', '\x2', '\xB5D', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\xB5E', 
		'\xB63', '\x5', '\x1DA', '\xEE', '\x2', '\xB5F', '\xB63', '\x5', '\x1E4', 
		'\xF3', '\x2', '\xB60', '\xB63', '\x5', '\x1E6', '\xF4', '\x2', '\xB61', 
		'\xB63', '\x5', '\x1E8', '\xF5', '\x2', '\xB62', '\xB5E', '\x3', '\x2', 
		'\x2', '\x2', '\xB62', '\xB5F', '\x3', '\x2', '\x2', '\x2', '\xB62', '\xB60', 
		'\x3', '\x2', '\x2', '\x2', '\xB62', '\xB61', '\x3', '\x2', '\x2', '\x2', 
		'\xB63', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\xB64', '\xB65', '\a', 
		'\x115', '\x2', '\x2', '\xB65', '\xB6E', '\a', '\x116', '\x2', '\x2', 
		'\xB66', '\xB6B', '\x5', '\x1DC', '\xEF', '\x2', '\xB67', '\xB68', '\a', 
		'\x150', '\x2', '\x2', '\xB68', '\xB6A', '\x5', '\x1DC', '\xEF', '\x2', 
		'\xB69', '\xB67', '\x3', '\x2', '\x2', '\x2', '\xB6A', '\xB6D', '\x3', 
		'\x2', '\x2', '\x2', '\xB6B', '\xB69', '\x3', '\x2', '\x2', '\x2', '\xB6B', 
		'\xB6C', '\x3', '\x2', '\x2', '\x2', '\xB6C', '\xB6F', '\x3', '\x2', '\x2', 
		'\x2', '\xB6D', '\xB6B', '\x3', '\x2', '\x2', '\x2', '\xB6E', '\xB66', 
		'\x3', '\x2', '\x2', '\x2', '\xB6E', '\xB6F', '\x3', '\x2', '\x2', '\x2', 
		'\xB6F', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\xB70', '\xB73', '\x5', 
		'\x1E0', '\xF1', '\x2', '\xB71', '\xB73', '\x5', '\x1DE', '\xF0', '\x2', 
		'\xB72', '\xB70', '\x3', '\x2', '\x2', '\x2', '\xB72', '\xB71', '\x3', 
		'\x2', '\x2', '\x2', '\xB73', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\xB74', 
		'\xB75', '\a', '\xC8', '\x2', '\x2', '\xB75', '\xB79', '\a', '\x11A', 
		'\x2', '\x2', '\xB76', '\xB77', '\a', '\xC8', '\x2', '\x2', '\xB77', '\xB79', 
		'\a', '\x11B', '\x2', '\x2', '\xB78', '\xB74', '\x3', '\x2', '\x2', '\x2', 
		'\xB78', '\xB76', '\x3', '\x2', '\x2', '\x2', '\xB79', '\x1DF', '\x3', 
		'\x2', '\x2', '\x2', '\xB7A', '\xB7B', '\a', '\x11C', '\x2', '\x2', '\xB7B', 
		'\xB7C', '\a', '\x11D', '\x2', '\x2', '\xB7C', '\xB7D', '\x5', '\x1E2', 
		'\xF2', '\x2', '\xB7D', '\x1E1', '\x3', '\x2', '\x2', '\x2', '\xB7E', 
		'\xB7F', '\a', '\x11E', '\x2', '\x2', '\xB7F', '\x1E3', '\x3', '\x2', 
		'\x2', '\x2', '\xB80', '\xB82', '\a', '\x117', '\x2', '\x2', '\xB81', 
		'\xB83', '\a', '\x119', '\x2', '\x2', '\xB82', '\xB81', '\x3', '\x2', 
		'\x2', '\x2', '\xB82', '\xB83', '\x3', '\x2', '\x2', '\x2', '\xB83', '\x1E5', 
		'\x3', '\x2', '\x2', '\x2', '\xB84', '\xB86', '\a', '\x118', '\x2', '\x2', 
		'\xB85', '\xB87', '\a', '\x119', '\x2', '\x2', '\xB86', '\xB85', '\x3', 
		'\x2', '\x2', '\x2', '\xB86', '\xB87', '\x3', '\x2', '\x2', '\x2', '\xB87', 
		'\x1E7', '\x3', '\x2', '\x2', '\x2', '\xB88', '\xB89', '\a', '\x9D', '\x2', 
		'\x2', '\xB89', '\xB8A', '\a', '\x11F', '\x2', '\x2', '\xB8A', '\xB8B', 
		'\x5', '\x2D6', '\x16C', '\x2', '\xB8B', '\x1E9', '\x3', '\x2', '\x2', 
		'\x2', '\xB8C', '\xB8D', '\a', '\x12C', '\x2', '\x2', '\xB8D', '\xB8F', 
		'\a', '\x104', '\x2', '\x2', '\xB8E', '\xB90', '\a', '\x171', '\x2', '\x2', 
		'\xB8F', '\xB8E', '\x3', '\x2', '\x2', '\x2', '\xB90', '\xB91', '\x3', 
		'\x2', '\x2', '\x2', '\xB91', '\xB8F', '\x3', '\x2', '\x2', '\x2', '\xB91', 
		'\xB92', '\x3', '\x2', '\x2', '\x2', '\xB92', '\x1EB', '\x3', '\x2', '\x2', 
		'\x2', '\xB93', '\xB94', '\a', '\x12F', '\x2', '\x2', '\xB94', '\xB95', 
		'\a', 'j', '\x2', '\x2', '\xB95', '\xB9A', '\x5', '\x240', '\x121', '\x2', 
		'\xB96', '\xB98', '\a', '\x18', '\x2', '\x2', '\xB97', '\xB96', '\x3', 
		'\x2', '\x2', '\x2', '\xB97', '\xB98', '\x3', '\x2', '\x2', '\x2', '\xB98', 
		'\xB99', '\x3', '\x2', '\x2', '\x2', '\xB99', '\xB9B', '\x5', '\x2E8', 
		'\x175', '\x2', '\xB9A', '\xB97', '\x3', '\x2', '\x2', '\x2', '\xB9A', 
		'\xB9B', '\x3', '\x2', '\x2', '\x2', '\xB9B', '\xB9C', '\x3', '\x2', '\x2', 
		'\x2', '\xB9C', '\xB9D', '\a', '\x34', '\x2', '\x2', '\xB9D', '\xB9E', 
		'\x5', '\x228', '\x115', '\x2', '\xB9E', '\xB9F', '\a', '$', '\x2', '\x2', 
		'\xB9F', '\xBA0', '\x5', '\x2C8', '\x165', '\x2', '\xBA0', '\xBA1', '\x5', 
		'\x1EE', '\xF8', '\x2', '\xBA1', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'\xBA2', '\xBA5', '\x5', '\x1F2', '\xFA', '\x2', '\xBA3', '\xBA5', '\x5', 
		'\x1F4', '\xFB', '\x2', '\xBA4', '\xBA2', '\x3', '\x2', '\x2', '\x2', 
		'\xBA4', '\xBA3', '\x3', '\x2', '\x2', '\x2', '\xBA5', '\xBA8', '\x3', 
		'\x2', '\x2', '\x2', '\xBA6', '\xBA4', '\x3', '\x2', '\x2', '\x2', '\xBA6', 
		'\xBA7', '\x3', '\x2', '\x2', '\x2', '\xBA7', '\xBAA', '\x3', '\x2', '\x2', 
		'\x2', '\xBA8', '\xBA6', '\x3', '\x2', '\x2', '\x2', '\xBA9', '\xBAB', 
		'\x5', '\x1F0', '\xF9', '\x2', '\xBAA', '\xBA9', '\x3', '\x2', '\x2', 
		'\x2', '\xBAA', '\xBAB', '\x3', '\x2', '\x2', '\x2', '\xBAB', '\x1EF', 
		'\x3', '\x2', '\x2', '\x2', '\xBAC', '\xBAD', '\a', '\xA5', '\x2', '\x2', 
		'\xBAD', '\xBAE', '\a', '\t', '\x2', '\x2', '\xBAE', '\xBB1', '\a', '\x130', 
		'\x2', '\x2', '\xBAF', '\xBB0', '\a', '\a', '\x2', '\x2', '\xBB0', '\xBB2', 
		'\x5', '\x2C8', '\x165', '\x2', '\xBB1', '\xBAF', '\x3', '\x2', '\x2', 
		'\x2', '\xBB1', '\xBB2', '\x3', '\x2', '\x2', '\x2', '\xBB2', '\xBB3', 
		'\x3', '\x2', '\x2', '\x2', '\xBB3', '\xBB4', '\a', '\xA6', '\x2', '\x2', 
		'\xBB4', '\xBB5', '\a', '\x1B', '\x2', '\x2', '\xBB5', '\xBB6', '\a', 
		'\x109', '\x2', '\x2', '\xBB6', '\xBB7', '\x5', '\x254', '\x12B', '\x2', 
		'\xBB7', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\xBB8', '\xBB9', '\a', 
		'\xA5', '\x2', '\x2', '\xBB9', '\xBBA', '\a', '\x130', '\x2', '\x2', '\xBBA', 
		'\xBBB', '\a', '\a', '\x2', '\x2', '\xBBB', '\xBBC', '\x5', '\x2C8', '\x165', 
		'\x2', '\xBBC', '\xBBD', '\a', '\xA6', '\x2', '\x2', '\xBBD', '\xBBE', 
		'\x5', '\x1F6', '\xFC', '\x2', '\xBBE', '\x1F3', '\x3', '\x2', '\x2', 
		'\x2', '\xBBF', '\xBC0', '\a', '\xA5', '\x2', '\x2', '\xBC0', '\xBC1', 
		'\a', '\x130', '\x2', '\x2', '\xBC1', '\xBC2', '\a', '\xA6', '\x2', '\x2', 
		'\xBC2', '\xBC3', '\x5', '\x1F6', '\xFC', '\x2', '\xBC3', '\x1F5', '\x3', 
		'\x2', '\x2', '\x2', '\xBC4', '\xBC5', '\a', '\xE2', '\x2', '\x2', '\xBC5', 
		'\xBC8', '\x5', '\x1D4', '\xEB', '\x2', '\xBC6', '\xBC8', '\a', '\xAF', 
		'\x2', '\x2', '\xBC7', '\xBC4', '\x3', '\x2', '\x2', '\x2', '\xBC7', '\xBC6', 
		'\x3', '\x2', '\x2', '\x2', '\xBC8', '\x1F7', '\x3', '\x2', '\x2', '\x2', 
		'\xBC9', '\xBCA', '\a', 'w', '\x2', '\x2', '\xBCA', '\xBCC', '\a', '\x10C', 
		'\x2', '\x2', '\xBCB', '\xBCD', '\a', '\x16C', '\x2', '\x2', '\xBCC', 
		'\xBCB', '\x3', '\x2', '\x2', '\x2', '\xBCD', '\xBCE', '\x3', '\x2', '\x2', 
		'\x2', '\xBCE', '\xBCC', '\x3', '\x2', '\x2', '\x2', '\xBCE', '\xBCF', 
		'\x3', '\x2', '\x2', '\x2', '\xBCF', '\x1F9', '\x3', '\x2', '\x2', '\x2', 
		'\xBD0', '\xBD2', '\a', '\x19', '\x2', '\x2', '\xBD1', '\xBD3', '\a', 
		'\x177', '\x2', '\x2', '\xBD2', '\xBD1', '\x3', '\x2', '\x2', '\x2', '\xBD2', 
		'\xBD3', '\x3', '\x2', '\x2', '\x2', '\xBD3', '\xBDA', '\x3', '\x2', '\x2', 
		'\x2', '\xBD4', '\xBD6', '\t', '\x11', '\x2', '\x2', '\xBD5', '\xBD4', 
		'\x3', '\x2', '\x2', '\x2', '\xBD5', '\xBD6', '\x3', '\x2', '\x2', '\x2', 
		'\xBD6', '\xBD7', '\x3', '\x2', '\x2', '\x2', '\xBD7', '\xBDB', '\x5', 
		'\x1FC', '\xFF', '\x2', '\xBD8', '\xBD9', '\a', '\x33', '\x2', '\x2', 
		'\xBD9', '\xBDB', '\x5', '\x1FE', '\x100', '\x2', '\xBDA', '\xBD5', '\x3', 
		'\x2', '\x2', '\x2', '\xBDA', '\xBD8', '\x3', '\x2', '\x2', '\x2', '\xBDB', 
		'\xBDE', '\x3', '\x2', '\x2', '\x2', '\xBDC', '\xBDE', '\x5', '\x202', 
		'\x102', '\x2', '\xBDD', '\xBD0', '\x3', '\x2', '\x2', '\x2', '\xBDD', 
		'\xBDC', '\x3', '\x2', '\x2', '\x2', '\xBDE', '\x1FB', '\x3', '\x2', '\x2', 
		'\x2', '\xBDF', '\xBE4', '\x5', '\x200', '\x101', '\x2', '\xBE0', '\xBE1', 
		'\a', '\x150', '\x2', '\x2', '\xBE1', '\xBE3', '\x5', '\x200', '\x101', 
		'\x2', '\xBE2', '\xBE0', '\x3', '\x2', '\x2', '\x2', '\xBE3', '\xBE6', 
		'\x3', '\x2', '\x2', '\x2', '\xBE4', '\xBE2', '\x3', '\x2', '\x2', '\x2', 
		'\xBE4', '\xBE5', '\x3', '\x2', '\x2', '\x2', '\xBE5', '\x1FD', '\x3', 
		'\x2', '\x2', '\x2', '\xBE6', '\xBE4', '\x3', '\x2', '\x2', '\x2', '\xBE7', 
		'\xBE8', '\a', '\x152', '\x2', '\x2', '\xBE8', '\xBE9', '\x5', '\x206', 
		'\x104', '\x2', '\xBE9', '\xBEB', '\a', '\x153', '\x2', '\x2', '\xBEA', 
		'\xBEC', '\x5', '\x124', '\x93', '\x2', '\xBEB', '\xBEA', '\x3', '\x2', 
		'\x2', '\x2', '\xBEB', '\xBEC', '\x3', '\x2', '\x2', '\x2', '\xBEC', '\xBEE', 
		'\x3', '\x2', '\x2', '\x2', '\xBED', '\xBEF', '\x5', '\x128', '\x95', 
		'\x2', '\xBEE', '\xBED', '\x3', '\x2', '\x2', '\x2', '\xBEE', '\xBEF', 
		'\x3', '\x2', '\x2', '\x2', '\xBEF', '\xBF0', '\x3', '\x2', '\x2', '\x2', 
		'\xBF0', '\xBF1', '\a', '\x34', '\x2', '\x2', '\xBF1', '\xC00', '\a', 
		'\x16C', '\x2', '\x2', '\xBF2', '\xBFE', '\a', '\x18', '\x2', '\x2', '\xBF3', 
		'\xBF6', '\a', '\x152', '\x2', '\x2', '\xBF4', '\xBF7', '\x5', '\x21E', 
		'\x110', '\x2', '\xBF5', '\xBF7', '\x5', '\x148', '\xA5', '\x2', '\xBF6', 
		'\xBF4', '\x3', '\x2', '\x2', '\x2', '\xBF6', '\xBF5', '\x3', '\x2', '\x2', 
		'\x2', '\xBF7', '\xBF8', '\x3', '\x2', '\x2', '\x2', '\xBF8', '\xBF9', 
		'\a', '\x153', '\x2', '\x2', '\xBF9', '\xBFF', '\x3', '\x2', '\x2', '\x2', 
		'\xBFA', '\xBFD', '\x5', '\x21E', '\x110', '\x2', '\xBFB', '\xBFD', '\x5', 
		'\x148', '\xA5', '\x2', '\xBFC', '\xBFA', '\x3', '\x2', '\x2', '\x2', 
		'\xBFC', '\xBFB', '\x3', '\x2', '\x2', '\x2', '\xBFD', '\xBFF', '\x3', 
		'\x2', '\x2', '\x2', '\xBFE', '\xBF3', '\x3', '\x2', '\x2', '\x2', '\xBFE', 
		'\xBFC', '\x3', '\x2', '\x2', '\x2', '\xBFF', '\xC01', '\x3', '\x2', '\x2', 
		'\x2', '\xC00', '\xBF2', '\x3', '\x2', '\x2', '\x2', '\xC00', '\xC01', 
		'\x3', '\x2', '\x2', '\x2', '\xC01', '\xC03', '\x3', '\x2', '\x2', '\x2', 
		'\xC02', '\xC04', '\x5', '\x124', '\x93', '\x2', '\xC03', '\xC02', '\x3', 
		'\x2', '\x2', '\x2', '\xC03', '\xC04', '\x3', '\x2', '\x2', '\x2', '\xC04', 
		'\xC06', '\x3', '\x2', '\x2', '\x2', '\xC05', '\xC07', '\x5', '\x126', 
		'\x94', '\x2', '\xC06', '\xC05', '\x3', '\x2', '\x2', '\x2', '\xC06', 
		'\xC07', '\x3', '\x2', '\x2', '\x2', '\xC07', '\x1FF', '\x3', '\x2', '\x2', 
		'\x2', '\xC08', '\xC1D', '\x5', '\x218', '\x10D', '\x2', '\xC09', '\xC1A', 
		'\x5', '\x2C8', '\x165', '\x2', '\xC0A', '\xC0C', '\a', '\x18', '\x2', 
		'\x2', '\xC0B', '\xC0A', '\x3', '\x2', '\x2', '\x2', '\xC0B', '\xC0C', 
		'\x3', '\x2', '\x2', '\x2', '\xC0C', '\xC0D', '\x3', '\x2', '\x2', '\x2', 
		'\xC0D', '\xC1B', '\x5', '\x2E8', '\x175', '\x2', '\xC0E', '\xC0F', '\a', 
		'\x18', '\x2', '\x2', '\xC0F', '\xC10', '\a', '\x152', '\x2', '\x2', '\xC10', 
		'\xC15', '\x5', '\x2E8', '\x175', '\x2', '\xC11', '\xC12', '\a', '\x150', 
		'\x2', '\x2', '\xC12', '\xC14', '\x5', '\x2E8', '\x175', '\x2', '\xC13', 
		'\xC11', '\x3', '\x2', '\x2', '\x2', '\xC14', '\xC17', '\x3', '\x2', '\x2', 
		'\x2', '\xC15', '\xC13', '\x3', '\x2', '\x2', '\x2', '\xC15', '\xC16', 
		'\x3', '\x2', '\x2', '\x2', '\xC16', '\xC18', '\x3', '\x2', '\x2', '\x2', 
		'\xC17', '\xC15', '\x3', '\x2', '\x2', '\x2', '\xC18', '\xC19', '\a', 
		'\x153', '\x2', '\x2', '\xC19', '\xC1B', '\x3', '\x2', '\x2', '\x2', '\xC1A', 
		'\xC0B', '\x3', '\x2', '\x2', '\x2', '\xC1A', '\xC0E', '\x3', '\x2', '\x2', 
		'\x2', '\xC1A', '\xC1B', '\x3', '\x2', '\x2', '\x2', '\xC1B', '\xC1D', 
		'\x3', '\x2', '\x2', '\x2', '\xC1C', '\xC08', '\x3', '\x2', '\x2', '\x2', 
		'\xC1C', '\xC09', '\x3', '\x2', '\x2', '\x2', '\xC1D', '\x201', '\x3', 
		'\x2', '\x2', '\x2', '\xC1E', '\xC1F', '\a', '\x64', '\x2', '\x2', '\xC1F', 
		'\xC23', '\x5', '\x206', '\x104', '\x2', '\xC20', '\xC21', '\a', '\x66', 
		'\x2', '\x2', '\xC21', '\xC23', '\x5', '\x206', '\x104', '\x2', '\xC22', 
		'\xC1E', '\x3', '\x2', '\x2', '\x2', '\xC22', '\xC20', '\x3', '\x2', '\x2', 
		'\x2', '\xC23', '\xC25', '\x3', '\x2', '\x2', '\x2', '\xC24', '\xC26', 
		'\x5', '\x124', '\x93', '\x2', '\xC25', '\xC24', '\x3', '\x2', '\x2', 
		'\x2', '\xC25', '\xC26', '\x3', '\x2', '\x2', '\x2', '\xC26', '\xC28', 
		'\x3', '\x2', '\x2', '\x2', '\xC27', '\xC29', '\x5', '\x128', '\x95', 
		'\x2', '\xC28', '\xC27', '\x3', '\x2', '\x2', '\x2', '\xC28', '\xC29', 
		'\x3', '\x2', '\x2', '\x2', '\xC29', '\xC2A', '\x3', '\x2', '\x2', '\x2', 
		'\xC2A', '\xC2B', '\a', '\x34', '\x2', '\x2', '\xC2B', '\xC3A', '\a', 
		'\x16C', '\x2', '\x2', '\xC2C', '\xC38', '\a', '\x18', '\x2', '\x2', '\xC2D', 
		'\xC30', '\a', '\x152', '\x2', '\x2', '\xC2E', '\xC31', '\x5', '\x21E', 
		'\x110', '\x2', '\xC2F', '\xC31', '\x5', '\x148', '\xA5', '\x2', '\xC30', 
		'\xC2E', '\x3', '\x2', '\x2', '\x2', '\xC30', '\xC2F', '\x3', '\x2', '\x2', 
		'\x2', '\xC31', '\xC32', '\x3', '\x2', '\x2', '\x2', '\xC32', '\xC33', 
		'\a', '\x153', '\x2', '\x2', '\xC33', '\xC39', '\x3', '\x2', '\x2', '\x2', 
		'\xC34', '\xC37', '\x5', '\x21E', '\x110', '\x2', '\xC35', '\xC37', '\x5', 
		'\x148', '\xA5', '\x2', '\xC36', '\xC34', '\x3', '\x2', '\x2', '\x2', 
		'\xC36', '\xC35', '\x3', '\x2', '\x2', '\x2', '\xC37', '\xC39', '\x3', 
		'\x2', '\x2', '\x2', '\xC38', '\xC2D', '\x3', '\x2', '\x2', '\x2', '\xC38', 
		'\xC36', '\x3', '\x2', '\x2', '\x2', '\xC39', '\xC3B', '\x3', '\x2', '\x2', 
		'\x2', '\xC3A', '\xC2C', '\x3', '\x2', '\x2', '\x2', '\xC3A', '\xC3B', 
		'\x3', '\x2', '\x2', '\x2', '\xC3B', '\xC3D', '\x3', '\x2', '\x2', '\x2', 
		'\xC3C', '\xC3E', '\x5', '\x124', '\x93', '\x2', '\xC3D', '\xC3C', '\x3', 
		'\x2', '\x2', '\x2', '\xC3D', '\xC3E', '\x3', '\x2', '\x2', '\x2', '\xC3E', 
		'\xC40', '\x3', '\x2', '\x2', '\x2', '\xC3F', '\xC41', '\x5', '\x126', 
		'\x94', '\x2', '\xC40', '\xC3F', '\x3', '\x2', '\x2', '\x2', '\xC40', 
		'\xC41', '\x3', '\x2', '\x2', '\x2', '\xC41', '\x203', '\x3', '\x2', '\x2', 
		'\x2', '\xC42', '\xC45', '\x5', '\x218', '\x10D', '\x2', '\xC43', '\xC45', 
		'\x5', '\x2C8', '\x165', '\x2', '\xC44', '\xC42', '\x3', '\x2', '\x2', 
		'\x2', '\xC44', '\xC43', '\x3', '\x2', '\x2', '\x2', '\xC45', '\x205', 
		'\x3', '\x2', '\x2', '\x2', '\xC46', '\xC4B', '\x5', '\x204', '\x103', 
		'\x2', '\xC47', '\xC48', '\a', '\x150', '\x2', '\x2', '\xC48', '\xC4A', 
		'\x5', '\x204', '\x103', '\x2', '\xC49', '\xC47', '\x3', '\x2', '\x2', 
		'\x2', '\xC4A', '\xC4D', '\x3', '\x2', '\x2', '\x2', '\xC4B', '\xC49', 
		'\x3', '\x2', '\x2', '\x2', '\xC4B', '\xC4C', '\x3', '\x2', '\x2', '\x2', 
		'\xC4C', '\x207', '\x3', '\x2', '\x2', '\x2', '\xC4D', '\xC4B', '\x3', 
		'\x2', '\x2', '\x2', '\xC4E', '\xC4F', '\a', '\xEA', '\x2', '\x2', '\xC4F', 
		'\xC54', '\x5', '\x20A', '\x106', '\x2', '\xC50', '\xC51', '\a', '\x150', 
		'\x2', '\x2', '\xC51', '\xC53', '\x5', '\x20A', '\x106', '\x2', '\xC52', 
		'\xC50', '\x3', '\x2', '\x2', '\x2', '\xC53', '\xC56', '\x3', '\x2', '\x2', 
		'\x2', '\xC54', '\xC52', '\x3', '\x2', '\x2', '\x2', '\xC54', '\xC55', 
		'\x3', '\x2', '\x2', '\x2', '\xC55', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\xC56', '\xC54', '\x3', '\x2', '\x2', '\x2', '\xC57', '\xC58', '\x5', 
		'\x2E8', '\x175', '\x2', '\xC58', '\xC59', '\a', '\x18', '\x2', '\x2', 
		'\xC59', '\xC5A', '\x5', '\x20C', '\x107', '\x2', '\xC5A', '\x20B', '\x3', 
		'\x2', '\x2', '\x2', '\xC5B', '\xC68', '\x5', '\x2E8', '\x175', '\x2', 
		'\xC5C', '\xC5E', '\a', '\x152', '\x2', '\x2', '\xC5D', '\xC5F', '\x5', 
		'\x2E8', '\x175', '\x2', '\xC5E', '\xC5D', '\x3', '\x2', '\x2', '\x2', 
		'\xC5E', '\xC5F', '\x3', '\x2', '\x2', '\x2', '\xC5F', '\xC61', '\x3', 
		'\x2', '\x2', '\x2', '\xC60', '\xC62', '\x5', '\x246', '\x124', '\x2', 
		'\xC61', '\xC60', '\x3', '\x2', '\x2', '\x2', '\xC61', '\xC62', '\x3', 
		'\x2', '\x2', '\x2', '\xC62', '\xC64', '\x3', '\x2', '\x2', '\x2', '\xC63', 
		'\xC65', '\x5', '\x20E', '\x108', '\x2', '\xC64', '\xC63', '\x3', '\x2', 
		'\x2', '\x2', '\xC64', '\xC65', '\x3', '\x2', '\x2', '\x2', '\xC65', '\xC66', 
		'\x3', '\x2', '\x2', '\x2', '\xC66', '\xC68', '\a', '\x153', '\x2', '\x2', 
		'\xC67', '\xC5B', '\x3', '\x2', '\x2', '\x2', '\xC67', '\xC5C', '\x3', 
		'\x2', '\x2', '\x2', '\xC68', '\x20D', '\x3', '\x2', '\x2', '\x2', '\xC69', 
		'\xC6C', '\x5', '\x210', '\x109', '\x2', '\xC6A', '\xC6C', '\x5', '\x212', 
		'\x10A', '\x2', '\xC6B', '\xC69', '\x3', '\x2', '\x2', '\x2', '\xC6B', 
		'\xC6A', '\x3', '\x2', '\x2', '\x2', '\xC6C', '\x20F', '\x3', '\x2', '\x2', 
		'\x2', '\xC6D', '\xC6E', '\a', 'm', '\x2', '\x2', '\xC6E', '\xC76', '\x5', 
		'\x214', '\x10B', '\x2', '\xC6F', '\xC70', '\a', 'm', '\x2', '\x2', '\xC70', 
		'\xC71', '\a', '\xCE', '\x2', '\x2', '\xC71', '\xC72', '\x5', '\x216', 
		'\x10C', '\x2', '\xC72', '\xC73', '\a', '\a', '\x2', '\x2', '\xC73', '\xC74', 
		'\x5', '\x216', '\x10C', '\x2', '\xC74', '\xC76', '\x3', '\x2', '\x2', 
		'\x2', '\xC75', '\xC6D', '\x3', '\x2', '\x2', '\x2', '\xC75', '\xC6F', 
		'\x3', '\x2', '\x2', '\x2', '\xC76', '\x211', '\x3', '\x2', '\x2', '\x2', 
		'\xC77', '\xC78', '\a', '\xCB', '\x2', '\x2', '\xC78', '\xC80', '\x5', 
		'\x214', '\x10B', '\x2', '\xC79', '\xC7A', '\a', '\xCB', '\x2', '\x2', 
		'\xC7A', '\xC7B', '\a', '\xCE', '\x2', '\x2', '\xC7B', '\xC7C', '\x5', 
		'\x216', '\x10C', '\x2', '\xC7C', '\xC7D', '\a', '\a', '\x2', '\x2', '\xC7D', 
		'\xC7E', '\x5', '\x216', '\x10C', '\x2', '\xC7E', '\xC80', '\x3', '\x2', 
		'\x2', '\x2', '\xC7F', '\xC77', '\x3', '\x2', '\x2', '\x2', '\xC7F', '\xC79', 
		'\x3', '\x2', '\x2', '\x2', '\xC80', '\x213', '\x3', '\x2', '\x2', '\x2', 
		'\xC81', '\xC82', '\a', '\xEB', '\x2', '\x2', '\xC82', '\xC88', '\a', 
		'\xEC', '\x2', '\x2', '\xC83', '\xC84', '\a', '\xEE', '\x2', '\x2', '\xC84', 
		'\xC88', '\a', 'l', '\x2', '\x2', '\xC85', '\xC86', '\a', '\x171', '\x2', 
		'\x2', '\xC86', '\xC88', '\a', '\xEC', '\x2', '\x2', '\xC87', '\xC81', 
		'\x3', '\x2', '\x2', '\x2', '\xC87', '\xC83', '\x3', '\x2', '\x2', '\x2', 
		'\xC87', '\xC85', '\x3', '\x2', '\x2', '\x2', '\xC88', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\xC89', '\xC8A', '\a', '\xEB', '\x2', '\x2', '\xC8A', 
		'\xC90', '\t', '\x12', '\x2', '\x2', '\xC8B', '\xC8C', '\a', '\xEE', '\x2', 
		'\x2', '\xC8C', '\xC90', '\a', 'l', '\x2', '\x2', '\xC8D', '\xC8E', '\a', 
		'\x171', '\x2', '\x2', '\xC8E', '\xC90', '\t', '\x12', '\x2', '\x2', '\xC8F', 
		'\xC89', '\x3', '\x2', '\x2', '\x2', '\xC8F', '\xC8B', '\x3', '\x2', '\x2', 
		'\x2', '\xC8F', '\xC8D', '\x3', '\x2', '\x2', '\x2', '\xC90', '\x217', 
		'\x3', '\x2', '\x2', '\x2', '\xC91', '\xC97', '\a', '\x162', '\x2', '\x2', 
		'\xC92', '\xC93', '\x5', '\x240', '\x121', '\x2', '\xC93', '\xC94', '\a', 
		'\x14E', '\x2', '\x2', '\xC94', '\xC95', '\a', '\x162', '\x2', '\x2', 
		'\xC95', '\xC97', '\x3', '\x2', '\x2', '\x2', '\xC96', '\xC91', '\x3', 
		'\x2', '\x2', '\x2', '\xC96', '\xC92', '\x3', '\x2', '\x2', '\x2', '\xC97', 
		'\x219', '\x3', '\x2', '\x2', '\x2', '\xC98', '\xC99', '\x5', '\x2E8', 
		'\x175', '\x2', '\xC99', '\x21B', '\x3', '\x2', '\x2', '\x2', '\xC9A', 
		'\xC9F', '\x5', '\x2C8', '\x165', '\x2', '\xC9B', '\xC9C', '\a', '\x150', 
		'\x2', '\x2', '\xC9C', '\xC9E', '\x5', '\x2C8', '\x165', '\x2', '\xC9D', 
		'\xC9B', '\x3', '\x2', '\x2', '\x2', '\xC9E', '\xCA1', '\x3', '\x2', '\x2', 
		'\x2', '\xC9F', '\xC9D', '\x3', '\x2', '\x2', '\x2', '\xC9F', '\xCA0', 
		'\x3', '\x2', '\x2', '\x2', '\xCA0', '\x21D', '\x3', '\x2', '\x2', '\x2', 
		'\xCA1', '\xC9F', '\x3', '\x2', '\x2', '\x2', '\xCA2', '\xCA7', '\x5', 
		'\x2E8', '\x175', '\x2', '\xCA3', '\xCA4', '\a', '\x150', '\x2', '\x2', 
		'\xCA4', '\xCA6', '\x5', '\x2E8', '\x175', '\x2', '\xCA5', '\xCA3', '\x3', 
		'\x2', '\x2', '\x2', '\xCA6', '\xCA9', '\x3', '\x2', '\x2', '\x2', '\xCA7', 
		'\xCA5', '\x3', '\x2', '\x2', '\x2', '\xCA7', '\xCA8', '\x3', '\x2', '\x2', 
		'\x2', '\xCA8', '\x21F', '\x3', '\x2', '\x2', '\x2', '\xCA9', '\xCA7', 
		'\x3', '\x2', '\x2', '\x2', '\xCAA', '\xCAB', '\a', '\x17', '\x2', '\x2', 
		'\xCAB', '\xCAC', '\x5', '\x222', '\x112', '\x2', '\xCAC', '\x221', '\x3', 
		'\x2', '\x2', '\x2', '\xCAD', '\xCAE', '\x5', '\x22E', '\x118', '\x2', 
		'\xCAE', '\xCB1', '\x5', '\x22A', '\x116', '\x2', '\xCAF', '\xCB0', '\a', 
		'\x150', '\x2', '\x2', '\xCB0', '\xCB2', '\x5', '\x22A', '\x116', '\x2', 
		'\xCB1', '\xCAF', '\x3', '\x2', '\x2', '\x2', '\xCB2', '\xCB3', '\x3', 
		'\x2', '\x2', '\x2', '\xCB3', '\xCB1', '\x3', '\x2', '\x2', '\x2', '\xCB3', 
		'\xCB4', '\x3', '\x2', '\x2', '\x2', '\xCB4', '\xCB7', '\x3', '\x2', '\x2', 
		'\x2', '\xCB5', '\xCB7', '\x5', '\x226', '\x114', '\x2', '\xCB6', '\xCAD', 
		'\x3', '\x2', '\x2', '\x2', '\xCB6', '\xCB5', '\x3', '\x2', '\x2', '\x2', 
		'\xCB7', '\x223', '\x3', '\x2', '\x2', '\x2', '\xCB8', '\xCBC', '\x5', 
		'\x23C', '\x11F', '\x2', '\xCB9', '\xCBB', '\x5', '\x232', '\x11A', '\x2', 
		'\xCBA', '\xCB9', '\x3', '\x2', '\x2', '\x2', '\xCBB', '\xCBE', '\x3', 
		'\x2', '\x2', '\x2', '\xCBC', '\xCBA', '\x3', '\x2', '\x2', '\x2', '\xCBC', 
		'\xCBD', '\x3', '\x2', '\x2', '\x2', '\xCBD', '\xCD9', '\x3', '\x2', '\x2', 
		'\x2', '\xCBE', '\xCBC', '\x3', '\x2', '\x2', '\x2', '\xCBF', '\xCC3', 
		'\x5', '\x256', '\x12C', '\x2', '\xCC0', '\xCC2', '\x5', '\x232', '\x11A', 
		'\x2', '\xCC1', '\xCC0', '\x3', '\x2', '\x2', '\x2', '\xCC2', '\xCC5', 
		'\x3', '\x2', '\x2', '\x2', '\xCC3', '\xCC1', '\x3', '\x2', '\x2', '\x2', 
		'\xCC3', '\xCC4', '\x3', '\x2', '\x2', '\x2', '\xCC4', '\xCD9', '\x3', 
		'\x2', '\x2', '\x2', '\xCC5', '\xCC3', '\x3', '\x2', '\x2', '\x2', '\xCC6', 
		'\xCCA', '\x5', '\x244', '\x123', '\x2', '\xCC7', '\xCC9', '\x5', '\x232', 
		'\x11A', '\x2', '\xCC8', '\xCC7', '\x3', '\x2', '\x2', '\x2', '\xCC9', 
		'\xCCC', '\x3', '\x2', '\x2', '\x2', '\xCCA', '\xCC8', '\x3', '\x2', '\x2', 
		'\x2', '\xCCA', '\xCCB', '\x3', '\x2', '\x2', '\x2', '\xCCB', '\xCD9', 
		'\x3', '\x2', '\x2', '\x2', '\xCCC', '\xCCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCCD', '\xCD1', '\x5', '\x24A', '\x126', '\x2', '\xCCE', '\xCD0', '\x5', 
		'\x232', '\x11A', '\x2', '\xCCF', '\xCCE', '\x3', '\x2', '\x2', '\x2', 
		'\xCD0', '\xCD3', '\x3', '\x2', '\x2', '\x2', '\xCD1', '\xCCF', '\x3', 
		'\x2', '\x2', '\x2', '\xCD1', '\xCD2', '\x3', '\x2', '\x2', '\x2', '\xCD2', 
		'\xCD9', '\x3', '\x2', '\x2', '\x2', '\xCD3', '\xCD1', '\x3', '\x2', '\x2', 
		'\x2', '\xCD4', '\xCD5', '\a', '\x152', '\x2', '\x2', '\xCD5', '\xCD6', 
		'\x5', '\x226', '\x114', '\x2', '\xCD6', '\xCD7', '\a', '\x153', '\x2', 
		'\x2', '\xCD7', '\xCD9', '\x3', '\x2', '\x2', '\x2', '\xCD8', '\xCB8', 
		'\x3', '\x2', '\x2', '\x2', '\xCD8', '\xCBF', '\x3', '\x2', '\x2', '\x2', 
		'\xCD8', '\xCC6', '\x3', '\x2', '\x2', '\x2', '\xCD8', '\xCCD', '\x3', 
		'\x2', '\x2', '\x2', '\xCD8', '\xCD4', '\x3', '\x2', '\x2', '\x2', '\xCD9', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\xCDA', '\xCE5', '\x5', '\x224', 
		'\x113', '\x2', '\xCDB', '\xCDC', '\x5', '\x230', '\x119', '\x2', '\xCDC', 
		'\xCE1', '\x5', '\x228', '\x115', '\x2', '\xCDD', '\xCDE', '\a', '$', 
		'\x2', '\x2', '\xCDE', '\xCE2', '\x5', '\x2C8', '\x165', '\x2', '\xCDF', 
		'\xCE0', '\a', '\x34', '\x2', '\x2', '\xCE0', '\xCE2', '\x5', '\x156', 
		'\xAC', '\x2', '\xCE1', '\xCDD', '\x3', '\x2', '\x2', '\x2', '\xCE1', 
		'\xCDF', '\x3', '\x2', '\x2', '\x2', '\xCE1', '\xCE2', '\x3', '\x2', '\x2', 
		'\x2', '\xCE2', '\xCE4', '\x3', '\x2', '\x2', '\x2', '\xCE3', '\xCDB', 
		'\x3', '\x2', '\x2', '\x2', '\xCE4', '\xCE7', '\x3', '\x2', '\x2', '\x2', 
		'\xCE5', '\xCE3', '\x3', '\x2', '\x2', '\x2', '\xCE5', '\xCE6', '\x3', 
		'\x2', '\x2', '\x2', '\xCE6', '\x227', '\x3', '\x2', '\x2', '\x2', '\xCE7', 
		'\xCE5', '\x3', '\x2', '\x2', '\x2', '\xCE8', '\xCED', '\x5', '\x23C', 
		'\x11F', '\x2', '\xCE9', '\xCED', '\x5', '\x256', '\x12C', '\x2', '\xCEA', 
		'\xCED', '\x5', '\x244', '\x123', '\x2', '\xCEB', '\xCED', '\x5', '\x24A', 
		'\x126', '\x2', '\xCEC', '\xCE8', '\x3', '\x2', '\x2', '\x2', '\xCEC', 
		'\xCE9', '\x3', '\x2', '\x2', '\x2', '\xCEC', '\xCEA', '\x3', '\x2', '\x2', 
		'\x2', '\xCEC', '\xCEB', '\x3', '\x2', '\x2', '\x2', '\xCED', '\xCF1', 
		'\x3', '\x2', '\x2', '\x2', '\xCEE', '\xCF0', '\x5', '\x232', '\x11A', 
		'\x2', '\xCEF', '\xCEE', '\x3', '\x2', '\x2', '\x2', '\xCF0', '\xCF3', 
		'\x3', '\x2', '\x2', '\x2', '\xCF1', '\xCEF', '\x3', '\x2', '\x2', '\x2', 
		'\xCF1', '\xCF2', '\x3', '\x2', '\x2', '\x2', '\xCF2', '\x229', '\x3', 
		'\x2', '\x2', '\x2', '\xCF3', '\xCF1', '\x3', '\x2', '\x2', '\x2', '\xCF4', 
		'\xCF6', '\a', '\x1F', '\x2', '\x2', '\xCF5', '\xCF4', '\x3', '\x2', '\x2', 
		'\x2', '\xCF5', '\xCF6', '\x3', '\x2', '\x2', '\x2', '\xCF6', '\xCF7', 
		'\x3', '\x2', '\x2', '\x2', '\xCF7', '\xCF8', '\x5', '\x23E', '\x120', 
		'\x2', '\xCF8', '\xCF9', '\x5', '\x22C', '\x117', '\x2', '\xCF9', '\x22B', 
		'\x3', '\x2', '\x2', '\x2', '\xCFA', '\xCFB', '\a', '\x152', '\x2', '\x2', 
		'\xCFB', '\xCFC', '\x5', '\x21C', '\x10F', '\x2', '\xCFC', '\xCFD', '\a', 
		'\x153', '\x2', '\x2', '\xCFD', '\x22D', '\x3', '\x2', '\x2', '\x2', '\xCFE', 
		'\xCFF', '\a', '\x1E', '\x2', '\x2', '\xCFF', '\x22F', '\x3', '\x2', '\x2', 
		'\x2', '\xD00', '\xD19', '\a', ' ', '\x2', '\x2', '\xD01', '\xD02', '\a', 
		'\xFB', '\x2', '\x2', '\xD02', '\xD19', '\a', ' ', '\x2', '\x2', '\xD03', 
		'\xD19', '\a', '\x150', '\x2', '\x2', '\xD04', '\xD05', '\a', '\xD1', 
		'\x2', '\x2', '\xD05', '\xD19', '\a', ' ', '\x2', '\x2', '\xD06', '\xD08', 
		'\a', '!', '\x2', '\x2', '\xD07', '\xD09', '\a', '\x1D', '\x2', '\x2', 
		'\xD08', '\xD07', '\x3', '\x2', '\x2', '\x2', '\xD08', '\xD09', '\x3', 
		'\x2', '\x2', '\x2', '\xD09', '\xD0A', '\x3', '\x2', '\x2', '\x2', '\xD0A', 
		'\xD19', '\a', ' ', '\x2', '\x2', '\xD0B', '\xD0D', '\a', '\"', '\x2', 
		'\x2', '\xD0C', '\xD0E', '\a', '\x1D', '\x2', '\x2', '\xD0D', '\xD0C', 
		'\x3', '\x2', '\x2', '\x2', '\xD0D', '\xD0E', '\x3', '\x2', '\x2', '\x2', 
		'\xD0E', '\xD0F', '\x3', '\x2', '\x2', '\x2', '\xD0F', '\xD19', '\a', 
		' ', '\x2', '\x2', '\xD10', '\xD12', '\a', '#', '\x2', '\x2', '\xD11', 
		'\xD13', '\a', '\x1D', '\x2', '\x2', '\xD12', '\xD11', '\x3', '\x2', '\x2', 
		'\x2', '\xD12', '\xD13', '\x3', '\x2', '\x2', '\x2', '\xD13', '\xD14', 
		'\x3', '\x2', '\x2', '\x2', '\xD14', '\xD19', '\a', ' ', '\x2', '\x2', 
		'\xD15', '\xD16', '\a', '!', '\x2', '\x2', '\xD16', '\xD17', '\a', '\xD7', 
		'\x2', '\x2', '\xD17', '\xD19', '\a', ' ', '\x2', '\x2', '\xD18', '\xD00', 
		'\x3', '\x2', '\x2', '\x2', '\xD18', '\xD01', '\x3', '\x2', '\x2', '\x2', 
		'\xD18', '\xD03', '\x3', '\x2', '\x2', '\x2', '\xD18', '\xD04', '\x3', 
		'\x2', '\x2', '\x2', '\xD18', '\xD06', '\x3', '\x2', '\x2', '\x2', '\xD18', 
		'\xD0B', '\x3', '\x2', '\x2', '\x2', '\xD18', '\xD10', '\x3', '\x2', '\x2', 
		'\x2', '\xD18', '\xD15', '\x3', '\x2', '\x2', '\x2', '\xD19', '\x231', 
		'\x3', '\x2', '\x2', '\x2', '\xD1A', '\xD1B', '\a', '\xD8', '\x2', '\x2', 
		'\xD1B', '\xD1C', '\a', '\xB4', '\x2', '\x2', '\xD1C', '\xD1D', '\a', 
		'\x1D', '\x2', '\x2', '\xD1D', '\xD1E', '\x5', '\x282', '\x142', '\x2', 
		'\xD1E', '\xD28', '\x5', '\x234', '\x11B', '\x2', '\xD1F', '\xD20', '\a', 
		'\x18', '\x2', '\x2', '\xD20', '\xD25', '\x5', '\x2E8', '\x175', '\x2', 
		'\xD21', '\xD22', '\a', '\x150', '\x2', '\x2', '\xD22', '\xD24', '\x5', 
		'\x2E8', '\x175', '\x2', '\xD23', '\xD21', '\x3', '\x2', '\x2', '\x2', 
		'\xD24', '\xD27', '\x3', '\x2', '\x2', '\x2', '\xD25', '\xD23', '\x3', 
		'\x2', '\x2', '\x2', '\xD25', '\xD26', '\x3', '\x2', '\x2', '\x2', '\xD26', 
		'\xD29', '\x3', '\x2', '\x2', '\x2', '\xD27', '\xD25', '\x3', '\x2', '\x2', 
		'\x2', '\xD28', '\xD1F', '\x3', '\x2', '\x2', '\x2', '\xD28', '\xD29', 
		'\x3', '\x2', '\x2', '\x2', '\xD29', '\xD56', '\x3', '\x2', '\x2', '\x2', 
		'\xD2A', '\xD2C', '\a', '\x150', '\x2', '\x2', '\xD2B', '\xD2A', '\x3', 
		'\x2', '\x2', '\x2', '\xD2B', '\xD2C', '\x3', '\x2', '\x2', '\x2', '\xD2C', 
		'\xD2D', '\x3', '\x2', '\x2', '\x2', '\xD2D', '\xD2E', '\a', '\xD8', '\x2', 
		'\x2', '\xD2E', '\xD2F', '\a', '\xB4', '\x2', '\x2', '\xD2F', '\xD30', 
		'\x5', '\x282', '\x142', '\x2', '\xD30', '\xD3A', '\x5', '\x234', '\x11B', 
		'\x2', '\xD31', '\xD32', '\a', '\x18', '\x2', '\x2', '\xD32', '\xD37', 
		'\x5', '\x2E8', '\x175', '\x2', '\xD33', '\xD34', '\a', '\x150', '\x2', 
		'\x2', '\xD34', '\xD36', '\x5', '\x2E8', '\x175', '\x2', '\xD35', '\xD33', 
		'\x3', '\x2', '\x2', '\x2', '\xD36', '\xD39', '\x3', '\x2', '\x2', '\x2', 
		'\xD37', '\xD35', '\x3', '\x2', '\x2', '\x2', '\xD37', '\xD38', '\x3', 
		'\x2', '\x2', '\x2', '\xD38', '\xD3B', '\x3', '\x2', '\x2', '\x2', '\xD39', 
		'\xD37', '\x3', '\x2', '\x2', '\x2', '\xD3A', '\xD31', '\x3', '\x2', '\x2', 
		'\x2', '\xD3A', '\xD3B', '\x3', '\x2', '\x2', '\x2', '\xD3B', '\xD56', 
		'\x3', '\x2', '\x2', '\x2', '\xD3C', '\xD3E', '\a', '\x150', '\x2', '\x2', 
		'\xD3D', '\xD3C', '\x3', '\x2', '\x2', '\x2', '\xD3D', '\xD3E', '\x3', 
		'\x2', '\x2', '\x2', '\xD3E', '\xD3F', '\x3', '\x2', '\x2', '\x2', '\xD3F', 
		'\xD40', '\a', '\xD8', '\x2', '\x2', '\xD40', '\xD41', '\a', '\'', '\x2', 
		'\x2', '\xD41', '\xD42', '\a', '\x152', '\x2', '\x2', '\xD42', '\xD43', 
		'\x5', '\x250', '\x129', '\x2', '\xD43', '\xD45', '\a', '\x153', '\x2', 
		'\x2', '\xD44', '\xD46', '\a', '\x18', '\x2', '\x2', '\xD45', '\xD44', 
		'\x3', '\x2', '\x2', '\x2', '\xD45', '\xD46', '\x3', '\x2', '\x2', '\x2', 
		'\xD46', '\xD47', '\x3', '\x2', '\x2', '\x2', '\xD47', '\xD53', '\x5', 
		'\x234', '\x11B', '\x2', '\xD48', '\xD49', '\a', '\x152', '\x2', '\x2', 
		'\xD49', '\xD4E', '\x5', '\x2E8', '\x175', '\x2', '\xD4A', '\xD4B', '\a', 
		'\x150', '\x2', '\x2', '\xD4B', '\xD4D', '\x5', '\x2E8', '\x175', '\x2', 
		'\xD4C', '\xD4A', '\x3', '\x2', '\x2', '\x2', '\xD4D', '\xD50', '\x3', 
		'\x2', '\x2', '\x2', '\xD4E', '\xD4C', '\x3', '\x2', '\x2', '\x2', '\xD4E', 
		'\xD4F', '\x3', '\x2', '\x2', '\x2', '\xD4F', '\xD51', '\x3', '\x2', '\x2', 
		'\x2', '\xD50', '\xD4E', '\x3', '\x2', '\x2', '\x2', '\xD51', '\xD52', 
		'\a', '\x153', '\x2', '\x2', '\xD52', '\xD54', '\x3', '\x2', '\x2', '\x2', 
		'\xD53', '\xD48', '\x3', '\x2', '\x2', '\x2', '\xD53', '\xD54', '\x3', 
		'\x2', '\x2', '\x2', '\xD54', '\xD56', '\x3', '\x2', '\x2', '\x2', '\xD55', 
		'\xD1A', '\x3', '\x2', '\x2', '\x2', '\xD55', '\xD2B', '\x3', '\x2', '\x2', 
		'\x2', '\xD55', '\xD3D', '\x3', '\x2', '\x2', '\x2', '\xD56', '\x233', 
		'\x3', '\x2', '\x2', '\x2', '\xD57', '\xD58', '\x5', '\x2E8', '\x175', 
		'\x2', '\xD58', '\x235', '\x3', '\x2', '\x2', '\x2', '\xD59', '\xD5A', 
		'\a', '\x82', '\x2', '\x2', '\xD5A', '\xD5B', '\a', '\x152', '\x2', '\x2', 
		'\xD5B', '\xD5C', '\a', '\x83', '\x2', '\x2', '\xD5C', '\xD5D', '\a', 
		'\x171', '\x2', '\x2', '\xD5D', '\xD5E', '\a', '\x84', '\x2', '\x2', '\xD5E', 
		'\xD5F', '\a', '\x85', '\x2', '\x2', '\xD5F', '\xD69', '\a', '\x171', 
		'\x2', '\x2', '\xD60', '\xD61', '\a', '$', '\x2', '\x2', '\xD61', '\xD66', 
		'\x5', '\x2C8', '\x165', '\x2', '\xD62', '\xD63', '\a', '\x150', '\x2', 
		'\x2', '\xD63', '\xD65', '\x5', '\x2C8', '\x165', '\x2', '\xD64', '\xD62', 
		'\x3', '\x2', '\x2', '\x2', '\xD65', '\xD68', '\x3', '\x2', '\x2', '\x2', 
		'\xD66', '\xD64', '\x3', '\x2', '\x2', '\x2', '\xD66', '\xD67', '\x3', 
		'\x2', '\x2', '\x2', '\xD67', '\xD6A', '\x3', '\x2', '\x2', '\x2', '\xD68', 
		'\xD66', '\x3', '\x2', '\x2', '\x2', '\xD69', '\xD60', '\x3', '\x2', '\x2', 
		'\x2', '\xD69', '\xD6A', '\x3', '\x2', '\x2', '\x2', '\xD6A', '\xD6B', 
		'\x3', '\x2', '\x2', '\x2', '\xD6B', '\xD6C', '\a', '\x153', '\x2', '\x2', 
		'\xD6C', '\x237', '\x3', '\x2', '\x2', '\x2', '\xD6D', '\xD6E', '\a', 
		'\x82', '\x2', '\x2', '\xD6E', '\xD6F', '\a', '\x152', '\x2', '\x2', '\xD6F', 
		'\xD70', '\a', '\x171', '\x2', '\x2', '\xD70', '\xD71', '\t', '\x13', 
		'\x2', '\x2', '\xD71', '\xD77', '\a', '\x153', '\x2', '\x2', '\xD72', 
		'\xD73', '\a', '\x82', '\x2', '\x2', '\xD73', '\xD74', '\a', '\x152', 
		'\x2', '\x2', '\xD74', '\xD75', '\a', '\x170', '\x2', '\x2', '\xD75', 
		'\xD77', '\a', '\x153', '\x2', '\x2', '\xD76', '\xD6D', '\x3', '\x2', 
		'\x2', '\x2', '\xD76', '\xD72', '\x3', '\x2', '\x2', '\x2', '\xD77', '\x239', 
		'\x3', '\x2', '\x2', '\x2', '\xD78', '\xD7B', '\x5', '\x236', '\x11C', 
		'\x2', '\xD79', '\xD7B', '\x5', '\x238', '\x11D', '\x2', '\xD7A', '\xD78', 
		'\x3', '\x2', '\x2', '\x2', '\xD7A', '\xD79', '\x3', '\x2', '\x2', '\x2', 
		'\xD7B', '\x23B', '\x3', '\x2', '\x2', '\x2', '\xD7C', '\xD7E', '\x5', 
		'\x240', '\x121', '\x2', '\xD7D', '\xD7F', '\x5', '\x132', '\x9A', '\x2', 
		'\xD7E', '\xD7D', '\x3', '\x2', '\x2', '\x2', '\xD7E', '\xD7F', '\x3', 
		'\x2', '\x2', '\x2', '\xD7F', '\xD81', '\x3', '\x2', '\x2', '\x2', '\xD80', 
		'\xD82', '\x5', '\x23A', '\x11E', '\x2', '\xD81', '\xD80', '\x3', '\x2', 
		'\x2', '\x2', '\xD81', '\xD82', '\x3', '\x2', '\x2', '\x2', '\xD82', '\xD87', 
		'\x3', '\x2', '\x2', '\x2', '\xD83', '\xD85', '\a', '\x18', '\x2', '\x2', 
		'\xD84', '\xD83', '\x3', '\x2', '\x2', '\x2', '\xD84', '\xD85', '\x3', 
		'\x2', '\x2', '\x2', '\xD85', '\xD86', '\x3', '\x2', '\x2', '\x2', '\xD86', 
		'\xD88', '\x5', '\x2E8', '\x175', '\x2', '\xD87', '\xD84', '\x3', '\x2', 
		'\x2', '\x2', '\xD87', '\xD88', '\x3', '\x2', '\x2', '\x2', '\xD88', '\x23D', 
		'\x3', '\x2', '\x2', '\x2', '\xD89', '\xD8B', '\x5', '\x240', '\x121', 
		'\x2', '\xD8A', '\xD8C', '\x5', '\x23A', '\x11E', '\x2', '\xD8B', '\xD8A', 
		'\x3', '\x2', '\x2', '\x2', '\xD8B', '\xD8C', '\x3', '\x2', '\x2', '\x2', 
		'\xD8C', '\xD91', '\x3', '\x2', '\x2', '\x2', '\xD8D', '\xD8F', '\a', 
		'\x18', '\x2', '\x2', '\xD8E', '\xD8D', '\x3', '\x2', '\x2', '\x2', '\xD8E', 
		'\xD8F', '\x3', '\x2', '\x2', '\x2', '\xD8F', '\xD90', '\x3', '\x2', '\x2', 
		'\x2', '\xD90', '\xD92', '\x5', '\x2E8', '\x175', '\x2', '\xD91', '\xD8E', 
		'\x3', '\x2', '\x2', '\x2', '\xD91', '\xD92', '\x3', '\x2', '\x2', '\x2', 
		'\xD92', '\x23F', '\x3', '\x2', '\x2', '\x2', '\xD93', '\xD94', '\x5', 
		'\x2E8', '\x175', '\x2', '\xD94', '\xD95', '\a', '\x14E', '\x2', '\x2', 
		'\xD95', '\xD96', '\x5', '\x2E8', '\x175', '\x2', '\xD96', '\xD99', '\x3', 
		'\x2', '\x2', '\x2', '\xD97', '\xD99', '\x5', '\x2E8', '\x175', '\x2', 
		'\xD98', '\xD93', '\x3', '\x2', '\x2', '\x2', '\xD98', '\xD97', '\x3', 
		'\x2', '\x2', '\x2', '\xD99', '\x241', '\x3', '\x2', '\x2', '\x2', '\xD9A', 
		'\xD9B', '\x5', '\x2E8', '\x175', '\x2', '\xD9B', '\xD9C', '\a', '\x14E', 
		'\x2', '\x2', '\xD9C', '\xD9E', '\x3', '\x2', '\x2', '\x2', '\xD9D', '\xD9A', 
		'\x3', '\x2', '\x2', '\x2', '\xD9D', '\xD9E', '\x3', '\x2', '\x2', '\x2', 
		'\xD9E', '\xD9F', '\x3', '\x2', '\x2', '\x2', '\xD9F', '\xDA0', '\x5', 
		'\x2E8', '\x175', '\x2', '\xDA0', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\xDA1', '\xDA2', '\a', '\x152', '\x2', '\x2', '\xDA2', '\xDA3', '\x5', 
		'\x1B2', '\xDA', '\x2', '\xDA3', '\xDA5', '\a', '\x153', '\x2', '\x2', 
		'\xDA4', '\xDA6', '\a', '\x18', '\x2', '\x2', '\xDA5', '\xDA4', '\x3', 
		'\x2', '\x2', '\x2', '\xDA5', '\xDA6', '\x3', '\x2', '\x2', '\x2', '\xDA6', 
		'\xDA7', '\x3', '\x2', '\x2', '\x2', '\xDA7', '\xDA8', '\x5', '\x2E8', 
		'\x175', '\x2', '\xDA8', '\x245', '\x3', '\x2', '\x2', '\x2', '\xDA9', 
		'\xDAB', '\x5', '\x27C', '\x13F', '\x2', '\xDAA', '\xDAC', '\x5', '\x278', 
		'\x13D', '\x2', '\xDAB', '\xDAA', '\x3', '\x2', '\x2', '\x2', '\xDAB', 
		'\xDAC', '\x3', '\x2', '\x2', '\x2', '\xDAC', '\xDB5', '\x3', '\x2', '\x2', 
		'\x2', '\xDAD', '\xDB5', '\x5', '\x278', '\x13D', '\x2', '\xDAE', '\xDB0', 
		'\x5', '\x27E', '\x140', '\x2', '\xDAF', '\xDB1', '\x5', '\x280', '\x141', 
		'\x2', '\xDB0', '\xDAF', '\x3', '\x2', '\x2', '\x2', '\xDB0', '\xDB1', 
		'\x3', '\x2', '\x2', '\x2', '\xDB1', '\xDB5', '\x3', '\x2', '\x2', '\x2', 
		'\xDB2', '\xDB5', '\x5', '\x280', '\x141', '\x2', '\xDB3', '\xDB5', '\x5', 
		'\x27A', '\x13E', '\x2', '\xDB4', '\xDA9', '\x3', '\x2', '\x2', '\x2', 
		'\xDB4', '\xDAD', '\x3', '\x2', '\x2', '\x2', '\xDB4', '\xDAE', '\x3', 
		'\x2', '\x2', '\x2', '\xDB4', '\xDB2', '\x3', '\x2', '\x2', '\x2', '\xDB4', 
		'\xDB3', '\x3', '\x2', '\x2', '\x2', '\xDB5', '\x247', '\x3', '\x2', '\x2', 
		'\x2', '\xDB6', '\xDBA', '\x5', '\x244', '\x123', '\x2', '\xDB7', '\xDBA', 
		'\x5', '\x23C', '\x11F', '\x2', '\xDB8', '\xDBA', '\x5', '\x24A', '\x126', 
		'\x2', '\xDB9', '\xDB6', '\x3', '\x2', '\x2', '\x2', '\xDB9', '\xDB7', 
		'\x3', '\x2', '\x2', '\x2', '\xDB9', '\xDB8', '\x3', '\x2', '\x2', '\x2', 
		'\xDBA', '\x249', '\x3', '\x2', '\x2', '\x2', '\xDBB', '\xDBC', '\x5', 
		'\x2E8', '\x175', '\x2', '\xDBC', '\xDBD', '\a', '\x152', '\x2', '\x2', 
		'\xDBD', '\xDBE', '\a', '$', '\x2', '\x2', '\xDBE', '\xDC0', '\x5', '\x248', 
		'\x125', '\x2', '\xDBF', '\xDC1', '\x5', '\x246', '\x124', '\x2', '\xDC0', 
		'\xDBF', '\x3', '\x2', '\x2', '\x2', '\xDC0', '\xDC1', '\x3', '\x2', '\x2', 
		'\x2', '\xDC1', '\xDD1', '\x3', '\x2', '\x2', '\x2', '\xDC2', '\xDC3', 
		'\a', '\x172', '\x2', '\x2', '\xDC3', '\xDC4', '\a', '\x152', '\x2', '\x2', 
		'\xDC4', '\xDC5', '\x5', '\x2C8', '\x165', '\x2', '\xDC5', '\xDCE', '\a', 
		'\x153', '\x2', '\x2', '\xDC6', '\xDC7', '\a', '\x150', '\x2', '\x2', 
		'\xDC7', '\xDC8', '\a', '\x172', '\x2', '\x2', '\xDC8', '\xDC9', '\a', 
		'\x152', '\x2', '\x2', '\xDC9', '\xDCA', '\x5', '\x2C8', '\x165', '\x2', 
		'\xDCA', '\xDCB', '\a', '\x153', '\x2', '\x2', '\xDCB', '\xDCD', '\x3', 
		'\x2', '\x2', '\x2', '\xDCC', '\xDC6', '\x3', '\x2', '\x2', '\x2', '\xDCD', 
		'\xDD0', '\x3', '\x2', '\x2', '\x2', '\xDCE', '\xDCC', '\x3', '\x2', '\x2', 
		'\x2', '\xDCE', '\xDCF', '\x3', '\x2', '\x2', '\x2', '\xDCF', '\xDD2', 
		'\x3', '\x2', '\x2', '\x2', '\xDD0', '\xDCE', '\x3', '\x2', '\x2', '\x2', 
		'\xDD1', '\xDC2', '\x3', '\x2', '\x2', '\x2', '\xDD1', '\xDD2', '\x3', 
		'\x2', '\x2', '\x2', '\xDD2', '\xDD3', '\x3', '\x2', '\x2', '\x2', '\xDD3', 
		'\xDD5', '\a', '\x153', '\x2', '\x2', '\xDD4', '\xDD6', '\x5', '\x2E8', 
		'\x175', '\x2', '\xDD5', '\xDD4', '\x3', '\x2', '\x2', '\x2', '\xDD5', 
		'\xDD6', '\x3', '\x2', '\x2', '\x2', '\xDD6', '\x24B', '\x3', '\x2', '\x2', 
		'\x2', '\xDD7', '\xDD8', '\a', '\x16', '\x2', '\x2', '\xDD8', '\xDD9', 
		'\x5', '\x24E', '\x128', '\x2', '\xDD9', '\x24D', '\x3', '\x2', '\x2', 
		'\x2', '\xDDA', '\xDDB', '\x5', '\x2C8', '\x165', '\x2', '\xDDB', '\x24F', 
		'\x3', '\x2', '\x2', '\x2', '\xDDC', '\xDDD', '\a', '\x109', '\x2', '\x2', 
		'\xDDD', '\xDDE', '\x5', '\x252', '\x12A', '\x2', '\xDDE', '\x251', '\x3', 
		'\x2', '\x2', '\x2', '\xDDF', '\xDE4', '\x5', '\x254', '\x12B', '\x2', 
		'\xDE0', '\xDE1', '\a', '\x150', '\x2', '\x2', '\xDE1', '\xDE3', '\x5', 
		'\x254', '\x12B', '\x2', '\xDE2', '\xDE0', '\x3', '\x2', '\x2', '\x2', 
		'\xDE3', '\xDE6', '\x3', '\x2', '\x2', '\x2', '\xDE4', '\xDE2', '\x3', 
		'\x2', '\x2', '\x2', '\xDE4', '\xDE5', '\x3', '\x2', '\x2', '\x2', '\xDE5', 
		'\x253', '\x3', '\x2', '\x2', '\x2', '\xDE6', '\xDE4', '\x3', '\x2', '\x2', 
		'\x2', '\xDE7', '\xDE8', '\x5', '\x26C', '\x137', '\x2', '\xDE8', '\x255', 
		'\x3', '\x2', '\x2', '\x2', '\xDE9', '\xDEA', '\a', '\'', '\x2', '\x2', 
		'\xDEA', '\xDEB', '\a', '\x152', '\x2', '\x2', '\xDEB', '\xDEC', '\x5', 
		'\x250', '\x129', '\x2', '\xDEC', '\xDEE', '\a', '\x153', '\x2', '\x2', 
		'\xDED', '\xDEF', '\a', '\x18', '\x2', '\x2', '\xDEE', '\xDED', '\x3', 
		'\x2', '\x2', '\x2', '\xDEE', '\xDEF', '\x3', '\x2', '\x2', '\x2', '\xDEF', 
		'\xDF0', '\x3', '\x2', '\x2', '\x2', '\xDF0', '\xDFA', '\x5', '\x234', 
		'\x11B', '\x2', '\xDF1', '\xDF2', '\a', '\x152', '\x2', '\x2', '\xDF2', 
		'\xDF7', '\x5', '\x2E8', '\x175', '\x2', '\xDF3', '\xDF4', '\a', '\x150', 
		'\x2', '\x2', '\xDF4', '\xDF6', '\x5', '\x2E8', '\x175', '\x2', '\xDF5', 
		'\xDF3', '\x3', '\x2', '\x2', '\x2', '\xDF6', '\xDF9', '\x3', '\x2', '\x2', 
		'\x2', '\xDF7', '\xDF5', '\x3', '\x2', '\x2', '\x2', '\xDF7', '\xDF8', 
		'\x3', '\x2', '\x2', '\x2', '\xDF8', '\xDFB', '\x3', '\x2', '\x2', '\x2', 
		'\xDF9', '\xDF7', '\x3', '\x2', '\x2', '\x2', '\xDFA', '\xDF1', '\x3', 
		'\x2', '\x2', '\x2', '\xDFA', '\xDFB', '\x3', '\x2', '\x2', '\x2', '\xDFB', 
		'\xDFC', '\x3', '\x2', '\x2', '\x2', '\xDFC', '\xDFD', '\a', '\x153', 
		'\x2', '\x2', '\xDFD', '\x257', '\x3', '\x2', '\x2', '\x2', '\xDFE', '\xDFF', 
		'\a', '\x13', '\x2', '\x2', '\xDFF', '\xE00', '\a', '\x14', '\x2', '\x2', 
		'\xE00', '\xE01', '\x5', '\x25A', '\x12E', '\x2', '\xE01', '\x259', '\x3', 
		'\x2', '\x2', '\x2', '\xE02', '\xE06', '\x5', '\x25E', '\x130', '\x2', 
		'\xE03', '\xE06', '\x5', '\x260', '\x131', '\x2', '\xE04', '\xE06', '\x5', 
		'\x25C', '\x12F', '\x2', '\xE05', '\xE02', '\x3', '\x2', '\x2', '\x2', 
		'\xE05', '\xE03', '\x3', '\x2', '\x2', '\x2', '\xE05', '\xE04', '\x3', 
		'\x2', '\x2', '\x2', '\xE06', '\x25B', '\x3', '\x2', '\x2', '\x2', '\xE07', 
		'\xE08', '\a', '\x152', '\x2', '\x2', '\xE08', '\xE09', '\a', '\x153', 
		'\x2', '\x2', '\xE09', '\x25D', '\x3', '\x2', '\x2', '\x2', '\xE0A', '\xE0B', 
		'\t', '\x14', '\x2', '\x2', '\xE0B', '\xE0C', '\a', '\x152', '\x2', '\x2', 
		'\xE0C', '\xE11', '\x5', '\x2C8', '\x165', '\x2', '\xE0D', '\xE0E', '\a', 
		'\x150', '\x2', '\x2', '\xE0E', '\xE10', '\x5', '\x2C8', '\x165', '\x2', 
		'\xE0F', '\xE0D', '\x3', '\x2', '\x2', '\x2', '\xE10', '\xE13', '\x3', 
		'\x2', '\x2', '\x2', '\xE11', '\xE0F', '\x3', '\x2', '\x2', '\x2', '\xE11', 
		'\xE12', '\x3', '\x2', '\x2', '\x2', '\xE12', '\xE14', '\x3', '\x2', '\x2', 
		'\x2', '\xE13', '\xE11', '\x3', '\x2', '\x2', '\x2', '\xE14', '\xE15', 
		'\a', '\x153', '\x2', '\x2', '\xE15', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'\xE16', '\xE1B', '\x5', '\x26E', '\x138', '\x2', '\xE17', '\xE18', '\a', 
		'\x97', '\x2', '\x2', '\xE18', '\xE1C', '\a', '\xE6', '\x2', '\x2', '\xE19', 
		'\xE1A', '\a', '\x97', '\x2', '\x2', '\xE1A', '\xE1C', '\a', '\xE7', '\x2', 
		'\x2', '\xE1B', '\xE17', '\x3', '\x2', '\x2', '\x2', '\xE1B', '\xE19', 
		'\x3', '\x2', '\x2', '\x2', '\xE1B', '\xE1C', '\x3', '\x2', '\x2', '\x2', 
		'\xE1C', '\xE2A', '\x3', '\x2', '\x2', '\x2', '\xE1D', '\xE1E', '\a', 
		'\xF4', '\x2', '\x2', '\xE1E', '\xE1F', '\a', '\xF5', '\x2', '\x2', '\xE1F', 
		'\xE20', '\a', '\x152', '\x2', '\x2', '\xE20', '\xE25', '\x5', '\x262', 
		'\x132', '\x2', '\xE21', '\xE22', '\a', '\x150', '\x2', '\x2', '\xE22', 
		'\xE24', '\x5', '\x262', '\x132', '\x2', '\xE23', '\xE21', '\x3', '\x2', 
		'\x2', '\x2', '\xE24', '\xE27', '\x3', '\x2', '\x2', '\x2', '\xE25', '\xE23', 
		'\x3', '\x2', '\x2', '\x2', '\xE25', '\xE26', '\x3', '\x2', '\x2', '\x2', 
		'\xE26', '\xE28', '\x3', '\x2', '\x2', '\x2', '\xE27', '\xE25', '\x3', 
		'\x2', '\x2', '\x2', '\xE28', '\xE29', '\a', '\x153', '\x2', '\x2', '\xE29', 
		'\xE2B', '\x3', '\x2', '\x2', '\x2', '\xE2A', '\xE1D', '\x3', '\x2', '\x2', 
		'\x2', '\xE2A', '\xE2B', '\x3', '\x2', '\x2', '\x2', '\xE2B', '\x261', 
		'\x3', '\x2', '\x2', '\x2', '\xE2C', '\xE2F', '\x5', '\x264', '\x133', 
		'\x2', '\xE2D', '\xE2F', '\x5', '\x266', '\x134', '\x2', '\xE2E', '\xE2C', 
		'\x3', '\x2', '\x2', '\x2', '\xE2E', '\xE2D', '\x3', '\x2', '\x2', '\x2', 
		'\xE2F', '\x263', '\x3', '\x2', '\x2', '\x2', '\xE30', '\xE32', '\a', 
		'\x152', '\x2', '\x2', '\xE31', '\xE33', '\x5', '\x2C8', '\x165', '\x2', 
		'\xE32', '\xE31', '\x3', '\x2', '\x2', '\x2', '\xE32', '\xE33', '\x3', 
		'\x2', '\x2', '\x2', '\xE33', '\xE38', '\x3', '\x2', '\x2', '\x2', '\xE34', 
		'\xE35', '\a', '\x150', '\x2', '\x2', '\xE35', '\xE37', '\x5', '\x2C8', 
		'\x165', '\x2', '\xE36', '\xE34', '\x3', '\x2', '\x2', '\x2', '\xE37', 
		'\xE3A', '\x3', '\x2', '\x2', '\x2', '\xE38', '\xE36', '\x3', '\x2', '\x2', 
		'\x2', '\xE38', '\xE39', '\x3', '\x2', '\x2', '\x2', '\xE39', '\xE3B', 
		'\x3', '\x2', '\x2', '\x2', '\xE3A', '\xE38', '\x3', '\x2', '\x2', '\x2', 
		'\xE3B', '\xE3C', '\a', '\x153', '\x2', '\x2', '\xE3C', '\x265', '\x3', 
		'\x2', '\x2', '\x2', '\xE3D', '\xE3E', '\x5', '\x2C8', '\x165', '\x2', 
		'\xE3E', '\x267', '\x3', '\x2', '\x2', '\x2', '\xE3F', '\xE40', '\a', 
		'\x15', '\x2', '\x2', '\xE40', '\xE41', '\x5', '\x26A', '\x136', '\x2', 
		'\xE41', '\x269', '\x3', '\x2', '\x2', '\x2', '\xE42', '\xE43', '\x5', 
		'\x2C8', '\x165', '\x2', '\xE43', '\x26B', '\x3', '\x2', '\x2', '\x2', 
		'\xE44', '\xE45', '\a', '\x152', '\x2', '\x2', '\xE45', '\xE46', '\x5', 
		'\x26E', '\x138', '\x2', '\xE46', '\xE47', '\a', '\x153', '\x2', '\x2', 
		'\xE47', '\x26D', '\x3', '\x2', '\x2', '\x2', '\xE48', '\xE4A', '\x5', 
		'\x2C8', '\x165', '\x2', '\xE49', '\xE4B', '\x5', '\x270', '\x139', '\x2', 
		'\xE4A', '\xE49', '\x3', '\x2', '\x2', '\x2', '\xE4A', '\xE4B', '\x3', 
		'\x2', '\x2', '\x2', '\xE4B', '\x26F', '\x3', '\x2', '\x2', '\x2', '\xE4C', 
		'\xE4D', '\a', '\x150', '\x2', '\x2', '\xE4D', '\xE4F', '\x5', '\x2C8', 
		'\x165', '\x2', '\xE4E', '\xE4C', '\x3', '\x2', '\x2', '\x2', '\xE4F', 
		'\xE50', '\x3', '\x2', '\x2', '\x2', '\xE50', '\xE4E', '\x3', '\x2', '\x2', 
		'\x2', '\xE50', '\xE51', '\x3', '\x2', '\x2', '\x2', '\xE51', '\x271', 
		'\x3', '\x2', '\x2', '\x2', '\xE52', '\xE55', '\x5', '\x26C', '\x137', 
		'\x2', '\xE53', '\xE55', '\x5', '\x26E', '\x138', '\x2', '\xE54', '\xE52', 
		'\x3', '\x2', '\x2', '\x2', '\xE54', '\xE53', '\x3', '\x2', '\x2', '\x2', 
		'\xE55', '\x273', '\x3', '\x2', '\x2', '\x2', '\xE56', '\xE57', '\a', 
		'\x152', '\x2', '\x2', '\xE57', '\xE5C', '\x5', '\x182', '\xC2', '\x2', 
		'\xE58', '\xE59', '\a', '\x150', '\x2', '\x2', '\xE59', '\xE5B', '\x5', 
		'\x182', '\xC2', '\x2', '\xE5A', '\xE58', '\x3', '\x2', '\x2', '\x2', 
		'\xE5B', '\xE5E', '\x3', '\x2', '\x2', '\x2', '\xE5C', '\xE5A', '\x3', 
		'\x2', '\x2', '\x2', '\xE5C', '\xE5D', '\x3', '\x2', '\x2', '\x2', '\xE5D', 
		'\xE5F', '\x3', '\x2', '\x2', '\x2', '\xE5E', '\xE5C', '\x3', '\x2', '\x2', 
		'\x2', '\xE5F', '\xE60', '\a', '\x153', '\x2', '\x2', '\xE60', '\x275', 
		'\x3', '\x2', '\x2', '\x2', '\xE61', '\xE66', '\x5', '\x182', '\xC2', 
		'\x2', '\xE62', '\xE63', '\a', '\x150', '\x2', '\x2', '\xE63', '\xE65', 
		'\x5', '\x182', '\xC2', '\x2', '\xE64', '\xE62', '\x3', '\x2', '\x2', 
		'\x2', '\xE65', '\xE68', '\x3', '\x2', '\x2', '\x2', '\xE66', '\xE64', 
		'\x3', '\x2', '\x2', '\x2', '\xE66', '\xE67', '\x3', '\x2', '\x2', '\x2', 
		'\xE67', '\x277', '\x3', '\x2', '\x2', '\x2', '\xE68', '\xE66', '\x3', 
		'\x2', '\x2', '\x2', '\xE69', '\xE6A', '\a', '\x12', '\x2', '\x2', '\xE6A', 
		'\xE6B', '\a', '\x14', '\x2', '\x2', '\xE6B', '\xE70', '\x5', '\x182', 
		'\xC2', '\x2', '\xE6C', '\xE6D', '\a', '\x150', '\x2', '\x2', '\xE6D', 
		'\xE6F', '\x5', '\x182', '\xC2', '\x2', '\xE6E', '\xE6C', '\x3', '\x2', 
		'\x2', '\x2', '\xE6F', '\xE72', '\x3', '\x2', '\x2', '\x2', '\xE70', '\xE6E', 
		'\x3', '\x2', '\x2', '\x2', '\xE70', '\xE71', '\x3', '\x2', '\x2', '\x2', 
		'\xE71', '\x279', '\x3', '\x2', '\x2', '\x2', '\xE72', '\xE70', '\x3', 
		'\x2', '\x2', '\x2', '\xE73', '\xE74', '\a', '\x35', '\x2', '\x2', '\xE74', 
		'\xE75', '\a', '\x14', '\x2', '\x2', '\xE75', '\xE76', '\x5', '\x272', 
		'\x13A', '\x2', '\xE76', '\x27B', '\x3', '\x2', '\x2', '\x2', '\xE77', 
		'\xE78', '\a', '%', '\x2', '\x2', '\xE78', '\xE79', '\a', '\x14', '\x2', 
		'\x2', '\xE79', '\xE7A', '\x5', '\x272', '\x13A', '\x2', '\xE7A', '\x27D', 
		'\x3', '\x2', '\x2', '\x2', '\xE7B', '\xE7C', '\a', '\x36', '\x2', '\x2', 
		'\xE7C', '\xE7D', '\a', '\x14', '\x2', '\x2', '\xE7D', '\xE7E', '\x5', 
		'\x272', '\x13A', '\x2', '\xE7E', '\x27F', '\x3', '\x2', '\x2', '\x2', 
		'\xE7F', '\xE80', '\a', '\x37', '\x2', '\x2', '\xE80', '\xE83', '\a', 
		'\x14', '\x2', '\x2', '\xE81', '\xE84', '\x5', '\x274', '\x13B', '\x2', 
		'\xE82', '\xE84', '\x5', '\x276', '\x13C', '\x2', '\xE83', '\xE81', '\x3', 
		'\x2', '\x2', '\x2', '\xE83', '\xE82', '\x3', '\x2', '\x2', '\x2', '\xE84', 
		'\x281', '\x3', '\x2', '\x2', '\x2', '\xE85', '\xE86', '\x5', '\x284', 
		'\x143', '\x2', '\xE86', '\xE95', '\a', '\x152', '\x2', '\x2', '\xE87', 
		'\xE96', '\a', '\x162', '\x2', '\x2', '\xE88', '\xE8A', '\t', '\x11', 
		'\x2', '\x2', '\xE89', '\xE88', '\x3', '\x2', '\x2', '\x2', '\xE89', '\xE8A', 
		'\x3', '\x2', '\x2', '\x2', '\xE8A', '\xE93', '\x3', '\x2', '\x2', '\x2', 
		'\xE8B', '\xE90', '\x5', '\x204', '\x103', '\x2', '\xE8C', '\xE8D', '\a', 
		'\x150', '\x2', '\x2', '\xE8D', '\xE8F', '\x5', '\x204', '\x103', '\x2', 
		'\xE8E', '\xE8C', '\x3', '\x2', '\x2', '\x2', '\xE8F', '\xE92', '\x3', 
		'\x2', '\x2', '\x2', '\xE90', '\xE8E', '\x3', '\x2', '\x2', '\x2', '\xE90', 
		'\xE91', '\x3', '\x2', '\x2', '\x2', '\xE91', '\xE94', '\x3', '\x2', '\x2', 
		'\x2', '\xE92', '\xE90', '\x3', '\x2', '\x2', '\x2', '\xE93', '\xE8B', 
		'\x3', '\x2', '\x2', '\x2', '\xE93', '\xE94', '\x3', '\x2', '\x2', '\x2', 
		'\xE94', '\xE96', '\x3', '\x2', '\x2', '\x2', '\xE95', '\xE87', '\x3', 
		'\x2', '\x2', '\x2', '\xE95', '\xE89', '\x3', '\x2', '\x2', '\x2', '\xE96', 
		'\xE97', '\x3', '\x2', '\x2', '\x2', '\xE97', '\xE9A', '\a', '\x153', 
		'\x2', '\x2', '\xE98', '\xE99', '\a', '\xF3', '\x2', '\x2', '\xE99', '\xE9B', 
		'\x5', '\x20C', '\x107', '\x2', '\xE9A', '\xE98', '\x3', '\x2', '\x2', 
		'\x2', '\xE9A', '\xE9B', '\x3', '\x2', '\x2', '\x2', '\xE9B', '\x283', 
		'\x3', '\x2', '\x2', '\x2', '\xE9C', '\xE9F', '\x5', '\x2EA', '\x176', 
		'\x2', '\xE9D', '\xE9F', '\x5', '\x2F0', '\x179', '\x2', '\xE9E', '\xE9C', 
		'\x3', '\x2', '\x2', '\x2', '\xE9E', '\xE9D', '\x3', '\x2', '\x2', '\x2', 
		'\xE9F', '\x285', '\x3', '\x2', '\x2', '\x2', '\xEA0', '\xEA1', '\a', 
		'\x87', '\x2', '\x2', '\xEA1', '\xEA2', '\a', '\x152', '\x2', '\x2', '\xEA2', 
		'\xEA3', '\x5', '\x2C8', '\x165', '\x2', '\xEA3', '\xEA4', '\a', '\x18', 
		'\x2', '\x2', '\xEA4', '\xEA5', '\x5', '\x1A6', '\xD4', '\x2', '\xEA5', 
		'\xEA6', '\a', '\x153', '\x2', '\x2', '\xEA6', '\x287', '\x3', '\x2', 
		'\x2', '\x2', '\xEA7', '\xEA8', '\a', '\xA4', '\x2', '\x2', '\xEA8', '\xEAE', 
		'\x5', '\x2C8', '\x165', '\x2', '\xEA9', '\xEAA', '\a', '\xA5', '\x2', 
		'\x2', '\xEAA', '\xEAB', '\x5', '\x2C8', '\x165', '\x2', '\xEAB', '\xEAC', 
		'\a', '\xA6', '\x2', '\x2', '\xEAC', '\xEAD', '\x5', '\x2C8', '\x165', 
		'\x2', '\xEAD', '\xEAF', '\x3', '\x2', '\x2', '\x2', '\xEAE', '\xEA9', 
		'\x3', '\x2', '\x2', '\x2', '\xEAF', '\xEB0', '\x3', '\x2', '\x2', '\x2', 
		'\xEB0', '\xEAE', '\x3', '\x2', '\x2', '\x2', '\xEB0', '\xEB1', '\x3', 
		'\x2', '\x2', '\x2', '\xEB1', '\xEB4', '\x3', '\x2', '\x2', '\x2', '\xEB2', 
		'\xEB3', '\a', '\xA7', '\x2', '\x2', '\xEB3', '\xEB5', '\x5', '\x2C8', 
		'\x165', '\x2', '\xEB4', '\xEB2', '\x3', '\x2', '\x2', '\x2', '\xEB4', 
		'\xEB5', '\x3', '\x2', '\x2', '\x2', '\xEB5', '\xEB6', '\x3', '\x2', '\x2', 
		'\x2', '\xEB6', '\xEB7', '\a', '\xA8', '\x2', '\x2', '\xEB7', '\x289', 
		'\x3', '\x2', '\x2', '\x2', '\xEB8', '\xEBE', '\a', '\xA4', '\x2', '\x2', 
		'\xEB9', '\xEBA', '\a', '\xA5', '\x2', '\x2', '\xEBA', '\xEBB', '\x5', 
		'\x2C8', '\x165', '\x2', '\xEBB', '\xEBC', '\a', '\xA6', '\x2', '\x2', 
		'\xEBC', '\xEBD', '\x5', '\x2C8', '\x165', '\x2', '\xEBD', '\xEBF', '\x3', 
		'\x2', '\x2', '\x2', '\xEBE', '\xEB9', '\x3', '\x2', '\x2', '\x2', '\xEBF', 
		'\xEC0', '\x3', '\x2', '\x2', '\x2', '\xEC0', '\xEBE', '\x3', '\x2', '\x2', 
		'\x2', '\xEC0', '\xEC1', '\x3', '\x2', '\x2', '\x2', '\xEC1', '\xEC4', 
		'\x3', '\x2', '\x2', '\x2', '\xEC2', '\xEC3', '\a', '\xA7', '\x2', '\x2', 
		'\xEC3', '\xEC5', '\x5', '\x2C8', '\x165', '\x2', '\xEC4', '\xEC2', '\x3', 
		'\x2', '\x2', '\x2', '\xEC4', '\xEC5', '\x3', '\x2', '\x2', '\x2', '\xEC5', 
		'\xEC6', '\x3', '\x2', '\x2', '\x2', '\xEC6', '\xEC7', '\a', '\xA8', '\x2', 
		'\x2', '\xEC7', '\x28B', '\x3', '\x2', '\x2', '\x2', '\xEC8', '\xEC9', 
		'\a', '\x12E', '\x2', '\x2', '\xEC9', '\xECA', '\a', '\x152', '\x2', '\x2', 
		'\xECA', '\xECD', '\x5', '\x2C8', '\x165', '\x2', '\xECB', '\xECC', '\a', 
		'M', '\x2', '\x2', '\xECC', '\xECE', '\x5', '\x28E', '\x148', '\x2', '\xECD', 
		'\xECB', '\x3', '\x2', '\x2', '\x2', '\xECD', '\xECE', '\x3', '\x2', '\x2', 
		'\x2', '\xECE', '\xECF', '\x3', '\x2', '\x2', '\x2', '\xECF', '\xED0', 
		'\a', '\x153', '\x2', '\x2', '\xED0', '\x28D', '\x3', '\x2', '\x2', '\x2', 
		'\xED1', '\xED2', '\t', '\x15', '\x2', '\x2', '\xED2', '\x28F', '\x3', 
		'\x2', '\x2', '\x2', '\xED3', '\xED4', '\a', '\x12D', '\x2', '\x2', '\xED4', 
		'\xED5', '\a', '\x152', '\x2', '\x2', '\xED5', '\xED6', '\x5', '\x292', 
		'\x14A', '\x2', '\xED6', '\xED7', '\a', '\x17', '\x2', '\x2', '\xED7', 
		'\xED8', '\x5', '\x2C8', '\x165', '\x2', '\xED8', '\xED9', '\a', '\x153', 
		'\x2', '\x2', '\xED9', '\x291', '\x3', '\x2', '\x2', '\x2', '\xEDA', '\xEDB', 
		'\t', '\x16', '\x2', '\x2', '\xEDB', '\x293', '\x3', '\x2', '\x2', '\x2', 
		'\xEDC', '\xEE9', '\x5', '\x2A2', '\x152', '\x2', '\xEDD', '\xEE9', '\a', 
		'\x171', '\x2', '\x2', '\xEDE', '\xEE9', '\x5', '\x29A', '\x14E', '\x2', 
		'\xEDF', '\xEE9', '\x5', '\x29C', '\x14F', '\x2', '\xEE0', '\xEE9', '\x5', 
		'\x29E', '\x150', '\x2', '\xEE1', '\xEE9', '\a', '\x16C', '\x2', '\x2', 
		'\xEE2', '\xEE9', '\x5', '\x296', '\x14C', '\x2', '\xEE3', '\xEE9', '\a', 
		'\x16E', '\x2', '\x2', '\xEE4', '\xEE9', '\a', '\x16F', '\x2', '\x2', 
		'\xEE5', '\xEE9', '\x5', '\x298', '\x14D', '\x2', '\xEE6', '\xEE9', '\x5', 
		'\x2D4', '\x16B', '\x2', '\xEE7', '\xEE9', '\a', '\x42', '\x2', '\x2', 
		'\xEE8', '\xEDC', '\x3', '\x2', '\x2', '\x2', '\xEE8', '\xEDD', '\x3', 
		'\x2', '\x2', '\x2', '\xEE8', '\xEDE', '\x3', '\x2', '\x2', '\x2', '\xEE8', 
		'\xEDF', '\x3', '\x2', '\x2', '\x2', '\xEE8', '\xEE0', '\x3', '\x2', '\x2', 
		'\x2', '\xEE8', '\xEE1', '\x3', '\x2', '\x2', '\x2', '\xEE8', '\xEE2', 
		'\x3', '\x2', '\x2', '\x2', '\xEE8', '\xEE3', '\x3', '\x2', '\x2', '\x2', 
		'\xEE8', '\xEE4', '\x3', '\x2', '\x2', '\x2', '\xEE8', '\xEE5', '\x3', 
		'\x2', '\x2', '\x2', '\xEE8', '\xEE6', '\x3', '\x2', '\x2', '\x2', '\xEE8', 
		'\xEE7', '\x3', '\x2', '\x2', '\x2', '\xEE9', '\x295', '\x3', '\x2', '\x2', 
		'\x2', '\xEEA', '\xEEC', '\a', '\x16C', '\x2', '\x2', '\xEEB', '\xEED', 
		'\a', '\x16C', '\x2', '\x2', '\xEEC', '\xEEB', '\x3', '\x2', '\x2', '\x2', 
		'\xEED', '\xEEE', '\x3', '\x2', '\x2', '\x2', '\xEEE', '\xEEC', '\x3', 
		'\x2', '\x2', '\x2', '\xEEE', '\xEEF', '\x3', '\x2', '\x2', '\x2', '\xEEF', 
		'\x297', '\x3', '\x2', '\x2', '\x2', '\xEF0', '\xEF1', '\a', '\x174', 
		'\x2', '\x2', '\xEF1', '\xEF2', '\a', '\x16D', '\x2', '\x2', '\xEF2', 
		'\x299', '\x3', '\x2', '\x2', '\x2', '\xEF3', '\xEF4', '\a', 'W', '\x2', 
		'\x2', '\xEF4', '\xEF7', '\a', '\x16C', '\x2', '\x2', '\xEF5', '\xEF7', 
		'\a', '\xEF', '\x2', '\x2', '\xEF6', '\xEF3', '\x3', '\x2', '\x2', '\x2', 
		'\xEF6', '\xEF5', '\x3', '\x2', '\x2', '\x2', '\xEF7', '\x29B', '\x3', 
		'\x2', '\x2', '\x2', '\xEF8', '\xEF9', '\a', 'Y', '\x2', '\x2', '\xEF9', 
		'\xEFC', '\a', '\x16C', '\x2', '\x2', '\xEFA', '\xEFC', '\a', '\xF0', 
		'\x2', '\x2', '\xEFB', '\xEF8', '\x3', '\x2', '\x2', '\x2', '\xEFB', '\xEFA', 
		'\x3', '\x2', '\x2', '\x2', '\xEFC', '\x29D', '\x3', '\x2', '\x2', '\x2', 
		'\xEFD', '\xEFE', '\a', 'Z', '\x2', '\x2', '\xEFE', '\xEFF', '\a', '\x16C', 
		'\x2', '\x2', '\xEFF', '\x29F', '\x3', '\x2', '\x2', '\x2', '\xF00', '\xF01', 
		'\t', '\x17', '\x2', '\x2', '\xF01', '\x2A1', '\x3', '\x2', '\x2', '\x2', 
		'\xF02', '\xF03', '\x5', '\x2A0', '\x151', '\x2', '\xF03', '\xF04', '\x5', 
		'\x2A6', '\x154', '\x2', '\xF04', '\x2A3', '\x3', '\x2', '\x2', '\x2', 
		'\xF05', '\xF06', '\a', '\x152', '\x2', '\x2', '\xF06', '\xF07', '\x5', 
		'\x2A0', '\x151', '\x2', '\xF07', '\xF08', '\a', '\x153', '\x2', '\x2', 
		'\xF08', '\xF09', '\x5', '\x2A6', '\x154', '\x2', '\xF09', '\xF15', '\x3', 
		'\x2', '\x2', '\x2', '\xF0A', '\xF0B', '\a', ']', '\x2', '\x2', '\xF0B', 
		'\xF0C', '\x5', '\x2A0', '\x151', '\x2', '\xF0C', '\xF0D', '\x5', '\x2A6', 
		'\x154', '\x2', '\xF0D', '\xF15', '\x3', '\x2', '\x2', '\x2', '\xF0E', 
		'\xF0F', '\a', ']', '\x2', '\x2', '\xF0F', '\xF10', '\a', '\x152', '\x2', 
		'\x2', '\xF10', '\xF11', '\x5', '\x2C8', '\x165', '\x2', '\xF11', '\xF12', 
		'\a', '\x153', '\x2', '\x2', '\xF12', '\xF13', '\x5', '\x2A6', '\x154', 
		'\x2', '\xF13', '\xF15', '\x3', '\x2', '\x2', '\x2', '\xF14', '\xF05', 
		'\x3', '\x2', '\x2', '\x2', '\xF14', '\xF0A', '\x3', '\x2', '\x2', '\x2', 
		'\xF14', '\xF0E', '\x3', '\x2', '\x2', '\x2', '\xF15', '\x2A5', '\x3', 
		'\x2', '\x2', '\x2', '\xF16', '\xF17', '\a', '\x10B', '\x2', '\x2', '\xF17', 
		'\xF18', '\a', 'M', '\x2', '\x2', '\xF18', '\xF23', '\a', '\x10E', '\x2', 
		'\x2', '\xF19', '\xF1A', '\a', '\x110', '\x2', '\x2', '\xF1A', '\xF1B', 
		'\a', 'M', '\x2', '\x2', '\xF1B', '\xF23', '\a', '\x114', '\x2', '\x2', 
		'\xF1C', '\xF23', '\a', '\x10B', '\x2', '\x2', '\xF1D', '\xF23', '\a', 
		'\x10E', '\x2', '\x2', '\xF1E', '\xF23', '\a', '\x110', '\x2', '\x2', 
		'\xF1F', '\xF23', '\a', '\x112', '\x2', '\x2', '\xF20', '\xF23', '\a', 
		'\x113', '\x2', '\x2', '\xF21', '\xF23', '\a', '\x114', '\x2', '\x2', 
		'\xF22', '\xF16', '\x3', '\x2', '\x2', '\x2', '\xF22', '\xF19', '\x3', 
		'\x2', '\x2', '\x2', '\xF22', '\xF1C', '\x3', '\x2', '\x2', '\x2', '\xF22', 
		'\xF1D', '\x3', '\x2', '\x2', '\x2', '\xF22', '\xF1E', '\x3', '\x2', '\x2', 
		'\x2', '\xF22', '\xF1F', '\x3', '\x2', '\x2', '\x2', '\xF22', '\xF20', 
		'\x3', '\x2', '\x2', '\x2', '\xF22', '\xF21', '\x3', '\x2', '\x2', '\x2', 
		'\xF23', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\xF24', '\xF30', '\x5', 
		'\x294', '\x14B', '\x2', '\xF25', '\xF30', '\x5', '\x2A4', '\x153', '\x2', 
		'\xF26', '\xF30', '\x5', '\x286', '\x144', '\x2', '\xF27', '\xF30', '\x5', 
		'\x290', '\x149', '\x2', '\xF28', '\xF30', '\x5', '\x28C', '\x147', '\x2', 
		'\xF29', '\xF30', '\x5', '\x288', '\x145', '\x2', '\xF2A', '\xF30', '\x5', 
		'\x28A', '\x146', '\x2', '\xF2B', '\xF30', '\x5', '\x2CA', '\x166', '\x2', 
		'\xF2C', '\xF30', '\x5', '\x282', '\x142', '\x2', '\xF2D', '\xF30', '\x5', 
		'\x21A', '\x10E', '\x2', '\xF2E', '\xF30', '\x5', '\x26C', '\x137', '\x2', 
		'\xF2F', '\xF24', '\x3', '\x2', '\x2', '\x2', '\xF2F', '\xF25', '\x3', 
		'\x2', '\x2', '\x2', '\xF2F', '\xF26', '\x3', '\x2', '\x2', '\x2', '\xF2F', 
		'\xF27', '\x3', '\x2', '\x2', '\x2', '\xF2F', '\xF28', '\x3', '\x2', '\x2', 
		'\x2', '\xF2F', '\xF29', '\x3', '\x2', '\x2', '\x2', '\xF2F', '\xF2A', 
		'\x3', '\x2', '\x2', '\x2', '\xF2F', '\xF2B', '\x3', '\x2', '\x2', '\x2', 
		'\xF2F', '\xF2C', '\x3', '\x2', '\x2', '\x2', '\xF2F', '\xF2D', '\x3', 
		'\x2', '\x2', '\x2', '\xF2F', '\xF2E', '\x3', '\x2', '\x2', '\x2', '\xF30', 
		'\x2A9', '\x3', '\x2', '\x2', '\x2', '\xF31', '\xF32', '\t', '\x18', '\x2', 
		'\x2', '\xF32', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\xF33', '\xF3D', 
		'\a', '\x42', '\x2', '\x2', '\xF34', '\xF3D', '\a', '\x3', '\x2', '\x2', 
		'\xF35', '\xF3D', '\a', '\x4', '\x2', '\x2', '\xF36', '\xF37', '\a', '\t', 
		'\x2', '\x2', '\xF37', '\xF3D', '\a', '\x42', '\x2', '\x2', '\xF38', '\xF39', 
		'\a', '\t', '\x2', '\x2', '\xF39', '\xF3D', '\a', '\x3', '\x2', '\x2', 
		'\xF3A', '\xF3B', '\a', '\t', '\x2', '\x2', '\xF3B', '\xF3D', '\a', '\x4', 
		'\x2', '\x2', '\xF3C', '\xF33', '\x3', '\x2', '\x2', '\x2', '\xF3C', '\xF34', 
		'\x3', '\x2', '\x2', '\x2', '\xF3C', '\xF35', '\x3', '\x2', '\x2', '\x2', 
		'\xF3C', '\xF36', '\x3', '\x2', '\x2', '\x2', '\xF3C', '\xF38', '\x3', 
		'\x2', '\x2', '\x2', '\xF3C', '\xF3A', '\x3', '\x2', '\x2', '\x2', '\xF3D', 
		'\x2AD', '\x3', '\x2', '\x2', '\x2', '\xF3E', '\xF3F', '\a', '\x169', 
		'\x2', '\x2', '\xF3F', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\xF40', '\xF41', 
		'\t', '\x19', '\x2', '\x2', '\xF41', '\x2B1', '\x3', '\x2', '\x2', '\x2', 
		'\xF42', '\xF43', '\t', '\x1A', '\x2', '\x2', '\xF43', '\x2B3', '\x3', 
		'\x2', '\x2', '\x2', '\xF44', '\xF45', '\a', '\x168', '\x2', '\x2', '\xF45', 
		'\x2B5', '\x3', '\x2', '\x2', '\x2', '\xF46', '\xF47', '\a', '\x165', 
		'\x2', '\x2', '\xF47', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\xF48', '\xF49', 
		'\a', '\x167', '\x2', '\x2', '\xF49', '\x2B9', '\x3', '\x2', '\x2', '\x2', 
		'\xF4A', '\xF4B', '\t', '\x1B', '\x2', '\x2', '\xF4B', '\x2BB', '\x3', 
		'\x2', '\x2', '\x2', '\xF4C', '\xF52', '\x5', '\x2BA', '\x15E', '\x2', 
		'\xF4D', '\xF52', '\a', '\x15B', '\x2', '\x2', '\xF4E', '\xF52', '\a', 
		'\x15C', '\x2', '\x2', '\xF4F', '\xF52', '\a', '\x15D', '\x2', '\x2', 
		'\xF50', '\xF52', '\a', '\x15E', '\x2', '\x2', '\xF51', '\xF4C', '\x3', 
		'\x2', '\x2', '\x2', '\xF51', '\xF4D', '\x3', '\x2', '\x2', '\x2', '\xF51', 
		'\xF4E', '\x3', '\x2', '\x2', '\x2', '\xF51', '\xF4F', '\x3', '\x2', '\x2', 
		'\x2', '\xF51', '\xF50', '\x3', '\x2', '\x2', '\x2', '\xF52', '\x2BD', 
		'\x3', '\x2', '\x2', '\x2', '\xF53', '\xF54', '\a', '\x41', '\x2', '\x2', 
		'\xF54', '\xF55', '\a', '\x1A', '\x2', '\x2', '\xF55', '\xF56', '\a', 
		'\x17', '\x2', '\x2', '\xF56', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\xF57', 
		'\xF5F', '\a', '\x158', '\x2', '\x2', '\xF58', '\xF5F', '\a', '\x159', 
		'\x2', '\x2', '\xF59', '\xF5F', '\a', '\x15A', '\x2', '\x2', '\xF5A', 
		'\xF5B', '\a', '\x41', '\x2', '\x2', '\xF5B', '\xF5C', '\a', '\t', '\x2', 
		'\x2', '\xF5C', '\xF5D', '\a', '\x1A', '\x2', '\x2', '\xF5D', '\xF5F', 
		'\a', '\x17', '\x2', '\x2', '\xF5E', '\xF57', '\x3', '\x2', '\x2', '\x2', 
		'\xF5E', '\xF58', '\x3', '\x2', '\x2', '\x2', '\xF5E', '\xF59', '\x3', 
		'\x2', '\x2', '\x2', '\xF5E', '\xF5A', '\x3', '\x2', '\x2', '\x2', '\xF5F', 
		'\x2C1', '\x3', '\x2', '\x2', '\x2', '\xF60', '\xF61', '\a', '\t', '\x2', 
		'\x2', '\xF61', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\xF62', '\xF63', 
		'\a', '\a', '\x2', '\x2', '\xF63', '\x2C5', '\x3', '\x2', '\x2', '\x2', 
		'\xF64', '\xF65', '\a', '\b', '\x2', '\x2', '\xF65', '\x2C7', '\x3', '\x2', 
		'\x2', '\x2', '\xF66', '\xF67', '\b', '\x165', '\x1', '\x2', '\xF67', 
		'\xF70', '\x5', '\x2A8', '\x155', '\x2', '\xF68', '\xF69', '\a', '\x154', 
		'\x2', '\x2', '\xF69', '\xF6A', '\x5', '\x2C8', '\x165', '\x2', '\xF6A', 
		'\xF6B', '\a', '\x155', '\x2', '\x2', '\xF6B', '\xF6F', '\x3', '\x2', 
		'\x2', '\x2', '\xF6C', '\xF6D', '\a', '\x14E', '\x2', '\x2', '\xF6D', 
		'\xF6F', '\x5', '\x2E8', '\x175', '\x2', '\xF6E', '\xF68', '\x3', '\x2', 
		'\x2', '\x2', '\xF6E', '\xF6C', '\x3', '\x2', '\x2', '\x2', '\xF6F', '\xF72', 
		'\x3', '\x2', '\x2', '\x2', '\xF70', '\xF6E', '\x3', '\x2', '\x2', '\x2', 
		'\xF70', '\xF71', '\x3', '\x2', '\x2', '\x2', '\xF71', '\xF80', '\x3', 
		'\x2', '\x2', '\x2', '\xF72', '\xF70', '\x3', '\x2', '\x2', '\x2', '\xF73', 
		'\xF74', '\x5', '\x2AA', '\x156', '\x2', '\xF74', '\xF75', '\x5', '\x2C8', 
		'\x165', '\x11', '\xF75', '\xF80', '\x3', '\x2', '\x2', '\x2', '\xF76', 
		'\xF77', '\a', '\r', '\x2', '\x2', '\xF77', '\xF80', '\x5', '\x2CA', '\x166', 
		'\x2', '\xF78', '\xF79', '\x5', '\x2C2', '\x162', '\x2', '\xF79', '\xF7A', 
		'\x5', '\x2C8', '\x165', '\x6', '\xF7A', '\xF80', '\x3', '\x2', '\x2', 
		'\x2', '\xF7B', '\xF7C', '\a', '\x152', '\x2', '\x2', '\xF7C', '\xF7D', 
		'\x5', '\x2C8', '\x165', '\x2', '\xF7D', '\xF7E', '\a', '\x153', '\x2', 
		'\x2', '\xF7E', '\xF80', '\x3', '\x2', '\x2', '\x2', '\xF7F', '\xF66', 
		'\x3', '\x2', '\x2', '\x2', '\xF7F', '\xF73', '\x3', '\x2', '\x2', '\x2', 
		'\xF7F', '\xF76', '\x3', '\x2', '\x2', '\x2', '\xF7F', '\xF78', '\x3', 
		'\x2', '\x2', '\x2', '\xF7F', '\xF7B', '\x3', '\x2', '\x2', '\x2', '\xF80', 
		'\xFAF', '\x3', '\x2', '\x2', '\x2', '\xF81', '\xF82', '\f', '\xF', '\x2', 
		'\x2', '\xF82', '\xF83', '\x5', '\x2AE', '\x158', '\x2', '\xF83', '\xF84', 
		'\x5', '\x2C8', '\x165', '\x10', '\xF84', '\xFAE', '\x3', '\x2', '\x2', 
		'\x2', '\xF85', '\xF86', '\f', '\xE', '\x2', '\x2', '\xF86', '\xF87', 
		'\x5', '\x2B0', '\x159', '\x2', '\xF87', '\xF88', '\x5', '\x2C8', '\x165', 
		'\xF', '\xF88', '\xFAE', '\x3', '\x2', '\x2', '\x2', '\xF89', '\xF8A', 
		'\f', '\r', '\x2', '\x2', '\xF8A', '\xF8B', '\x5', '\x2B2', '\x15A', '\x2', 
		'\xF8B', '\xF8C', '\x5', '\x2C8', '\x165', '\xE', '\xF8C', '\xFAE', '\x3', 
		'\x2', '\x2', '\x2', '\xF8D', '\xF8E', '\f', '\f', '\x2', '\x2', '\xF8E', 
		'\xF8F', '\x5', '\x2B4', '\x15B', '\x2', '\xF8F', '\xF90', '\x5', '\x2C8', 
		'\x165', '\r', '\xF90', '\xFAE', '\x3', '\x2', '\x2', '\x2', '\xF91', 
		'\xF92', '\f', '\v', '\x2', '\x2', '\xF92', '\xF93', '\x5', '\x2B6', '\x15C', 
		'\x2', '\xF93', '\xF94', '\x5', '\x2C8', '\x165', '\f', '\xF94', '\xFAE', 
		'\x3', '\x2', '\x2', '\x2', '\xF95', '\xF96', '\f', '\n', '\x2', '\x2', 
		'\xF96', '\xF97', '\x5', '\x2B8', '\x15D', '\x2', '\xF97', '\xF98', '\x5', 
		'\x2C8', '\x165', '\v', '\xF98', '\xFAE', '\x3', '\x2', '\x2', '\x2', 
		'\xF99', '\xF9C', '\f', '\a', '\x2', '\x2', '\xF9A', '\xF9D', '\x5', '\x2C0', 
		'\x161', '\x2', '\xF9B', '\xF9D', '\x5', '\x2BE', '\x160', '\x2', '\xF9C', 
		'\xF9A', '\x3', '\x2', '\x2', '\x2', '\xF9C', '\xF9B', '\x3', '\x2', '\x2', 
		'\x2', '\xF9D', '\xF9E', '\x3', '\x2', '\x2', '\x2', '\xF9E', '\xF9F', 
		'\x5', '\x2C8', '\x165', '\b', '\xF9F', '\xFAE', '\x3', '\x2', '\x2', 
		'\x2', '\xFA0', '\xFA1', '\f', '\x5', '\x2', '\x2', '\xFA1', '\xFA2', 
		'\x5', '\x2C4', '\x163', '\x2', '\xFA2', '\xFA3', '\x5', '\x2C8', '\x165', 
		'\x6', '\xFA3', '\xFAE', '\x3', '\x2', '\x2', '\x2', '\xFA4', '\xFA5', 
		'\f', '\x4', '\x2', '\x2', '\xFA5', '\xFA6', '\x5', '\x2C6', '\x164', 
		'\x2', '\xFA6', '\xFA7', '\x5', '\x2C8', '\x165', '\x5', '\xFA7', '\xFAE', 
		'\x3', '\x2', '\x2', '\x2', '\xFA8', '\xFA9', '\f', '\x10', '\x2', '\x2', 
		'\xFA9', '\xFAA', '\a', '\x41', '\x2', '\x2', '\xFAA', '\xFAE', '\x5', 
		'\x2AC', '\x157', '\x2', '\xFAB', '\xFAC', '\f', '\t', '\x2', '\x2', '\xFAC', 
		'\xFAE', '\x5', '\x2CC', '\x167', '\x2', '\xFAD', '\xF81', '\x3', '\x2', 
		'\x2', '\x2', '\xFAD', '\xF85', '\x3', '\x2', '\x2', '\x2', '\xFAD', '\xF89', 
		'\x3', '\x2', '\x2', '\x2', '\xFAD', '\xF8D', '\x3', '\x2', '\x2', '\x2', 
		'\xFAD', '\xF91', '\x3', '\x2', '\x2', '\x2', '\xFAD', '\xF95', '\x3', 
		'\x2', '\x2', '\x2', '\xFAD', '\xF99', '\x3', '\x2', '\x2', '\x2', '\xFAD', 
		'\xFA0', '\x3', '\x2', '\x2', '\x2', '\xFAD', '\xFA4', '\x3', '\x2', '\x2', 
		'\x2', '\xFAD', '\xFA8', '\x3', '\x2', '\x2', '\x2', '\xFAD', '\xFAB', 
		'\x3', '\x2', '\x2', '\x2', '\xFAE', '\xFB1', '\x3', '\x2', '\x2', '\x2', 
		'\xFAF', '\xFAD', '\x3', '\x2', '\x2', '\x2', '\xFAF', '\xFB0', '\x3', 
		'\x2', '\x2', '\x2', '\xFB0', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\xFB1', 
		'\xFAF', '\x3', '\x2', '\x2', '\x2', '\xFB2', '\xFB3', '\a', '\x152', 
		'\x2', '\x2', '\xFB3', '\xFB4', '\x5', '\x1C2', '\xE2', '\x2', '\xFB4', 
		'\xFB5', '\a', '\x153', '\x2', '\x2', '\xFB5', '\x2CB', '\x3', '\x2', 
		'\x2', '\x2', '\xFB6', '\xFB7', '\x5', '\x2BC', '\x15F', '\x2', '\xFB7', 
		'\xFB8', '\x5', '\x2C8', '\x165', '\x2', '\xFB8', '\xFBD', '\x3', '\x2', 
		'\x2', '\x2', '\xFB9', '\xFBD', '\x5', '\x2CE', '\x168', '\x2', '\xFBA', 
		'\xFBB', '\a', '\t', '\x2', '\x2', '\xFBB', '\xFBD', '\x5', '\x2D2', '\x16A', 
		'\x2', '\xFBC', '\xFB6', '\x3', '\x2', '\x2', '\x2', '\xFBC', '\xFB9', 
		'\x3', '\x2', '\x2', '\x2', '\xFBC', '\xFBA', '\x3', '\x2', '\x2', '\x2', 
		'\xFBD', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\xFBE', '\xFBF', '\a', 
		'\xB6', '\x2', '\x2', '\xFBF', '\xFCC', '\x5', '\x2D0', '\x169', '\x2', 
		'\xFC0', '\xFC1', '\a', '\xCE', '\x2', '\x2', '\xFC1', '\xFC2', '\x5', 
		'\x2C8', '\x165', '\x2', '\xFC2', '\xFC3', '\a', '\a', '\x2', '\x2', '\xFC3', 
		'\xFC4', '\x5', '\x2C8', '\x165', '\x2', '\xFC4', '\xFCC', '\x3', '\x2', 
		'\x2', '\x2', '\xFC5', '\xFC6', '\a', '\n', '\x2', '\x2', '\xFC6', '\xFC7', 
		'\a', '\v', '\x2', '\x2', '\xFC7', '\xFCC', '\x5', '\x26C', '\x137', '\x2', 
		'\xFC8', '\xFC9', '\a', '\n', '\x2', '\x2', '\xFC9', '\xFCA', '\a', '\x5', 
		'\x2', '\x2', '\xFCA', '\xFCC', '\x5', '\x26C', '\x137', '\x2', '\xFCB', 
		'\xFBE', '\x3', '\x2', '\x2', '\x2', '\xFCB', '\xFC0', '\x3', '\x2', '\x2', 
		'\x2', '\xFCB', '\xFC5', '\x3', '\x2', '\x2', '\x2', '\xFCB', '\xFC8', 
		'\x3', '\x2', '\x2', '\x2', '\xFCC', '\x2CF', '\x3', '\x2', '\x2', '\x2', 
		'\xFCD', '\xFD0', '\x5', '\x2CA', '\x166', '\x2', '\xFCE', '\xFD0', '\x5', 
		'\x26C', '\x137', '\x2', '\xFCF', '\xFCD', '\x3', '\x2', '\x2', '\x2', 
		'\xFCF', '\xFCE', '\x3', '\x2', '\x2', '\x2', '\xFD0', '\x2D1', '\x3', 
		'\x2', '\x2', '\x2', '\xFD1', '\xFD2', '\x5', '\x2BA', '\x15E', '\x2', 
		'\xFD2', '\xFD3', '\x5', '\x2C8', '\x165', '\x2', '\xFD3', '\xFD6', '\x3', 
		'\x2', '\x2', '\x2', '\xFD4', '\xFD6', '\x5', '\x2CE', '\x168', '\x2', 
		'\xFD5', '\xFD1', '\x3', '\x2', '\x2', '\x2', '\xFD5', '\xFD4', '\x3', 
		'\x2', '\x2', '\x2', '\xFD6', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\xFD7', 
		'\xFD8', '\t', '\x1C', '\x2', '\x2', '\xFD8', '\x2D5', '\x3', '\x2', '\x2', 
		'\x2', '\xFD9', '\xFDA', '\t', '\x1C', '\x2', '\x2', '\xFDA', '\x2D7', 
		'\x3', '\x2', '\x2', '\x2', '\xFDB', '\xFDD', '\x5', '\x240', '\x121', 
		'\x2', '\xFDC', '\xFDE', '\x5', '\x2DA', '\x16E', '\x2', '\xFDD', '\xFDC', 
		'\x3', '\x2', '\x2', '\x2', '\xFDD', '\xFDE', '\x3', '\x2', '\x2', '\x2', 
		'\xFDE', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\xFDF', '\xFE0', '\a', 
		'%', '\x2', '\x2', '\xFE0', '\xFE1', '\a', '\x152', '\x2', '\x2', '\xFE1', 
		'\xFE6', '\x5', '\x2DC', '\x16F', '\x2', '\xFE2', '\xFE3', '\a', '\x150', 
		'\x2', '\x2', '\xFE3', '\xFE5', '\x5', '\x2DC', '\x16F', '\x2', '\xFE4', 
		'\xFE2', '\x3', '\x2', '\x2', '\x2', '\xFE5', '\xFE8', '\x3', '\x2', '\x2', 
		'\x2', '\xFE6', '\xFE4', '\x3', '\x2', '\x2', '\x2', '\xFE6', '\xFE7', 
		'\x3', '\x2', '\x2', '\x2', '\xFE7', '\xFE9', '\x3', '\x2', '\x2', '\x2', 
		'\xFE8', '\xFE6', '\x3', '\x2', '\x2', '\x2', '\xFE9', '\xFEA', '\a', 
		'\x153', '\x2', '\x2', '\xFEA', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\xFEB', 
		'\xFEE', '\x5', '\x2E8', '\x175', '\x2', '\xFEC', '\xFED', '\a', '\x158', 
		'\x2', '\x2', '\xFED', '\xFEF', '\x5', '\x294', '\x14B', '\x2', '\xFEE', 
		'\xFEC', '\x3', '\x2', '\x2', '\x2', '\xFEE', '\xFEF', '\x3', '\x2', '\x2', 
		'\x2', '\xFEF', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\xFF0', '\xFF1', 
		'\a', '%', '\x2', '\x2', '\xFF1', '\xFF2', '\a', '\x152', '\x2', '\x2', 
		'\xFF2', '\xFF7', '\x5', '\x2E0', '\x171', '\x2', '\xFF3', '\xFF4', '\a', 
		'\x150', '\x2', '\x2', '\xFF4', '\xFF6', '\x5', '\x2E0', '\x171', '\x2', 
		'\xFF5', '\xFF3', '\x3', '\x2', '\x2', '\x2', '\xFF6', '\xFF9', '\x3', 
		'\x2', '\x2', '\x2', '\xFF7', '\xFF5', '\x3', '\x2', '\x2', '\x2', '\xFF7', 
		'\xFF8', '\x3', '\x2', '\x2', '\x2', '\xFF8', '\xFFA', '\x3', '\x2', '\x2', 
		'\x2', '\xFF9', '\xFF7', '\x3', '\x2', '\x2', '\x2', '\xFFA', '\xFFB', 
		'\a', '\x153', '\x2', '\x2', '\xFFB', '\x2DF', '\x3', '\x2', '\x2', '\x2', 
		'\xFFC', '\xFFD', '\x5', '\x2E8', '\x175', '\x2', '\xFFD', '\xFFE', '\x5', 
		'\x2E2', '\x172', '\x2', '\xFFE', '\xFFF', '\x5', '\x294', '\x14B', '\x2', 
		'\xFFF', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x1000', '\x1001', '\t', 
		'\x1D', '\x2', '\x2', '\x1001', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x1002', 
		'\x1003', '\t', '\x1E', '\x2', '\x2', '\x1003', '\x2E5', '\x3', '\x2', 
		'\x2', '\x2', '\x1004', '\x1008', '\x5', '\x2E4', '\x173', '\x2', '\x1005', 
		'\x1008', '\a', '\x16C', '\x2', '\x2', '\x1006', '\x1008', '\x5', '\x2EA', 
		'\x176', '\x2', '\x1007', '\x1004', '\x3', '\x2', '\x2', '\x2', '\x1007', 
		'\x1005', '\x3', '\x2', '\x2', '\x2', '\x1007', '\x1006', '\x3', '\x2', 
		'\x2', '\x2', '\x1008', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x1009', 
		'\x100C', '\a', '\x172', '\x2', '\x2', '\x100A', '\x100C', '\x5', '\x2EE', 
		'\x178', '\x2', '\x100B', '\x1009', '\x3', '\x2', '\x2', '\x2', '\x100B', 
		'\x100A', '\x3', '\x2', '\x2', '\x2', '\x100C', '\x2E9', '\x3', '\x2', 
		'\x2', '\x2', '\x100D', '\x100E', '\x5', '\x2E8', '\x175', '\x2', '\x100E', 
		'\x100F', '\a', '\x14E', '\x2', '\x2', '\x100F', '\x1010', '\x5', '\x2E8', 
		'\x175', '\x2', '\x1010', '\x1013', '\x3', '\x2', '\x2', '\x2', '\x1011', 
		'\x1013', '\x5', '\x2E8', '\x175', '\x2', '\x1012', '\x100D', '\x3', '\x2', 
		'\x2', '\x2', '\x1012', '\x1011', '\x3', '\x2', '\x2', '\x2', '\x1013', 
		'\x2EB', '\x3', '\x2', '\x2', '\x2', '\x1014', '\x1017', '\x5', '\x2E8', 
		'\x175', '\x2', '\x1015', '\x1017', '\a', '\x173', '\x2', '\x2', '\x1016', 
		'\x1014', '\x3', '\x2', '\x2', '\x2', '\x1016', '\x1015', '\x3', '\x2', 
		'\x2', '\x2', '\x1017', '\x2ED', '\x3', '\x2', '\x2', '\x2', '\x1018', 
		'\x1019', '\t', '\x1F', '\x2', '\x2', '\x1019', '\x2EF', '\x3', '\x2', 
		'\x2', '\x2', '\x101A', '\x101B', '\t', ' ', '\x2', '\x2', '\x101B', '\x2F1', 
		'\x3', '\x2', '\x2', '\x2', '\x1F1', '\x2F6', '\x2F8', '\x303', '\x309', 
		'\x30F', '\x31A', '\x31D', '\x31F', '\x331', '\x336', '\x33B', '\x341', 
		'\x345', '\x352', '\x356', '\x35A', '\x35F', '\x366', '\x36C', '\x370', 
		'\x372', '\x376', '\x37D', '\x37F', '\x385', '\x390', '\x398', '\x39C', 
		'\x3C6', '\x3E1', '\x3E5', '\x3E8', '\x3ED', '\x3FB', '\x404', '\x408', 
		'\x40F', '\x412', '\x416', '\x41C', '\x41F', '\x422', '\x425', '\x42B', 
		'\x42E', '\x431', '\x434', '\x437', '\x43A', '\x43D', '\x440', '\x443', 
		'\x447', '\x449', '\x453', '\x458', '\x45C', '\x45F', '\x46A', '\x47A', 
		'\x489', '\x48D', '\x49C', '\x4A9', '\x4AD', '\x4B2', '\x4CD', '\x4D2', 
		'\x4DA', '\x4E0', '\x4E4', '\x4E7', '\x4EA', '\x4F0', '\x4F7', '\x501', 
		'\x505', '\x50A', '\x50E', '\x514', '\x51B', '\x522', '\x52A', '\x531', 
		'\x535', '\x538', '\x540', '\x543', '\x54B', '\x54E', '\x552', '\x55C', 
		'\x561', '\x567', '\x574', '\x584', '\x594', '\x5A4', '\x5AB', '\x5BF', 
		'\x5C3', '\x5C8', '\x5CD', '\x5D0', '\x5D3', '\x5D7', '\x5DA', '\x5DD', 
		'\x5E4', '\x5EF', '\x5F7', '\x5FD', '\x60D', '\x610', '\x61A', '\x622', 
		'\x626', '\x629', '\x62D', '\x631', '\x634', '\x639', '\x63E', '\x644', 
		'\x64F', '\x651', '\x655', '\x65B', '\x661', '\x666', '\x66C', '\x671', 
		'\x678', '\x67D', '\x685', '\x68A', '\x691', '\x697', '\x69F', '\x6A6', 
		'\x6AB', '\x6B3', '\x6BA', '\x6BD', '\x6C0', '\x6C2', '\x6D0', '\x6D2', 
		'\x6D8', '\x6E7', '\x6F8', '\x6FD', '\x701', '\x705', '\x70C', '\x713', 
		'\x719', '\x71D', '\x720', '\x727', '\x73E', '\x743', '\x747', '\x74F', 
		'\x757', '\x75B', '\x761', '\x766', '\x76D', '\x770', '\x776', '\x77D', 
		'\x785', '\x78E', '\x797', '\x7AB', '\x7B1', '\x7B4', '\x7B6', '\x7BD', 
		'\x7C7', '\x7CF', '\x7D3', '\x7D7', '\x7E4', '\x7ED', '\x7F3', '\x7F7', 
		'\x7FE', '\x801', '\x804', '\x807', '\x810', '\x814', '\x817', '\x81A', 
		'\x81D', '\x820', '\x823', '\x831', '\x839', '\x83F', '\x843', '\x850', 
		'\x860', '\x870', '\x874', '\x883', '\x889', '\x88C', '\x88F', '\x892', 
		'\x895', '\x899', '\x8A7', '\x8AF', '\x8B2', '\x8C1', '\x8E3', '\x8EB', 
		'\x8F0', '\x8FA', '\x902', '\x90A', '\x912', '\x91D', '\x921', '\x929', 
		'\x932', '\x935', '\x93E', '\x942', '\x944', '\x948', '\x94C', '\x952', 
		'\x959', '\x962', '\x96D', '\x971', '\x978', '\x984', '\x98B', '\x993', 
		'\x997', '\x99A', '\x9A1', '\x9A7', '\x9AB', '\x9AE', '\x9B4', '\x9B8', 
		'\x9BC', '\x9C1', '\x9C5', '\x9C9', '\x9CD', '\x9D5', '\x9D9', '\x9DD', 
		'\x9E1', '\x9E5', '\x9ED', '\x9F1', '\x9F5', '\xA05', '\xA0E', '\xA16', 
		'\xA20', '\xA32', '\xA35', '\xA3F', '\xA5B', '\xA61', '\xA67', '\xA6D', 
		'\xA6F', '\xA72', '\xA78', '\xA80', '\xA8F', '\xA96', '\xA9B', '\xA9E', 
		'\xAA2', '\xAA5', '\xAA8', '\xAAB', '\xAAE', '\xAB4', '\xAB8', '\xABB', 
		'\xABE', '\xAC1', '\xAC4', '\xAC7', '\xACE', '\xAD1', '\xAD8', '\xADB', 
		'\xADE', '\xAE1', '\xAE4', '\xAE7', '\xAEA', '\xAED', '\xAF0', '\xAF3', 
		'\xAF7', '\xAFA', '\xAFD', '\xB00', '\xB03', '\xB06', '\xB09', '\xB0C', 
		'\xB0F', '\xB12', '\xB14', '\xB1A', '\xB1F', '\xB26', '\xB28', '\xB2B', 
		'\xB30', '\xB33', '\xB37', '\xB3C', '\xB43', '\xB49', '\xB55', '\xB5C', 
		'\xB62', '\xB6B', '\xB6E', '\xB72', '\xB78', '\xB82', '\xB86', '\xB91', 
		'\xB97', '\xB9A', '\xBA4', '\xBA6', '\xBAA', '\xBB1', '\xBC7', '\xBCE', 
		'\xBD2', '\xBD5', '\xBDA', '\xBDD', '\xBE4', '\xBEB', '\xBEE', '\xBF6', 
		'\xBFC', '\xBFE', '\xC00', '\xC03', '\xC06', '\xC0B', '\xC15', '\xC1A', 
		'\xC1C', '\xC22', '\xC25', '\xC28', '\xC30', '\xC36', '\xC38', '\xC3A', 
		'\xC3D', '\xC40', '\xC44', '\xC4B', '\xC54', '\xC5E', '\xC61', '\xC64', 
		'\xC67', '\xC6B', '\xC75', '\xC7F', '\xC87', '\xC8F', '\xC96', '\xC9F', 
		'\xCA7', '\xCB3', '\xCB6', '\xCBC', '\xCC3', '\xCCA', '\xCD1', '\xCD8', 
		'\xCE1', '\xCE5', '\xCEC', '\xCF1', '\xCF5', '\xD08', '\xD0D', '\xD12', 
		'\xD18', '\xD25', '\xD28', '\xD2B', '\xD37', '\xD3A', '\xD3D', '\xD45', 
		'\xD4E', '\xD53', '\xD55', '\xD66', '\xD69', '\xD76', '\xD7A', '\xD7E', 
		'\xD81', '\xD84', '\xD87', '\xD8B', '\xD8E', '\xD91', '\xD98', '\xD9D', 
		'\xDA5', '\xDAB', '\xDB0', '\xDB4', '\xDB9', '\xDC0', '\xDCE', '\xDD1', 
		'\xDD5', '\xDE4', '\xDEE', '\xDF7', '\xDFA', '\xE05', '\xE11', '\xE1B', 
		'\xE25', '\xE2A', '\xE2E', '\xE32', '\xE38', '\xE4A', '\xE50', '\xE54', 
		'\xE5C', '\xE66', '\xE70', '\xE83', '\xE89', '\xE90', '\xE93', '\xE95', 
		'\xE9A', '\xE9E', '\xEB0', '\xEB4', '\xEC0', '\xEC4', '\xECD', '\xEE8', 
		'\xEEE', '\xEF6', '\xEFB', '\xF14', '\xF22', '\xF2F', '\xF3C', '\xF51', 
		'\xF5E', '\xF6E', '\xF70', '\xF7F', '\xF9C', '\xFAD', '\xFAF', '\xFBC', 
		'\xFCB', '\xFCF', '\xFD5', '\xFDD', '\xFE6', '\xFEE', '\xFF7', '\x1007', 
		'\x100B', '\x1012', '\x1016',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
