@using Markdig
@implements IAsyncDisposable
@inject IJSRuntime JS
<a href="/articles/">返回文章列表</a>

@if (post is null)
{
    <p>...</p>
}
else
{
    <div class="row">
        <div id="blog-markdown-body" class="markdown-body col-md-9">
            @convertedMarkdown
        </div>
        <ul id="blog-markdown-toc" class="col-md-3">
        </ul>
    </div>

}

@code {
    [Parameter]
    public Blog.Blazor.Models.hexo.Post post { get; set; }

    private MarkupString convertedMarkdown;
    private IJSObjectReference module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./js/script.js");
            await module.InvokeVoidAsync("generateTOC","blog-markdown-body","blog-markdown-toc");
        }
    }

    protected override void OnParametersSet()
    {
        var pipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
        .UseGridTables()
        .UseBootstrap().Build();
        convertedMarkdown = (MarkupString)Markdig.Markdown.ToHtml(post.Content, pipeline);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
